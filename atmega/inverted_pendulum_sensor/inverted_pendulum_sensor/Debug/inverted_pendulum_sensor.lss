
inverted_pendulum_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000f76  0000100a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  00800110  00800110  0000101a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000101a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000104c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000135e  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009df  00000000  00000000  000024b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000962  00000000  00000000  00002e91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  000037f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063e  00000000  00000000  000039d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000094b  00000000  00000000  00004016  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00004961  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 12 03 	jmp	0x624	; 0x624 <__vector_24>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 e7       	ldi	r30, 0x76	; 118
  90:	ff e0       	ldi	r31, 0x0F	; 15
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 31       	cpi	r26, 0x10	; 16
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a0 e1       	ldi	r26, 0x10	; 16
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a3 34       	cpi	r26, 0x43	; 67
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 92 05 	call	0xb24	; 0xb24 <main>
  b2:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <setup_adc>:
void adc_interrupt_enabled(){
	ADCSRA |= (1<<ADIE);
}

void adc_interrupt_disbled(){
	ADCSRA &= ~(1<<ADIE);
  ba:	ec e7       	ldi	r30, 0x7C	; 124
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	90 81       	ld	r25, Z
  c0:	9f 73       	andi	r25, 0x3F	; 63
  c2:	90 83       	st	Z, r25
  c4:	90 81       	ld	r25, Z
  c6:	89 2b       	or	r24, r25
  c8:	80 83       	st	Z, r24
  ca:	80 81       	ld	r24, Z
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	80 83       	st	Z, r24
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret

000000dc <adc_prescaler>:
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	90 81       	ld	r25, Z
  e2:	98 7f       	andi	r25, 0xF8	; 248
  e4:	90 83       	st	Z, r25
  e6:	90 81       	ld	r25, Z
  e8:	89 2b       	or	r24, r25
  ea:	80 83       	st	Z, r24
  ec:	08 95       	ret

000000ee <set_channel>:
  ee:	ec e7       	ldi	r30, 0x7C	; 124
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	90 81       	ld	r25, Z
  f4:	98 7f       	andi	r25, 0xF8	; 248
  f6:	90 83       	st	Z, r25
  f8:	90 81       	ld	r25, Z
  fa:	89 2b       	or	r24, r25
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret

00000100 <adc_interrupt_enabled>:
 100:	ea e7       	ldi	r30, 0x7A	; 122
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	88 60       	ori	r24, 0x08	; 8
 108:	80 83       	st	Z, r24
 10a:	08 95       	ret

0000010c <adc_freerun>:
}
void adc_freerun(){
	ADCSRA |= (1<<ADATE);
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 62       	ori	r24, 0x20	; 32
 114:	80 83       	st	Z, r24
 116:	08 95       	ret

00000118 <adc_start>:
}
void adc_start(){
	ADCSRA |= (1<<ADSC);		///< Starting Analog-to-digital conversion
 118:	ea e7       	ldi	r30, 0x7A	; 122
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	80 83       	st	Z, r24
 122:	08 95       	ret

00000124 <reset_counters>:
	usart_transmit(data);
	reset_counters();
}

void reset_counters(){
		adc_switch_counter = 0;							//	Already done at least two readings, keep going.
 124:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <adc_switch_counter>
		transmit_counter=0;		// Fix: flytta dessa två till en egen "reset_counters" ska ske efter transmits
 128:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 12c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 130:	08 95       	ret

00000132 <send_motorspeed>:
}



void send_motorspeed()
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	1f 92       	push	r1
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t data;
	if(speed>=127){speed=126;}
 13c:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <speed>
 140:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <speed+0x1>
 144:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <speed+0x2>
 148:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <speed+0x3>
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	4e ef       	ldi	r20, 0xFE	; 254
 152:	52 e4       	ldi	r21, 0x42	; 66
 154:	0e 94 10 07 	call	0xe20	; 0xe20 <__gesf2>
 158:	88 23       	and	r24, r24
 15a:	64 f0       	brlt	.+24     	; 0x174 <send_motorspeed+0x42>
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	ac ef       	ldi	r26, 0xFC	; 252
 162:	b2 e4       	ldi	r27, 0x42	; 66
 164:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <speed>
 168:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <speed+0x1>
 16c:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <speed+0x2>
 170:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <speed+0x3>
	data = speed;
 174:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <speed>
 178:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <speed+0x1>
 17c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <speed+0x2>
 180:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <speed+0x3>
 184:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__fixunssfsi>
 188:	69 83       	std	Y+1, r22	; 0x01
	
	data|=motor_direction;
 18a:	99 81       	ldd	r25, Y+1	; 0x01
 18c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <motor_direction>
 190:	89 2b       	or	r24, r25
 192:	89 83       	std	Y+1, r24	; 0x01
	/*if(data!=prev_transmit){
	usart_transmit(data);
	}
	prev_transmit=data;*/
	
	usart_transmit(data);
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	0e 94 b6 05 	call	0xb6c	; 0xb6c <usart_transmit>
	reset_counters();
 19a:	0e 94 92 00 	call	0x124	; 0x124 <reset_counters>
}
 19e:	0f 90       	pop	r0
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <getDegree>:

/*
*	\brief Determines degree depending on which sensor has the most correct reading
*	at the current place in time.
*/
void getDegree(){	// Dåligt namn. Byt det ditt äckel
 1a6:	4f 92       	push	r4
 1a8:	5f 92       	push	r5
 1aa:	6f 92       	push	r6
 1ac:	7f 92       	push	r7
 1ae:	8f 92       	push	r8
 1b0:	9f 92       	push	r9
 1b2:	af 92       	push	r10
 1b4:	bf 92       	push	r11
 1b6:	cf 92       	push	r12
 1b8:	df 92       	push	r13
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
	
	if(e1<NOTHING_VAL && e2<NOTHING_VAL){
 1c2:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <e1>
 1c6:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <e1+0x1>
 1ca:	99 23       	and	r25, r25
 1cc:	fc f4       	brge	.+62     	; 0x20c <getDegree+0x66>
 1ce:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <e2>
 1d2:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <e2+0x1>
 1d6:	99 23       	and	r25, r25
 1d8:	cc f4       	brge	.+50     	; 0x20c <getDegree+0x66>
		e1=0;
 1da:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <e1+0x1>
 1de:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <e1>
		e2=0;
 1e2:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <e2+0x1>
 1e6:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <e2>
		prev_deriv=0;
 1ea:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <prev_deriv>
 1ee:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <prev_deriv+0x1>
 1f2:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <prev_deriv+0x2>
 1f6:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <prev_deriv+0x3>
		prev_int=0;
 1fa:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <prev_int>
 1fe:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <prev_int+0x1>
 202:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <prev_int+0x2>
 206:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <prev_int+0x3>
		return;
 20a:	fd c1       	rjmp	.+1018   	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
	}
	
	if(e1>e2){
 20c:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <e1>
 210:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <e1+0x1>
 214:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <e2>
 218:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <e2+0x1>
 21c:	82 17       	cp	r24, r18
 21e:	93 07       	cpc	r25, r19
 220:	0c f0       	brlt	.+2      	; 0x224 <getDegree+0x7e>
 222:	f8 c0       	rjmp	.+496    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		//speed = abs(P*e1+Ki*(TARGET_1-(H1+H1_prev)/2)+prev_int+Kd*(H1-H1_prev)+prev_deriv);//+Ki*(H1-H1_prev)*DELTA_TIME+Kd*(H1-H1_prev)*DELTA_TIME);			//	Negative multiplication due to the nature of TARGET-adc_val
		
		//speed = abs(P*e1+Ki*(TARGET_1-(H1+H1_prev)/2)+Kd*(H1-H1_prev));//+Ki*(H1-H1_prev)*DELTA_TIME+Kd*(H1-H1_prev)*DELTA_TIME);			//	Negative multiplication due to the nature of TARGET-adc_val
		
		//Med prev
		speed =  (P*e1+Ki*(TARGET_1-(H1+H1_prev)/2)+prev_int+Kd*(H1-H1_prev)+prev_deriv);
 224:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <e1>
 228:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <e1+0x1>
 22c:	07 2e       	mov	r0, r23
 22e:	00 0c       	add	r0, r0
 230:	88 0b       	sbc	r24, r24
 232:	99 0b       	sbc	r25, r25
 234:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__floatsisf>
 238:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <P>
 23c:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <P+0x1>
 240:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <P+0x2>
 244:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <P+0x3>
 248:	0e 94 15 07 	call	0xe2a	; 0xe2a <__mulsf3>
 24c:	6b 01       	movw	r12, r22
 24e:	7c 01       	movw	r14, r24
 250:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <TARGET_1>
 254:	d0 91 36 01 	lds	r29, 0x0136	; 0x800136 <TARGET_1+0x1>
 258:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <H1>
 25c:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <H1+0x1>
 260:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <H1_prev>
 264:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <H1_prev+0x1>
 268:	82 0f       	add	r24, r18
 26a:	93 1f       	adc	r25, r19
 26c:	99 23       	and	r25, r25
 26e:	0c f4       	brge	.+2      	; 0x272 <getDegree+0xcc>
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	95 95       	asr	r25
 274:	87 95       	ror	r24
 276:	be 01       	movw	r22, r28
 278:	68 1b       	sub	r22, r24
 27a:	79 0b       	sbc	r23, r25
 27c:	80 90 08 01 	lds	r8, 0x0108	; 0x800108 <Ki>
 280:	90 90 09 01 	lds	r9, 0x0109	; 0x800109 <Ki+0x1>
 284:	a0 90 0a 01 	lds	r10, 0x010A	; 0x80010a <Ki+0x2>
 288:	b0 90 0b 01 	lds	r11, 0x010B	; 0x80010b <Ki+0x3>
 28c:	07 2e       	mov	r0, r23
 28e:	00 0c       	add	r0, r0
 290:	88 0b       	sbc	r24, r24
 292:	99 0b       	sbc	r25, r25
 294:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__floatsisf>
 298:	a5 01       	movw	r20, r10
 29a:	94 01       	movw	r18, r8
 29c:	0e 94 15 07 	call	0xe2a	; 0xe2a <__mulsf3>
 2a0:	9b 01       	movw	r18, r22
 2a2:	ac 01       	movw	r20, r24
 2a4:	c7 01       	movw	r24, r14
 2a6:	b6 01       	movw	r22, r12
 2a8:	0e 94 be 05 	call	0xb7c	; 0xb7c <__addsf3>
 2ac:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <prev_int>
 2b0:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <prev_int+0x1>
 2b4:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <prev_int+0x2>
 2b8:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <prev_int+0x3>
 2bc:	0e 94 be 05 	call	0xb7c	; 0xb7c <__addsf3>
 2c0:	2b 01       	movw	r4, r22
 2c2:	3c 01       	movw	r6, r24
 2c4:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <H1>
 2c8:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <H1+0x1>
 2cc:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <H1_prev>
 2d0:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <H1_prev+0x1>
 2d4:	68 1b       	sub	r22, r24
 2d6:	79 0b       	sbc	r23, r25
 2d8:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <Kd>
 2dc:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <Kd+0x1>
 2e0:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <Kd+0x2>
 2e4:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <Kd+0x3>
 2e8:	07 2e       	mov	r0, r23
 2ea:	00 0c       	add	r0, r0
 2ec:	88 0b       	sbc	r24, r24
 2ee:	99 0b       	sbc	r25, r25
 2f0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__floatsisf>
 2f4:	a7 01       	movw	r20, r14
 2f6:	96 01       	movw	r18, r12
 2f8:	0e 94 15 07 	call	0xe2a	; 0xe2a <__mulsf3>
 2fc:	9b 01       	movw	r18, r22
 2fe:	ac 01       	movw	r20, r24
 300:	c3 01       	movw	r24, r6
 302:	b2 01       	movw	r22, r4
 304:	0e 94 be 05 	call	0xb7c	; 0xb7c <__addsf3>
 308:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <prev_deriv>
 30c:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <prev_deriv+0x1>
 310:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <prev_deriv+0x2>
 314:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <prev_deriv+0x3>
 318:	0e 94 be 05 	call	0xb7c	; 0xb7c <__addsf3>
 31c:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <speed>
 320:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <speed+0x1>
 324:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <speed+0x2>
 328:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <speed+0x3>
		
		
		
		
		
		prev_int=Ki*(TARGET_1-(H1+H1_prev)/2);
 32c:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <H1>
 330:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <H1+0x1>
 334:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <H1_prev>
 338:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <H1_prev+0x1>
 33c:	82 0f       	add	r24, r18
 33e:	93 1f       	adc	r25, r19
 340:	99 23       	and	r25, r25
 342:	0c f4       	brge	.+2      	; 0x346 <getDegree+0x1a0>
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	95 95       	asr	r25
 348:	87 95       	ror	r24
 34a:	c8 1b       	sub	r28, r24
 34c:	d9 0b       	sbc	r29, r25
 34e:	be 01       	movw	r22, r28
 350:	dd 0f       	add	r29, r29
 352:	88 0b       	sbc	r24, r24
 354:	99 0b       	sbc	r25, r25
 356:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__floatsisf>
 35a:	a5 01       	movw	r20, r10
 35c:	94 01       	movw	r18, r8
 35e:	0e 94 15 07 	call	0xe2a	; 0xe2a <__mulsf3>
 362:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <prev_int>
 366:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <prev_int+0x1>
 36a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <prev_int+0x2>
 36e:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <prev_int+0x3>
		prev_deriv=Tao*Kd*(H1-H1_prev);
 372:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 376:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 37a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 37e:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 382:	c7 01       	movw	r24, r14
 384:	b6 01       	movw	r22, r12
 386:	0e 94 15 07 	call	0xe2a	; 0xe2a <__mulsf3>
 38a:	6b 01       	movw	r12, r22
 38c:	7c 01       	movw	r14, r24
 38e:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <H1>
 392:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <H1+0x1>
 396:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <H1_prev>
 39a:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <H1_prev+0x1>
 39e:	68 1b       	sub	r22, r24
 3a0:	79 0b       	sbc	r23, r25
 3a2:	07 2e       	mov	r0, r23
 3a4:	00 0c       	add	r0, r0
 3a6:	88 0b       	sbc	r24, r24
 3a8:	99 0b       	sbc	r25, r25
 3aa:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__floatsisf>
 3ae:	a7 01       	movw	r20, r14
 3b0:	96 01       	movw	r18, r12
 3b2:	0e 94 15 07 	call	0xe2a	; 0xe2a <__mulsf3>
 3b6:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <prev_deriv>
 3ba:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <prev_deriv+0x1>
 3be:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <prev_deriv+0x2>
 3c2:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <prev_deriv+0x3>
		
		//motor_direction = FORWARD;
		if(speed<0){
 3c6:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <speed>
 3ca:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <speed+0x1>
 3ce:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <speed+0x2>
 3d2:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <speed+0x3>
 3d6:	20 e0       	ldi	r18, 0x00	; 0
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	a9 01       	movw	r20, r18
 3dc:	0e 94 2a 06 	call	0xc54	; 0xc54 <__cmpsf2>
 3e0:	88 23       	and	r24, r24
 3e2:	a4 f4       	brge	.+40     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			motor_direction = BACKWARDS;
 3e4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <motor_direction>
			speed=-speed;
 3e8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <speed>
 3ec:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <speed+0x1>
 3f0:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <speed+0x2>
 3f4:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <speed+0x3>
 3f8:	b0 58       	subi	r27, 0x80	; 128
 3fa:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <speed>
 3fe:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <speed+0x1>
 402:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <speed+0x2>
 406:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <speed+0x3>
 40a:	fb c0       	rjmp	.+502    	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
		}
			else{motor_direction = FORWARD;}
 40c:	80 e8       	ldi	r24, 0x80	; 128
 40e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <motor_direction>
 412:	f7 c0       	rjmp	.+494    	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
	}else{											//	Leaning towards H1, need to drive backwards, e2 should be used
		//speed = abs(P*e2+Ki*(TARGET_2-(H2+H2_prev)/2)+prev_int+Kd*(H2-H2_prev)+prev_deriv);//+Ki*(H2-H2_prev)*DELTA_TIME+Kd*(H2-H2_prev)*DELTA_TIME);			//	Negative multiplication due to the nature of TARGET-adc_val
		//speed = abs(P*e2+Ki*(TARGET_2-(H2+H2_prev)/2)+Kd*(H2-H2_prev));//+Ki*(H2-H2_prev)*DELTA_TIME+Kd*(H2-H2_prev)*DELTA_TIME);			//	Negative multiplication due to the nature of TARGET-adc_val
	
		speed = (P*e2+Ki*(TARGET_2-(H2+H2_prev)/2)+prev_int+Kd*(H2-H2_prev)+prev_deriv);
 414:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <e2>
 418:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <e2+0x1>
 41c:	07 2e       	mov	r0, r23
 41e:	00 0c       	add	r0, r0
 420:	88 0b       	sbc	r24, r24
 422:	99 0b       	sbc	r25, r25
 424:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__floatsisf>
 428:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <P>
 42c:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <P+0x1>
 430:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <P+0x2>
 434:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <P+0x3>
 438:	0e 94 15 07 	call	0xe2a	; 0xe2a <__mulsf3>
 43c:	6b 01       	movw	r12, r22
 43e:	7c 01       	movw	r14, r24
 440:	c0 91 3d 01 	lds	r28, 0x013D	; 0x80013d <TARGET_2>
 444:	d0 91 3e 01 	lds	r29, 0x013E	; 0x80013e <TARGET_2+0x1>
 448:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <H2>
 44c:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <H2+0x1>
 450:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <H2_prev>
 454:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <H2_prev+0x1>
 458:	82 0f       	add	r24, r18
 45a:	93 1f       	adc	r25, r19
 45c:	99 23       	and	r25, r25
 45e:	0c f4       	brge	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 460:	01 96       	adiw	r24, 0x01	; 1
 462:	95 95       	asr	r25
 464:	87 95       	ror	r24
 466:	be 01       	movw	r22, r28
 468:	68 1b       	sub	r22, r24
 46a:	79 0b       	sbc	r23, r25
 46c:	80 90 08 01 	lds	r8, 0x0108	; 0x800108 <Ki>
 470:	90 90 09 01 	lds	r9, 0x0109	; 0x800109 <Ki+0x1>
 474:	a0 90 0a 01 	lds	r10, 0x010A	; 0x80010a <Ki+0x2>
 478:	b0 90 0b 01 	lds	r11, 0x010B	; 0x80010b <Ki+0x3>
 47c:	07 2e       	mov	r0, r23
 47e:	00 0c       	add	r0, r0
 480:	88 0b       	sbc	r24, r24
 482:	99 0b       	sbc	r25, r25
 484:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__floatsisf>
 488:	a5 01       	movw	r20, r10
 48a:	94 01       	movw	r18, r8
 48c:	0e 94 15 07 	call	0xe2a	; 0xe2a <__mulsf3>
 490:	9b 01       	movw	r18, r22
 492:	ac 01       	movw	r20, r24
 494:	c7 01       	movw	r24, r14
 496:	b6 01       	movw	r22, r12
 498:	0e 94 be 05 	call	0xb7c	; 0xb7c <__addsf3>
 49c:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <prev_int>
 4a0:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <prev_int+0x1>
 4a4:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <prev_int+0x2>
 4a8:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <prev_int+0x3>
 4ac:	0e 94 be 05 	call	0xb7c	; 0xb7c <__addsf3>
 4b0:	2b 01       	movw	r4, r22
 4b2:	3c 01       	movw	r6, r24
 4b4:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <H2>
 4b8:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <H2+0x1>
 4bc:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <H2_prev>
 4c0:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <H2_prev+0x1>
 4c4:	68 1b       	sub	r22, r24
 4c6:	79 0b       	sbc	r23, r25
 4c8:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <Kd>
 4cc:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <Kd+0x1>
 4d0:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <Kd+0x2>
 4d4:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <Kd+0x3>
 4d8:	07 2e       	mov	r0, r23
 4da:	00 0c       	add	r0, r0
 4dc:	88 0b       	sbc	r24, r24
 4de:	99 0b       	sbc	r25, r25
 4e0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__floatsisf>
 4e4:	a7 01       	movw	r20, r14
 4e6:	96 01       	movw	r18, r12
 4e8:	0e 94 15 07 	call	0xe2a	; 0xe2a <__mulsf3>
 4ec:	9b 01       	movw	r18, r22
 4ee:	ac 01       	movw	r20, r24
 4f0:	c3 01       	movw	r24, r6
 4f2:	b2 01       	movw	r22, r4
 4f4:	0e 94 be 05 	call	0xb7c	; 0xb7c <__addsf3>
 4f8:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <prev_deriv>
 4fc:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <prev_deriv+0x1>
 500:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <prev_deriv+0x2>
 504:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <prev_deriv+0x3>
 508:	0e 94 be 05 	call	0xb7c	; 0xb7c <__addsf3>
 50c:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <speed>
 510:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <speed+0x1>
 514:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <speed+0x2>
 518:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <speed+0x3>
	
		prev_int=Ki*(TARGET_2-(H2+H2_prev)/2);
 51c:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <H2>
 520:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <H2+0x1>
 524:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <H2_prev>
 528:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <H2_prev+0x1>
 52c:	82 0f       	add	r24, r18
 52e:	93 1f       	adc	r25, r19
 530:	99 23       	and	r25, r25
 532:	0c f4       	brge	.+2      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 534:	01 96       	adiw	r24, 0x01	; 1
 536:	95 95       	asr	r25
 538:	87 95       	ror	r24
 53a:	c8 1b       	sub	r28, r24
 53c:	d9 0b       	sbc	r29, r25
 53e:	be 01       	movw	r22, r28
 540:	dd 0f       	add	r29, r29
 542:	88 0b       	sbc	r24, r24
 544:	99 0b       	sbc	r25, r25
 546:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__floatsisf>
 54a:	a5 01       	movw	r20, r10
 54c:	94 01       	movw	r18, r8
 54e:	0e 94 15 07 	call	0xe2a	; 0xe2a <__mulsf3>
 552:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <prev_int>
 556:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <prev_int+0x1>
 55a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <prev_int+0x2>
 55e:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <prev_int+0x3>
		prev_deriv=Tao*Kd*(H2-H2_prev);
 562:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 566:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 56a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 56e:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 572:	c7 01       	movw	r24, r14
 574:	b6 01       	movw	r22, r12
 576:	0e 94 15 07 	call	0xe2a	; 0xe2a <__mulsf3>
 57a:	6b 01       	movw	r12, r22
 57c:	7c 01       	movw	r14, r24
 57e:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <H2>
 582:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <H2+0x1>
 586:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <H2_prev>
 58a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <H2_prev+0x1>
 58e:	68 1b       	sub	r22, r24
 590:	79 0b       	sbc	r23, r25
 592:	07 2e       	mov	r0, r23
 594:	00 0c       	add	r0, r0
 596:	88 0b       	sbc	r24, r24
 598:	99 0b       	sbc	r25, r25
 59a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__floatsisf>
 59e:	a7 01       	movw	r20, r14
 5a0:	96 01       	movw	r18, r12
 5a2:	0e 94 15 07 	call	0xe2a	; 0xe2a <__mulsf3>
 5a6:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <prev_deriv>
 5aa:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <prev_deriv+0x1>
 5ae:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <prev_deriv+0x2>
 5b2:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <prev_deriv+0x3>
		
		
		//motor_direction = BACKWARDS;
		if(speed<0){
 5b6:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <speed>
 5ba:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <speed+0x1>
 5be:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <speed+0x2>
 5c2:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <speed+0x3>
 5c6:	20 e0       	ldi	r18, 0x00	; 0
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	a9 01       	movw	r20, r18
 5cc:	0e 94 2a 06 	call	0xc54	; 0xc54 <__cmpsf2>
 5d0:	88 23       	and	r24, r24
 5d2:	ac f4       	brge	.+42     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
			motor_direction = FORWARD;
 5d4:	80 e8       	ldi	r24, 0x80	; 128
 5d6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <motor_direction>
			speed=-speed;	
 5da:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <speed>
 5de:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <speed+0x1>
 5e2:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <speed+0x2>
 5e6:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <speed+0x3>
 5ea:	b0 58       	subi	r27, 0x80	; 128
 5ec:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <speed>
 5f0:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <speed+0x1>
 5f4:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <speed+0x2>
 5f8:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <speed+0x3>
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
		}
		else{motor_direction = BACKWARDS;}
 5fe:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <motor_direction>
	}
	
	send_motorspeed();
 602:	0e 94 99 00 	call	0x132	; 0x132 <send_motorspeed>

	
}
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	ff 90       	pop	r15
 60c:	ef 90       	pop	r14
 60e:	df 90       	pop	r13
 610:	cf 90       	pop	r12
 612:	bf 90       	pop	r11
 614:	af 90       	pop	r10
 616:	9f 90       	pop	r9
 618:	8f 90       	pop	r8
 61a:	7f 90       	pop	r7
 61c:	6f 90       	pop	r6
 61e:	5f 90       	pop	r5
 620:	4f 90       	pop	r4
 622:	08 95       	ret

00000624 <__vector_24>:
		PORTD ^= (1<<PORTD7);
		//usart_transmit(50);
	}
}

ISR(ADC_vect){
 624:	1f 92       	push	r1
 626:	0f 92       	push	r0
 628:	0f b6       	in	r0, 0x3f	; 63
 62a:	0f 92       	push	r0
 62c:	11 24       	eor	r1, r1
 62e:	2f 93       	push	r18
 630:	3f 93       	push	r19
 632:	4f 93       	push	r20
 634:	5f 93       	push	r21
 636:	6f 93       	push	r22
 638:	7f 93       	push	r23
 63a:	8f 93       	push	r24
 63c:	9f 93       	push	r25
 63e:	af 93       	push	r26
 640:	bf 93       	push	r27
 642:	ef 93       	push	r30
 644:	ff 93       	push	r31
	
	adc_val = ADC;
 646:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 64a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 64e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <adc_val+0x1>
 652:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <adc_val>
	adc_switch_counter++;
 656:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <adc_switch_counter>
 65a:	8f 5f       	subi	r24, 0xFF	; 255
 65c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <adc_switch_counter>
	//	PORTD ^= (1<<7);							//	For testing deltaTime
	if(adc_switch_counter<ADC_SWITCH){				//	Read twice after change
 660:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <adc_switch_counter>
 664:	82 30       	cpi	r24, 0x02	; 2
 666:	08 f4       	brcc	.+2      	; 0x66a <__vector_24+0x46>
 668:	ae c0       	rjmp	.+348    	; 0x7c6 <__vector_24+0x1a2>
		return;
		}
	
	
	if(transmit_counter<=RASPBERRY_PI_DELAY){ // 250 tidigare
 66a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 66e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 672:	03 97       	sbiw	r24, 0x03	; 3
 674:	50 f4       	brcc	.+20     	; 0x68a <__vector_24+0x66>
		transmit_counter++;
 676:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 67a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 67e:	01 96       	adiw	r24, 0x01	; 1
 680:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 684:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		return;}
 688:	9e c0       	rjmp	.+316    	; 0x7c6 <__vector_24+0x1a2>
	
	
	
	moving_avarage_counter++;											
 68a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <moving_avarage_counter>
 68e:	8f 5f       	subi	r24, 0xFF	; 255
 690:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <moving_avarage_counter>
	if(sensor==H1_SENS){
 694:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <sensor>
 698:	81 11       	cpse	r24, r1
 69a:	4c c0       	rjmp	.+152    	; 0x734 <__vector_24+0x110>
		buffer+=adc_val;						//	Max value 65535 for uint16_t, FIX quit if buffer+adc_val>65535?
 69c:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <adc_val>
 6a0:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <adc_val+0x1>
 6a4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <buffer>
 6a8:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <buffer+0x1>
 6ac:	82 0f       	add	r24, r18
 6ae:	93 1f       	adc	r25, r19
 6b0:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <buffer+0x1>
 6b4:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <buffer>
		if(moving_avarage_counter<MOVING_AVARAGE){
 6b8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <moving_avarage_counter>
 6bc:	8c 33       	cpi	r24, 0x3C	; 60
 6be:	08 f4       	brcc	.+2      	; 0x6c2 <__vector_24+0x9e>
 6c0:	82 c0       	rjmp	.+260    	; 0x7c6 <__vector_24+0x1a2>
			return;
		}else{
			H1_prev = H1;
 6c2:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <H1>
 6c6:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <H1+0x1>
 6ca:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <H1_prev+0x1>
 6ce:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <H1_prev>
			H1 = buffer/MOVING_AVARAGE;
 6d2:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <buffer>
 6d6:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <buffer+0x1>
 6da:	a9 e8       	ldi	r26, 0x89	; 137
 6dc:	b8 e8       	ldi	r27, 0x88	; 136
 6de:	0e 94 96 07 	call	0xf2c	; 0xf2c <__umulhisi3>
 6e2:	96 95       	lsr	r25
 6e4:	87 95       	ror	r24
 6e6:	92 95       	swap	r25
 6e8:	82 95       	swap	r24
 6ea:	8f 70       	andi	r24, 0x0F	; 15
 6ec:	89 27       	eor	r24, r25
 6ee:	9f 70       	andi	r25, 0x0F	; 15
 6f0:	89 27       	eor	r24, r25
 6f2:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <H1+0x1>
 6f6:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <H1>
			e1=H1-TARGET_1;						//	e_1(t)
 6fa:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <H1>
 6fe:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <H1+0x1>
 702:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <TARGET_1>
 706:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <TARGET_1+0x1>
 70a:	82 1b       	sub	r24, r18
 70c:	93 0b       	sbc	r25, r19
 70e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <e1+0x1>
 712:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <e1>
			//	Switch reading to other sensor, H2
			set_channel(ADC1);						//	Set ADC channel to PA1
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	0e 94 77 00 	call	0xee	; 0xee <set_channel>
			sensor=H2_SENS;	
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <sensor>
			moving_avarage_counter=0;
 722:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <moving_avarage_counter>
			buffer=0;
 726:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <buffer+0x1>
 72a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <buffer>
			

			
			getDegree();
 72e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <getDegree>
 732:	49 c0       	rjmp	.+146    	; 0x7c6 <__vector_24+0x1a2>
			}
		}
		else{
			buffer+=adc_val;
 734:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <adc_val>
 738:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <adc_val+0x1>
 73c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <buffer>
 740:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <buffer+0x1>
 744:	82 0f       	add	r24, r18
 746:	93 1f       	adc	r25, r19
 748:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <buffer+0x1>
 74c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <buffer>
			if(moving_avarage_counter<MOVING_AVARAGE){
 750:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <moving_avarage_counter>
 754:	8c 33       	cpi	r24, 0x3C	; 60
 756:	b8 f1       	brcs	.+110    	; 0x7c6 <__vector_24+0x1a2>
				return;
			}else{
				H2_prev = H2;
 758:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <H2>
 75c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <H2+0x1>
 760:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <H2_prev+0x1>
 764:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <H2_prev>
				H2 = buffer/MOVING_AVARAGE;
 768:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <buffer>
 76c:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <buffer+0x1>
 770:	a9 e8       	ldi	r26, 0x89	; 137
 772:	b8 e8       	ldi	r27, 0x88	; 136
 774:	0e 94 96 07 	call	0xf2c	; 0xf2c <__umulhisi3>
 778:	96 95       	lsr	r25
 77a:	87 95       	ror	r24
 77c:	92 95       	swap	r25
 77e:	82 95       	swap	r24
 780:	8f 70       	andi	r24, 0x0F	; 15
 782:	89 27       	eor	r24, r25
 784:	9f 70       	andi	r25, 0x0F	; 15
 786:	89 27       	eor	r24, r25
 788:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <H2+0x1>
 78c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <H2>
				//e2=abs(TARGET_2-H2);						// e_2(t)
				e2= H2-TARGET_2;
 790:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <H2>
 794:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <H2+0x1>
 798:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <TARGET_2>
 79c:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <TARGET_2+0x1>
 7a0:	82 1b       	sub	r24, r18
 7a2:	93 0b       	sbc	r25, r19
 7a4:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <e2+0x1>
 7a8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <e2>
				//	Switch reading to other sensor, H1
				set_channel(ADC0);						//	Set ADC channel to PA0
 7ac:	80 e0       	ldi	r24, 0x00	; 0
 7ae:	0e 94 77 00 	call	0xee	; 0xee <set_channel>
				sensor=H1_SENS;
 7b2:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <sensor>
				moving_avarage_counter=0;
 7b6:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <moving_avarage_counter>
				buffer=0;
 7ba:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <buffer+0x1>
 7be:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <buffer>
				

				getDegree();
 7c2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <getDegree>
		}*/


		
	//}	
}
 7c6:	ff 91       	pop	r31
 7c8:	ef 91       	pop	r30
 7ca:	bf 91       	pop	r27
 7cc:	af 91       	pop	r26
 7ce:	9f 91       	pop	r25
 7d0:	8f 91       	pop	r24
 7d2:	7f 91       	pop	r23
 7d4:	6f 91       	pop	r22
 7d6:	5f 91       	pop	r21
 7d8:	4f 91       	pop	r20
 7da:	3f 91       	pop	r19
 7dc:	2f 91       	pop	r18
 7de:	0f 90       	pop	r0
 7e0:	0f be       	out	0x3f, r0	; 63
 7e2:	0f 90       	pop	r0
 7e4:	1f 90       	pop	r1
 7e6:	18 95       	reti

000007e8 <startSeq>:
		adc_switch_counter = 0;							//	Already done at least two readings, keep going.
		transmit_counter=0;		// Fix: flytta dessa två till en egen "reset_counters" ska ske efter transmits
}

void startSeq(){
	while(!(PINA&(1<<PINA7)));
 7e8:	07 9b       	sbis	0x00, 7	; 0
 7ea:	fe cf       	rjmp	.-4      	; 0x7e8 <startSeq>
	//Ta en miljard värden
	int buffer = 0;
	uint8_t nbr_avg = 10;
	uint8_t delay_time = 5;
	
	H1_MIN = ADC;
 7ec:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 7f0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 7f4:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <H1_MIN+0x1>
 7f8:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <H1_MIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7fc:	2f ef       	ldi	r18, 0xFF	; 255
 7fe:	89 ef       	ldi	r24, 0xF9	; 249
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	21 50       	subi	r18, 0x01	; 1
 804:	80 40       	sbci	r24, 0x00	; 0
 806:	90 40       	sbci	r25, 0x00	; 0
 808:	e1 f7       	brne	.-8      	; 0x802 <__EEPROM_REGION_LENGTH__+0x2>
 80a:	00 c0       	rjmp	.+0      	; 0x80c <__EEPROM_REGION_LENGTH__+0xc>
 80c:	00 00       	nop
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 80e:	20 e0       	ldi	r18, 0x00	; 0
 810:	30 e0       	ldi	r19, 0x00	; 0
}

void startSeq(){
	while(!(PINA&(1<<PINA7)));
	//Ta en miljard värden
	int buffer = 0;
 812:	80 e0       	ldi	r24, 0x00	; 0
 814:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t nbr_avg = 10;
	uint8_t delay_time = 5;
	
	H1_MIN = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 816:	0e c0       	rjmp	.+28     	; 0x834 <__EEPROM_REGION_LENGTH__+0x34>
		buffer+=ADC;
 818:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 81c:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 820:	84 0f       	add	r24, r20
 822:	95 1f       	adc	r25, r21
 824:	ef e1       	ldi	r30, 0x1F	; 31
 826:	fe e4       	ldi	r31, 0x4E	; 78
 828:	31 97       	sbiw	r30, 0x01	; 1
 82a:	f1 f7       	brne	.-4      	; 0x828 <__EEPROM_REGION_LENGTH__+0x28>
 82c:	00 c0       	rjmp	.+0      	; 0x82e <__EEPROM_REGION_LENGTH__+0x2e>
 82e:	00 00       	nop
	uint8_t nbr_avg = 10;
	uint8_t delay_time = 5;
	
	H1_MIN = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 830:	2f 5f       	subi	r18, 0xFF	; 255
 832:	3f 4f       	sbci	r19, 0xFF	; 255
 834:	2a 30       	cpi	r18, 0x0A	; 10
 836:	31 05       	cpc	r19, r1
 838:	7c f3       	brlt	.-34     	; 0x818 <__EEPROM_REGION_LENGTH__+0x18>
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H1_MIN = buffer/nbr_avg;
 83a:	6a e0       	ldi	r22, 0x0A	; 10
 83c:	70 e0       	ldi	r23, 0x00	; 0
 83e:	0e 94 82 07 	call	0xf04	; 0xf04 <__divmodhi4>
 842:	70 93 3a 01 	sts	0x013A, r23	; 0x80013a <H1_MIN+0x1>
 846:	60 93 39 01 	sts	0x0139, r22	; 0x800139 <H1_MIN>
	buffer=0;
	set_channel(ADC1);
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	0e 94 77 00 	call	0xee	; 0xee <set_channel>
 850:	ff ef       	ldi	r31, 0xFF	; 255
 852:	29 ef       	ldi	r18, 0xF9	; 249
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	f1 50       	subi	r31, 0x01	; 1
 858:	20 40       	sbci	r18, 0x00	; 0
 85a:	80 40       	sbci	r24, 0x00	; 0
 85c:	e1 f7       	brne	.-8      	; 0x856 <__EEPROM_REGION_LENGTH__+0x56>
 85e:	00 c0       	rjmp	.+0      	; 0x860 <__EEPROM_REGION_LENGTH__+0x60>
 860:	00 00       	nop
	_delay_ms(20);
	
	H2_MAX = ADC;
 862:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 866:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 86a:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <H2_MAX+0x1>
 86e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <H2_MAX>
 872:	9f ef       	ldi	r25, 0xFF	; 255
 874:	e9 ef       	ldi	r30, 0xF9	; 249
 876:	f0 e0       	ldi	r31, 0x00	; 0
 878:	91 50       	subi	r25, 0x01	; 1
 87a:	e0 40       	sbci	r30, 0x00	; 0
 87c:	f0 40       	sbci	r31, 0x00	; 0
 87e:	e1 f7       	brne	.-8      	; 0x878 <__EEPROM_REGION_LENGTH__+0x78>
 880:	00 c0       	rjmp	.+0      	; 0x882 <__EEPROM_REGION_LENGTH__+0x82>
 882:	00 00       	nop
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 884:	20 e0       	ldi	r18, 0x00	; 0
 886:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i<nbr_avg; i++){
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H1_MIN = buffer/nbr_avg;
	buffer=0;
 888:	80 e0       	ldi	r24, 0x00	; 0
 88a:	90 e0       	ldi	r25, 0x00	; 0
	set_channel(ADC1);
	_delay_ms(20);
	
	H2_MAX = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 88c:	0e c0       	rjmp	.+28     	; 0x8aa <__EEPROM_REGION_LENGTH__+0xaa>
		buffer+=ADC;
 88e:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 892:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 896:	84 0f       	add	r24, r20
 898:	95 1f       	adc	r25, r21
 89a:	ef e1       	ldi	r30, 0x1F	; 31
 89c:	fe e4       	ldi	r31, 0x4E	; 78
 89e:	31 97       	sbiw	r30, 0x01	; 1
 8a0:	f1 f7       	brne	.-4      	; 0x89e <__EEPROM_REGION_LENGTH__+0x9e>
 8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <__EEPROM_REGION_LENGTH__+0xa4>
 8a4:	00 00       	nop
	set_channel(ADC1);
	_delay_ms(20);
	
	H2_MAX = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 8a6:	2f 5f       	subi	r18, 0xFF	; 255
 8a8:	3f 4f       	sbci	r19, 0xFF	; 255
 8aa:	2a 30       	cpi	r18, 0x0A	; 10
 8ac:	31 05       	cpc	r19, r1
 8ae:	7c f3       	brlt	.-34     	; 0x88e <__EEPROM_REGION_LENGTH__+0x8e>
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H2_MAX = buffer/nbr_avg;
 8b0:	6a e0       	ldi	r22, 0x0A	; 10
 8b2:	70 e0       	ldi	r23, 0x00	; 0
 8b4:	0e 94 82 07 	call	0xf04	; 0xf04 <__divmodhi4>
 8b8:	70 93 40 01 	sts	0x0140, r23	; 0x800140 <H2_MAX+0x1>
 8bc:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <H2_MAX>
 8c0:	ff ef       	ldi	r31, 0xFF	; 255
 8c2:	29 ef       	ldi	r18, 0xF9	; 249
 8c4:	80 e0       	ldi	r24, 0x00	; 0
 8c6:	f1 50       	subi	r31, 0x01	; 1
 8c8:	20 40       	sbci	r18, 0x00	; 0
 8ca:	80 40       	sbci	r24, 0x00	; 0
 8cc:	e1 f7       	brne	.-8      	; 0x8c6 <__EEPROM_REGION_LENGTH__+0xc6>
 8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <__EEPROM_REGION_LENGTH__+0xd0>
 8d0:	00 00       	nop
 8d2:	9f ef       	ldi	r25, 0xFF	; 255
 8d4:	e9 e6       	ldi	r30, 0x69	; 105
 8d6:	f8 e1       	ldi	r31, 0x18	; 24
 8d8:	91 50       	subi	r25, 0x01	; 1
 8da:	e0 40       	sbci	r30, 0x00	; 0
 8dc:	f0 40       	sbci	r31, 0x00	; 0
 8de:	e1 f7       	brne	.-8      	; 0x8d8 <__EEPROM_REGION_LENGTH__+0xd8>
 8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <__EEPROM_REGION_LENGTH__+0xe2>
 8e2:	00 00       	nop
	_delay_ms(20);
	
	
	
	_delay_ms(500);
	while(!(PINA&(1<<PINA7)));
 8e4:	07 9b       	sbis	0x00, 7	; 0
 8e6:	fe cf       	rjmp	.-4      	; 0x8e4 <__EEPROM_REGION_LENGTH__+0xe4>
	
	
	H2_MIN = ADC;
 8e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 8ec:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 8f0:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <H2_MIN+0x1>
 8f4:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <H2_MIN>
 8f8:	2f ef       	ldi	r18, 0xFF	; 255
 8fa:	89 ef       	ldi	r24, 0xF9	; 249
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	21 50       	subi	r18, 0x01	; 1
 900:	80 40       	sbci	r24, 0x00	; 0
 902:	90 40       	sbci	r25, 0x00	; 0
 904:	e1 f7       	brne	.-8      	; 0x8fe <__EEPROM_REGION_LENGTH__+0xfe>
 906:	00 c0       	rjmp	.+0      	; 0x908 <__EEPROM_REGION_LENGTH__+0x108>
 908:	00 00       	nop
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 90a:	20 e0       	ldi	r18, 0x00	; 0
 90c:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i<nbr_avg; i++){
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H2_MAX = buffer/nbr_avg;
	buffer=0;
 90e:	80 e0       	ldi	r24, 0x00	; 0
 910:	90 e0       	ldi	r25, 0x00	; 0
	while(!(PINA&(1<<PINA7)));
	
	
	H2_MIN = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 912:	0e c0       	rjmp	.+28     	; 0x930 <__EEPROM_REGION_LENGTH__+0x130>
		buffer+=ADC;
 914:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 918:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 91c:	84 0f       	add	r24, r20
 91e:	95 1f       	adc	r25, r21
 920:	ef e1       	ldi	r30, 0x1F	; 31
 922:	fe e4       	ldi	r31, 0x4E	; 78
 924:	31 97       	sbiw	r30, 0x01	; 1
 926:	f1 f7       	brne	.-4      	; 0x924 <__EEPROM_REGION_LENGTH__+0x124>
 928:	00 c0       	rjmp	.+0      	; 0x92a <__EEPROM_REGION_LENGTH__+0x12a>
 92a:	00 00       	nop
	while(!(PINA&(1<<PINA7)));
	
	
	H2_MIN = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 92c:	2f 5f       	subi	r18, 0xFF	; 255
 92e:	3f 4f       	sbci	r19, 0xFF	; 255
 930:	2a 30       	cpi	r18, 0x0A	; 10
 932:	31 05       	cpc	r19, r1
 934:	7c f3       	brlt	.-34     	; 0x914 <__EEPROM_REGION_LENGTH__+0x114>
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H2_MIN = buffer/nbr_avg;
 936:	6a e0       	ldi	r22, 0x0A	; 10
 938:	70 e0       	ldi	r23, 0x00	; 0
 93a:	0e 94 82 07 	call	0xf04	; 0xf04 <__divmodhi4>
 93e:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <H2_MIN+0x1>
 942:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <H2_MIN>
	buffer=0;
	set_channel(ADC0);
 946:	80 e0       	ldi	r24, 0x00	; 0
 948:	0e 94 77 00 	call	0xee	; 0xee <set_channel>
 94c:	ff ef       	ldi	r31, 0xFF	; 255
 94e:	29 ef       	ldi	r18, 0xF9	; 249
 950:	80 e0       	ldi	r24, 0x00	; 0
 952:	f1 50       	subi	r31, 0x01	; 1
 954:	20 40       	sbci	r18, 0x00	; 0
 956:	80 40       	sbci	r24, 0x00	; 0
 958:	e1 f7       	brne	.-8      	; 0x952 <__EEPROM_REGION_LENGTH__+0x152>
 95a:	00 c0       	rjmp	.+0      	; 0x95c <__EEPROM_REGION_LENGTH__+0x15c>
 95c:	00 00       	nop
	_delay_ms(20);
	
	
	H1_MAX = ADC;
 95e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 962:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 966:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <H1_MAX+0x1>
 96a:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <H1_MAX>
 96e:	9f ef       	ldi	r25, 0xFF	; 255
 970:	e9 ef       	ldi	r30, 0xF9	; 249
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	91 50       	subi	r25, 0x01	; 1
 976:	e0 40       	sbci	r30, 0x00	; 0
 978:	f0 40       	sbci	r31, 0x00	; 0
 97a:	e1 f7       	brne	.-8      	; 0x974 <__EEPROM_REGION_LENGTH__+0x174>
 97c:	00 c0       	rjmp	.+0      	; 0x97e <__EEPROM_REGION_LENGTH__+0x17e>
 97e:	00 00       	nop
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 980:	20 e0       	ldi	r18, 0x00	; 0
 982:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i<nbr_avg; i++){
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H2_MIN = buffer/nbr_avg;
	buffer=0;
 984:	80 e0       	ldi	r24, 0x00	; 0
 986:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(20);
	
	
	H1_MAX = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 988:	0e c0       	rjmp	.+28     	; 0x9a6 <__EEPROM_REGION_LENGTH__+0x1a6>
		buffer+=ADC;
 98a:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 98e:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 992:	84 0f       	add	r24, r20
 994:	95 1f       	adc	r25, r21
 996:	ef e1       	ldi	r30, 0x1F	; 31
 998:	fe e4       	ldi	r31, 0x4E	; 78
 99a:	31 97       	sbiw	r30, 0x01	; 1
 99c:	f1 f7       	brne	.-4      	; 0x99a <__EEPROM_REGION_LENGTH__+0x19a>
 99e:	00 c0       	rjmp	.+0      	; 0x9a0 <__EEPROM_REGION_LENGTH__+0x1a0>
 9a0:	00 00       	nop
	_delay_ms(20);
	
	
	H1_MAX = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 9a2:	2f 5f       	subi	r18, 0xFF	; 255
 9a4:	3f 4f       	sbci	r19, 0xFF	; 255
 9a6:	2a 30       	cpi	r18, 0x0A	; 10
 9a8:	31 05       	cpc	r19, r1
 9aa:	7c f3       	brlt	.-34     	; 0x98a <__EEPROM_REGION_LENGTH__+0x18a>
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H1_MAX = buffer/nbr_avg;
 9ac:	6a e0       	ldi	r22, 0x0A	; 10
 9ae:	70 e0       	ldi	r23, 0x00	; 0
 9b0:	0e 94 82 07 	call	0xf04	; 0xf04 <__divmodhi4>
 9b4:	70 93 42 01 	sts	0x0142, r23	; 0x800142 <H1_MAX+0x1>
 9b8:	60 93 41 01 	sts	0x0141, r22	; 0x800141 <H1_MAX>
 9bc:	ff ef       	ldi	r31, 0xFF	; 255
 9be:	29 ef       	ldi	r18, 0xF9	; 249
 9c0:	80 e0       	ldi	r24, 0x00	; 0
 9c2:	f1 50       	subi	r31, 0x01	; 1
 9c4:	20 40       	sbci	r18, 0x00	; 0
 9c6:	80 40       	sbci	r24, 0x00	; 0
 9c8:	e1 f7       	brne	.-8      	; 0x9c2 <__EEPROM_REGION_LENGTH__+0x1c2>
 9ca:	00 c0       	rjmp	.+0      	; 0x9cc <__EEPROM_REGION_LENGTH__+0x1cc>
 9cc:	00 00       	nop
 9ce:	9f ef       	ldi	r25, 0xFF	; 255
 9d0:	e9 e6       	ldi	r30, 0x69	; 105
 9d2:	f8 e1       	ldi	r31, 0x18	; 24
 9d4:	91 50       	subi	r25, 0x01	; 1
 9d6:	e0 40       	sbci	r30, 0x00	; 0
 9d8:	f0 40       	sbci	r31, 0x00	; 0
 9da:	e1 f7       	brne	.-8      	; 0x9d4 <__EEPROM_REGION_LENGTH__+0x1d4>
 9dc:	00 c0       	rjmp	.+0      	; 0x9de <__EEPROM_REGION_LENGTH__+0x1de>
 9de:	00 00       	nop
	buffer=0;
	_delay_ms(20);
		
	
	_delay_ms(500);
	while(!(PINA&(1<<PINA7)));
 9e0:	07 9b       	sbis	0x00, 7	; 0
 9e2:	fe cf       	rjmp	.-4      	; 0x9e0 <__EEPROM_REGION_LENGTH__+0x1e0>
	
	
	TARGET_1 = ADC;
 9e4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 9e8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 9ec:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <TARGET_1+0x1>
 9f0:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <TARGET_1>
 9f4:	2f ef       	ldi	r18, 0xFF	; 255
 9f6:	89 ef       	ldi	r24, 0xF9	; 249
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	21 50       	subi	r18, 0x01	; 1
 9fc:	80 40       	sbci	r24, 0x00	; 0
 9fe:	90 40       	sbci	r25, 0x00	; 0
 a00:	e1 f7       	brne	.-8      	; 0x9fa <__EEPROM_REGION_LENGTH__+0x1fa>
 a02:	00 c0       	rjmp	.+0      	; 0xa04 <__EEPROM_REGION_LENGTH__+0x204>
 a04:	00 00       	nop
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 a06:	20 e0       	ldi	r18, 0x00	; 0
 a08:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i<nbr_avg; i++){
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H1_MAX = buffer/nbr_avg;
	buffer=0;
 a0a:	80 e0       	ldi	r24, 0x00	; 0
 a0c:	90 e0       	ldi	r25, 0x00	; 0
	while(!(PINA&(1<<PINA7)));
	
	
	TARGET_1 = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 a0e:	0e c0       	rjmp	.+28     	; 0xa2c <__EEPROM_REGION_LENGTH__+0x22c>
		buffer+=ADC;
 a10:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 a14:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 a18:	84 0f       	add	r24, r20
 a1a:	95 1f       	adc	r25, r21
 a1c:	ef e1       	ldi	r30, 0x1F	; 31
 a1e:	fe e4       	ldi	r31, 0x4E	; 78
 a20:	31 97       	sbiw	r30, 0x01	; 1
 a22:	f1 f7       	brne	.-4      	; 0xa20 <__EEPROM_REGION_LENGTH__+0x220>
 a24:	00 c0       	rjmp	.+0      	; 0xa26 <__EEPROM_REGION_LENGTH__+0x226>
 a26:	00 00       	nop
	while(!(PINA&(1<<PINA7)));
	
	
	TARGET_1 = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 a28:	2f 5f       	subi	r18, 0xFF	; 255
 a2a:	3f 4f       	sbci	r19, 0xFF	; 255
 a2c:	2a 30       	cpi	r18, 0x0A	; 10
 a2e:	31 05       	cpc	r19, r1
 a30:	7c f3       	brlt	.-34     	; 0xa10 <__EEPROM_REGION_LENGTH__+0x210>
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	TARGET_1 = buffer/nbr_avg;
 a32:	6a e0       	ldi	r22, 0x0A	; 10
 a34:	70 e0       	ldi	r23, 0x00	; 0
 a36:	0e 94 82 07 	call	0xf04	; 0xf04 <__divmodhi4>
 a3a:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <TARGET_1+0x1>
 a3e:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <TARGET_1>
	buffer=0;
	set_channel(ADC1);
 a42:	81 e0       	ldi	r24, 0x01	; 1
 a44:	0e 94 77 00 	call	0xee	; 0xee <set_channel>
 a48:	ff ef       	ldi	r31, 0xFF	; 255
 a4a:	29 ef       	ldi	r18, 0xF9	; 249
 a4c:	80 e0       	ldi	r24, 0x00	; 0
 a4e:	f1 50       	subi	r31, 0x01	; 1
 a50:	20 40       	sbci	r18, 0x00	; 0
 a52:	80 40       	sbci	r24, 0x00	; 0
 a54:	e1 f7       	brne	.-8      	; 0xa4e <__EEPROM_REGION_LENGTH__+0x24e>
 a56:	00 c0       	rjmp	.+0      	; 0xa58 <__EEPROM_REGION_LENGTH__+0x258>
 a58:	00 00       	nop
	_delay_ms(20);
	
	TARGET_2 = ADC;
 a5a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 a5e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 a62:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <TARGET_2+0x1>
 a66:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <TARGET_2>
 a6a:	9f ef       	ldi	r25, 0xFF	; 255
 a6c:	e9 ef       	ldi	r30, 0xF9	; 249
 a6e:	f0 e0       	ldi	r31, 0x00	; 0
 a70:	91 50       	subi	r25, 0x01	; 1
 a72:	e0 40       	sbci	r30, 0x00	; 0
 a74:	f0 40       	sbci	r31, 0x00	; 0
 a76:	e1 f7       	brne	.-8      	; 0xa70 <__EEPROM_REGION_LENGTH__+0x270>
 a78:	00 c0       	rjmp	.+0      	; 0xa7a <__EEPROM_REGION_LENGTH__+0x27a>
 a7a:	00 00       	nop
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 a7c:	20 e0       	ldi	r18, 0x00	; 0
 a7e:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i<nbr_avg; i++){
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	TARGET_1 = buffer/nbr_avg;
	buffer=0;
 a80:	80 e0       	ldi	r24, 0x00	; 0
 a82:	90 e0       	ldi	r25, 0x00	; 0
	set_channel(ADC1);
	_delay_ms(20);
	
	TARGET_2 = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 a84:	0e c0       	rjmp	.+28     	; 0xaa2 <__EEPROM_REGION_LENGTH__+0x2a2>
		buffer+=ADC;
 a86:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 a8a:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 a8e:	84 0f       	add	r24, r20
 a90:	95 1f       	adc	r25, r21
 a92:	ef e1       	ldi	r30, 0x1F	; 31
 a94:	fe e4       	ldi	r31, 0x4E	; 78
 a96:	31 97       	sbiw	r30, 0x01	; 1
 a98:	f1 f7       	brne	.-4      	; 0xa96 <__EEPROM_REGION_LENGTH__+0x296>
 a9a:	00 c0       	rjmp	.+0      	; 0xa9c <__EEPROM_REGION_LENGTH__+0x29c>
 a9c:	00 00       	nop
	set_channel(ADC1);
	_delay_ms(20);
	
	TARGET_2 = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 a9e:	2f 5f       	subi	r18, 0xFF	; 255
 aa0:	3f 4f       	sbci	r19, 0xFF	; 255
 aa2:	2a 30       	cpi	r18, 0x0A	; 10
 aa4:	31 05       	cpc	r19, r1
 aa6:	7c f3       	brlt	.-34     	; 0xa86 <__EEPROM_REGION_LENGTH__+0x286>
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	TARGET_2 = buffer/nbr_avg;
 aa8:	6a e0       	ldi	r22, 0x0A	; 10
 aaa:	70 e0       	ldi	r23, 0x00	; 0
 aac:	0e 94 82 07 	call	0xf04	; 0xf04 <__divmodhi4>
 ab0:	70 93 3e 01 	sts	0x013E, r23	; 0x80013e <TARGET_2+0x1>
 ab4:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <TARGET_2>
	buffer=0;
	set_channel(ADC0);
 ab8:	80 e0       	ldi	r24, 0x00	; 0
 aba:	0e 94 77 00 	call	0xee	; 0xee <set_channel>
 abe:	ff ef       	ldi	r31, 0xFF	; 255
 ac0:	29 ef       	ldi	r18, 0xF9	; 249
 ac2:	80 e0       	ldi	r24, 0x00	; 0
 ac4:	f1 50       	subi	r31, 0x01	; 1
 ac6:	20 40       	sbci	r18, 0x00	; 0
 ac8:	80 40       	sbci	r24, 0x00	; 0
 aca:	e1 f7       	brne	.-8      	; 0xac4 <__EEPROM_REGION_LENGTH__+0x2c4>
 acc:	00 c0       	rjmp	.+0      	; 0xace <__EEPROM_REGION_LENGTH__+0x2ce>
 ace:	00 00       	nop
	_delay_ms(20);
		
	
	max_speed_e1 = abs(1*(TARGET_1-H1_MAX));		// FIX! FIND CORRECT VALUE FOR (H1-H1_prev)*DELTA_TIME+Kd*(H1-H1_prev)*DELTA_TIME). Measure what H1-H1_PREV could be at a maximum
 ad0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <TARGET_1>
 ad4:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <TARGET_1+0x1>
 ad8:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <H1_MAX>
 adc:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <H1_MAX+0x1>
 ae0:	82 1b       	sub	r24, r18
 ae2:	93 0b       	sbc	r25, r19
 ae4:	9c 01       	movw	r18, r24
 ae6:	22 f4       	brpl	.+8      	; 0xaf0 <__EEPROM_REGION_LENGTH__+0x2f0>
 ae8:	22 27       	eor	r18, r18
 aea:	33 27       	eor	r19, r19
 aec:	28 1b       	sub	r18, r24
 aee:	39 0b       	sbc	r19, r25
 af0:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <max_speed_e1+0x1>
 af4:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <max_speed_e1>
	max_speed_e2 = abs(1*(TARGET_2-H2_MAX));		// FIX! FIND CORRECT VALUE FOR (H2-H2_prev)*DELTA_TIME+Kd*(H2-H2_prev)*DELTA_TIME). Measure what H1-H1_PREV could be at a maximum
 af8:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <TARGET_2>
 afc:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <TARGET_2+0x1>
 b00:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <H2_MAX>
 b04:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <H2_MAX+0x1>
 b08:	82 1b       	sub	r24, r18
 b0a:	93 0b       	sbc	r25, r19
 b0c:	9c 01       	movw	r18, r24
 b0e:	22 f4       	brpl	.+8      	; 0xb18 <__EEPROM_REGION_LENGTH__+0x318>
 b10:	22 27       	eor	r18, r18
 b12:	33 27       	eor	r19, r19
 b14:	28 1b       	sub	r18, r24
 b16:	39 0b       	sbc	r19, r25
 b18:	30 93 34 01 	sts	0x0134, r19	; 0x800134 <max_speed_e2+0x1>
 b1c:	20 93 33 01 	sts	0x0133, r18	; 0x800133 <max_speed_e2>
	sei();
 b20:	78 94       	sei
 b22:	08 95       	ret

00000b24 <main>:
void reset_counters();

int main(void)
{
	//	ADC
	setup_adc(0);
 b24:	80 e0       	ldi	r24, 0x00	; 0
 b26:	0e 94 5d 00 	call	0xba	; 0xba <setup_adc>
	adc_interrupt_enabled();
 b2a:	0e 94 80 00 	call	0x100	; 0x100 <adc_interrupt_enabled>
	adc_freerun();
 b2e:	0e 94 86 00 	call	0x10c	; 0x10c <adc_freerun>
	adc_start();
 b32:	0e 94 8c 00 	call	0x118	; 0x118 <adc_start>
	adc_prescaler(PRESCALER128);
 b36:	87 e0       	ldi	r24, 0x07	; 7
 b38:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_prescaler>
	//	USART
	usart_init();
 b3c:	0e 94 aa 05 	call	0xb54	; 0xb54 <usart_init>
	cli();
 b40:	f8 94       	cli
	
	DDRD |= (1<<7);	//	Remove later, for testing delta Time
 b42:	8a b1       	in	r24, 0x0a	; 10
 b44:	80 68       	ori	r24, 0x80	; 128
 b46:	8a b9       	out	0x0a, r24	; 10
	
	startSeq();
 b48:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <startSeq>
	
	//	REMOVE LATER
	
    while (1) 
    {
		PORTD ^= (1<<PORTD7);
 b4c:	8b b1       	in	r24, 0x0b	; 11
 b4e:	80 58       	subi	r24, 0x80	; 128
 b50:	8b b9       	out	0x0b, r24	; 11
 b52:	fc cf       	rjmp	.-8      	; 0xb4c <main+0x28>

00000b54 <usart_init>:

#include "usart.h"

void usart_init()
{
	UBRR0 = 8; // 9600=103 baud @ 16 MHz, 51=9600 @ 8 MHz
 b54:	88 e0       	ldi	r24, 0x08	; 8
 b56:	90 e0       	ldi	r25, 0x00	; 0
 b58:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
 b5c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
	//UBRR0L = 51;
	UCSR0B |= (1<<TXEN0) | (1<<RXEN0);// | (1 << RXCIE0);		//	Enable RX, TX
 b60:	e1 ec       	ldi	r30, 0xC1	; 193
 b62:	f0 e0       	ldi	r31, 0x00	; 0
 b64:	80 81       	ld	r24, Z
 b66:	88 61       	ori	r24, 0x18	; 24
 b68:	80 83       	st	Z, r24
 b6a:	08 95       	ret

00000b6c <usart_transmit>:
	usart_transmit(tmp);
}

void usart_transmit(uint8_t tx_data)
{
	while(!(UCSR0A & (1<<UDRE0))); //Buffer upptagen
 b6c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
 b70:	95 ff       	sbrs	r25, 5
 b72:	fc cf       	rjmp	.-8      	; 0xb6c <usart_transmit>
	UDR0 = tx_data;
 b74:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 b78:	08 95       	ret

00000b7a <__subsf3>:
 b7a:	50 58       	subi	r21, 0x80	; 128

00000b7c <__addsf3>:
 b7c:	bb 27       	eor	r27, r27
 b7e:	aa 27       	eor	r26, r26
 b80:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__addsf3x>
 b84:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__fp_round>
 b88:	0e 94 c8 06 	call	0xd90	; 0xd90 <__fp_pscA>
 b8c:	38 f0       	brcs	.+14     	; 0xb9c <__addsf3+0x20>
 b8e:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__fp_pscB>
 b92:	20 f0       	brcs	.+8      	; 0xb9c <__addsf3+0x20>
 b94:	39 f4       	brne	.+14     	; 0xba4 <__addsf3+0x28>
 b96:	9f 3f       	cpi	r25, 0xFF	; 255
 b98:	19 f4       	brne	.+6      	; 0xba0 <__addsf3+0x24>
 b9a:	26 f4       	brtc	.+8      	; 0xba4 <__addsf3+0x28>
 b9c:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <__fp_nan>
 ba0:	0e f4       	brtc	.+2      	; 0xba4 <__addsf3+0x28>
 ba2:	e0 95       	com	r30
 ba4:	e7 fb       	bst	r30, 7
 ba6:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__fp_inf>

00000baa <__addsf3x>:
 baa:	e9 2f       	mov	r30, r25
 bac:	0e 94 e7 06 	call	0xdce	; 0xdce <__fp_split3>
 bb0:	58 f3       	brcs	.-42     	; 0xb88 <__addsf3+0xc>
 bb2:	ba 17       	cp	r27, r26
 bb4:	62 07       	cpc	r22, r18
 bb6:	73 07       	cpc	r23, r19
 bb8:	84 07       	cpc	r24, r20
 bba:	95 07       	cpc	r25, r21
 bbc:	20 f0       	brcs	.+8      	; 0xbc6 <__addsf3x+0x1c>
 bbe:	79 f4       	brne	.+30     	; 0xbde <__addsf3x+0x34>
 bc0:	a6 f5       	brtc	.+104    	; 0xc2a <__addsf3x+0x80>
 bc2:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__fp_zero>
 bc6:	0e f4       	brtc	.+2      	; 0xbca <__addsf3x+0x20>
 bc8:	e0 95       	com	r30
 bca:	0b 2e       	mov	r0, r27
 bcc:	ba 2f       	mov	r27, r26
 bce:	a0 2d       	mov	r26, r0
 bd0:	0b 01       	movw	r0, r22
 bd2:	b9 01       	movw	r22, r18
 bd4:	90 01       	movw	r18, r0
 bd6:	0c 01       	movw	r0, r24
 bd8:	ca 01       	movw	r24, r20
 bda:	a0 01       	movw	r20, r0
 bdc:	11 24       	eor	r1, r1
 bde:	ff 27       	eor	r31, r31
 be0:	59 1b       	sub	r21, r25
 be2:	99 f0       	breq	.+38     	; 0xc0a <__addsf3x+0x60>
 be4:	59 3f       	cpi	r21, 0xF9	; 249
 be6:	50 f4       	brcc	.+20     	; 0xbfc <__addsf3x+0x52>
 be8:	50 3e       	cpi	r21, 0xE0	; 224
 bea:	68 f1       	brcs	.+90     	; 0xc46 <__addsf3x+0x9c>
 bec:	1a 16       	cp	r1, r26
 bee:	f0 40       	sbci	r31, 0x00	; 0
 bf0:	a2 2f       	mov	r26, r18
 bf2:	23 2f       	mov	r18, r19
 bf4:	34 2f       	mov	r19, r20
 bf6:	44 27       	eor	r20, r20
 bf8:	58 5f       	subi	r21, 0xF8	; 248
 bfa:	f3 cf       	rjmp	.-26     	; 0xbe2 <__addsf3x+0x38>
 bfc:	46 95       	lsr	r20
 bfe:	37 95       	ror	r19
 c00:	27 95       	ror	r18
 c02:	a7 95       	ror	r26
 c04:	f0 40       	sbci	r31, 0x00	; 0
 c06:	53 95       	inc	r21
 c08:	c9 f7       	brne	.-14     	; 0xbfc <__addsf3x+0x52>
 c0a:	7e f4       	brtc	.+30     	; 0xc2a <__addsf3x+0x80>
 c0c:	1f 16       	cp	r1, r31
 c0e:	ba 0b       	sbc	r27, r26
 c10:	62 0b       	sbc	r22, r18
 c12:	73 0b       	sbc	r23, r19
 c14:	84 0b       	sbc	r24, r20
 c16:	ba f0       	brmi	.+46     	; 0xc46 <__addsf3x+0x9c>
 c18:	91 50       	subi	r25, 0x01	; 1
 c1a:	a1 f0       	breq	.+40     	; 0xc44 <__addsf3x+0x9a>
 c1c:	ff 0f       	add	r31, r31
 c1e:	bb 1f       	adc	r27, r27
 c20:	66 1f       	adc	r22, r22
 c22:	77 1f       	adc	r23, r23
 c24:	88 1f       	adc	r24, r24
 c26:	c2 f7       	brpl	.-16     	; 0xc18 <__addsf3x+0x6e>
 c28:	0e c0       	rjmp	.+28     	; 0xc46 <__addsf3x+0x9c>
 c2a:	ba 0f       	add	r27, r26
 c2c:	62 1f       	adc	r22, r18
 c2e:	73 1f       	adc	r23, r19
 c30:	84 1f       	adc	r24, r20
 c32:	48 f4       	brcc	.+18     	; 0xc46 <__addsf3x+0x9c>
 c34:	87 95       	ror	r24
 c36:	77 95       	ror	r23
 c38:	67 95       	ror	r22
 c3a:	b7 95       	ror	r27
 c3c:	f7 95       	ror	r31
 c3e:	9e 3f       	cpi	r25, 0xFE	; 254
 c40:	08 f0       	brcs	.+2      	; 0xc44 <__addsf3x+0x9a>
 c42:	b0 cf       	rjmp	.-160    	; 0xba4 <__addsf3+0x28>
 c44:	93 95       	inc	r25
 c46:	88 0f       	add	r24, r24
 c48:	08 f0       	brcs	.+2      	; 0xc4c <__addsf3x+0xa2>
 c4a:	99 27       	eor	r25, r25
 c4c:	ee 0f       	add	r30, r30
 c4e:	97 95       	ror	r25
 c50:	87 95       	ror	r24
 c52:	08 95       	ret

00000c54 <__cmpsf2>:
 c54:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fp_cmp>
 c58:	08 f4       	brcc	.+2      	; 0xc5c <__cmpsf2+0x8>
 c5a:	81 e0       	ldi	r24, 0x01	; 1
 c5c:	08 95       	ret

00000c5e <__fixunssfsi>:
 c5e:	0e 94 ef 06 	call	0xdde	; 0xdde <__fp_splitA>
 c62:	88 f0       	brcs	.+34     	; 0xc86 <__fixunssfsi+0x28>
 c64:	9f 57       	subi	r25, 0x7F	; 127
 c66:	98 f0       	brcs	.+38     	; 0xc8e <__fixunssfsi+0x30>
 c68:	b9 2f       	mov	r27, r25
 c6a:	99 27       	eor	r25, r25
 c6c:	b7 51       	subi	r27, 0x17	; 23
 c6e:	b0 f0       	brcs	.+44     	; 0xc9c <__fixunssfsi+0x3e>
 c70:	e1 f0       	breq	.+56     	; 0xcaa <__fixunssfsi+0x4c>
 c72:	66 0f       	add	r22, r22
 c74:	77 1f       	adc	r23, r23
 c76:	88 1f       	adc	r24, r24
 c78:	99 1f       	adc	r25, r25
 c7a:	1a f0       	brmi	.+6      	; 0xc82 <__fixunssfsi+0x24>
 c7c:	ba 95       	dec	r27
 c7e:	c9 f7       	brne	.-14     	; 0xc72 <__fixunssfsi+0x14>
 c80:	14 c0       	rjmp	.+40     	; 0xcaa <__fixunssfsi+0x4c>
 c82:	b1 30       	cpi	r27, 0x01	; 1
 c84:	91 f0       	breq	.+36     	; 0xcaa <__fixunssfsi+0x4c>
 c86:	0e 94 09 07 	call	0xe12	; 0xe12 <__fp_zero>
 c8a:	b1 e0       	ldi	r27, 0x01	; 1
 c8c:	08 95       	ret
 c8e:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__fp_zero>
 c92:	67 2f       	mov	r22, r23
 c94:	78 2f       	mov	r23, r24
 c96:	88 27       	eor	r24, r24
 c98:	b8 5f       	subi	r27, 0xF8	; 248
 c9a:	39 f0       	breq	.+14     	; 0xcaa <__fixunssfsi+0x4c>
 c9c:	b9 3f       	cpi	r27, 0xF9	; 249
 c9e:	cc f3       	brlt	.-14     	; 0xc92 <__fixunssfsi+0x34>
 ca0:	86 95       	lsr	r24
 ca2:	77 95       	ror	r23
 ca4:	67 95       	ror	r22
 ca6:	b3 95       	inc	r27
 ca8:	d9 f7       	brne	.-10     	; 0xca0 <__fixunssfsi+0x42>
 caa:	3e f4       	brtc	.+14     	; 0xcba <__fixunssfsi+0x5c>
 cac:	90 95       	com	r25
 cae:	80 95       	com	r24
 cb0:	70 95       	com	r23
 cb2:	61 95       	neg	r22
 cb4:	7f 4f       	sbci	r23, 0xFF	; 255
 cb6:	8f 4f       	sbci	r24, 0xFF	; 255
 cb8:	9f 4f       	sbci	r25, 0xFF	; 255
 cba:	08 95       	ret

00000cbc <__floatunsisf>:
 cbc:	e8 94       	clt
 cbe:	09 c0       	rjmp	.+18     	; 0xcd2 <__floatsisf+0x12>

00000cc0 <__floatsisf>:
 cc0:	97 fb       	bst	r25, 7
 cc2:	3e f4       	brtc	.+14     	; 0xcd2 <__floatsisf+0x12>
 cc4:	90 95       	com	r25
 cc6:	80 95       	com	r24
 cc8:	70 95       	com	r23
 cca:	61 95       	neg	r22
 ccc:	7f 4f       	sbci	r23, 0xFF	; 255
 cce:	8f 4f       	sbci	r24, 0xFF	; 255
 cd0:	9f 4f       	sbci	r25, 0xFF	; 255
 cd2:	99 23       	and	r25, r25
 cd4:	a9 f0       	breq	.+42     	; 0xd00 <__floatsisf+0x40>
 cd6:	f9 2f       	mov	r31, r25
 cd8:	96 e9       	ldi	r25, 0x96	; 150
 cda:	bb 27       	eor	r27, r27
 cdc:	93 95       	inc	r25
 cde:	f6 95       	lsr	r31
 ce0:	87 95       	ror	r24
 ce2:	77 95       	ror	r23
 ce4:	67 95       	ror	r22
 ce6:	b7 95       	ror	r27
 ce8:	f1 11       	cpse	r31, r1
 cea:	f8 cf       	rjmp	.-16     	; 0xcdc <__floatsisf+0x1c>
 cec:	fa f4       	brpl	.+62     	; 0xd2c <__floatsisf+0x6c>
 cee:	bb 0f       	add	r27, r27
 cf0:	11 f4       	brne	.+4      	; 0xcf6 <__floatsisf+0x36>
 cf2:	60 ff       	sbrs	r22, 0
 cf4:	1b c0       	rjmp	.+54     	; 0xd2c <__floatsisf+0x6c>
 cf6:	6f 5f       	subi	r22, 0xFF	; 255
 cf8:	7f 4f       	sbci	r23, 0xFF	; 255
 cfa:	8f 4f       	sbci	r24, 0xFF	; 255
 cfc:	9f 4f       	sbci	r25, 0xFF	; 255
 cfe:	16 c0       	rjmp	.+44     	; 0xd2c <__floatsisf+0x6c>
 d00:	88 23       	and	r24, r24
 d02:	11 f0       	breq	.+4      	; 0xd08 <__floatsisf+0x48>
 d04:	96 e9       	ldi	r25, 0x96	; 150
 d06:	11 c0       	rjmp	.+34     	; 0xd2a <__floatsisf+0x6a>
 d08:	77 23       	and	r23, r23
 d0a:	21 f0       	breq	.+8      	; 0xd14 <__floatsisf+0x54>
 d0c:	9e e8       	ldi	r25, 0x8E	; 142
 d0e:	87 2f       	mov	r24, r23
 d10:	76 2f       	mov	r23, r22
 d12:	05 c0       	rjmp	.+10     	; 0xd1e <__floatsisf+0x5e>
 d14:	66 23       	and	r22, r22
 d16:	71 f0       	breq	.+28     	; 0xd34 <__floatsisf+0x74>
 d18:	96 e8       	ldi	r25, 0x86	; 134
 d1a:	86 2f       	mov	r24, r22
 d1c:	70 e0       	ldi	r23, 0x00	; 0
 d1e:	60 e0       	ldi	r22, 0x00	; 0
 d20:	2a f0       	brmi	.+10     	; 0xd2c <__floatsisf+0x6c>
 d22:	9a 95       	dec	r25
 d24:	66 0f       	add	r22, r22
 d26:	77 1f       	adc	r23, r23
 d28:	88 1f       	adc	r24, r24
 d2a:	da f7       	brpl	.-10     	; 0xd22 <__floatsisf+0x62>
 d2c:	88 0f       	add	r24, r24
 d2e:	96 95       	lsr	r25
 d30:	87 95       	ror	r24
 d32:	97 f9       	bld	r25, 7
 d34:	08 95       	ret

00000d36 <__fp_cmp>:
 d36:	99 0f       	add	r25, r25
 d38:	00 08       	sbc	r0, r0
 d3a:	55 0f       	add	r21, r21
 d3c:	aa 0b       	sbc	r26, r26
 d3e:	e0 e8       	ldi	r30, 0x80	; 128
 d40:	fe ef       	ldi	r31, 0xFE	; 254
 d42:	16 16       	cp	r1, r22
 d44:	17 06       	cpc	r1, r23
 d46:	e8 07       	cpc	r30, r24
 d48:	f9 07       	cpc	r31, r25
 d4a:	c0 f0       	brcs	.+48     	; 0xd7c <__fp_cmp+0x46>
 d4c:	12 16       	cp	r1, r18
 d4e:	13 06       	cpc	r1, r19
 d50:	e4 07       	cpc	r30, r20
 d52:	f5 07       	cpc	r31, r21
 d54:	98 f0       	brcs	.+38     	; 0xd7c <__fp_cmp+0x46>
 d56:	62 1b       	sub	r22, r18
 d58:	73 0b       	sbc	r23, r19
 d5a:	84 0b       	sbc	r24, r20
 d5c:	95 0b       	sbc	r25, r21
 d5e:	39 f4       	brne	.+14     	; 0xd6e <__fp_cmp+0x38>
 d60:	0a 26       	eor	r0, r26
 d62:	61 f0       	breq	.+24     	; 0xd7c <__fp_cmp+0x46>
 d64:	23 2b       	or	r18, r19
 d66:	24 2b       	or	r18, r20
 d68:	25 2b       	or	r18, r21
 d6a:	21 f4       	brne	.+8      	; 0xd74 <__fp_cmp+0x3e>
 d6c:	08 95       	ret
 d6e:	0a 26       	eor	r0, r26
 d70:	09 f4       	brne	.+2      	; 0xd74 <__fp_cmp+0x3e>
 d72:	a1 40       	sbci	r26, 0x01	; 1
 d74:	a6 95       	lsr	r26
 d76:	8f ef       	ldi	r24, 0xFF	; 255
 d78:	81 1d       	adc	r24, r1
 d7a:	81 1d       	adc	r24, r1
 d7c:	08 95       	ret

00000d7e <__fp_inf>:
 d7e:	97 f9       	bld	r25, 7
 d80:	9f 67       	ori	r25, 0x7F	; 127
 d82:	80 e8       	ldi	r24, 0x80	; 128
 d84:	70 e0       	ldi	r23, 0x00	; 0
 d86:	60 e0       	ldi	r22, 0x00	; 0
 d88:	08 95       	ret

00000d8a <__fp_nan>:
 d8a:	9f ef       	ldi	r25, 0xFF	; 255
 d8c:	80 ec       	ldi	r24, 0xC0	; 192
 d8e:	08 95       	ret

00000d90 <__fp_pscA>:
 d90:	00 24       	eor	r0, r0
 d92:	0a 94       	dec	r0
 d94:	16 16       	cp	r1, r22
 d96:	17 06       	cpc	r1, r23
 d98:	18 06       	cpc	r1, r24
 d9a:	09 06       	cpc	r0, r25
 d9c:	08 95       	ret

00000d9e <__fp_pscB>:
 d9e:	00 24       	eor	r0, r0
 da0:	0a 94       	dec	r0
 da2:	12 16       	cp	r1, r18
 da4:	13 06       	cpc	r1, r19
 da6:	14 06       	cpc	r1, r20
 da8:	05 06       	cpc	r0, r21
 daa:	08 95       	ret

00000dac <__fp_round>:
 dac:	09 2e       	mov	r0, r25
 dae:	03 94       	inc	r0
 db0:	00 0c       	add	r0, r0
 db2:	11 f4       	brne	.+4      	; 0xdb8 <__fp_round+0xc>
 db4:	88 23       	and	r24, r24
 db6:	52 f0       	brmi	.+20     	; 0xdcc <__fp_round+0x20>
 db8:	bb 0f       	add	r27, r27
 dba:	40 f4       	brcc	.+16     	; 0xdcc <__fp_round+0x20>
 dbc:	bf 2b       	or	r27, r31
 dbe:	11 f4       	brne	.+4      	; 0xdc4 <__fp_round+0x18>
 dc0:	60 ff       	sbrs	r22, 0
 dc2:	04 c0       	rjmp	.+8      	; 0xdcc <__fp_round+0x20>
 dc4:	6f 5f       	subi	r22, 0xFF	; 255
 dc6:	7f 4f       	sbci	r23, 0xFF	; 255
 dc8:	8f 4f       	sbci	r24, 0xFF	; 255
 dca:	9f 4f       	sbci	r25, 0xFF	; 255
 dcc:	08 95       	ret

00000dce <__fp_split3>:
 dce:	57 fd       	sbrc	r21, 7
 dd0:	90 58       	subi	r25, 0x80	; 128
 dd2:	44 0f       	add	r20, r20
 dd4:	55 1f       	adc	r21, r21
 dd6:	59 f0       	breq	.+22     	; 0xdee <__fp_splitA+0x10>
 dd8:	5f 3f       	cpi	r21, 0xFF	; 255
 dda:	71 f0       	breq	.+28     	; 0xdf8 <__fp_splitA+0x1a>
 ddc:	47 95       	ror	r20

00000dde <__fp_splitA>:
 dde:	88 0f       	add	r24, r24
 de0:	97 fb       	bst	r25, 7
 de2:	99 1f       	adc	r25, r25
 de4:	61 f0       	breq	.+24     	; 0xdfe <__fp_splitA+0x20>
 de6:	9f 3f       	cpi	r25, 0xFF	; 255
 de8:	79 f0       	breq	.+30     	; 0xe08 <__fp_splitA+0x2a>
 dea:	87 95       	ror	r24
 dec:	08 95       	ret
 dee:	12 16       	cp	r1, r18
 df0:	13 06       	cpc	r1, r19
 df2:	14 06       	cpc	r1, r20
 df4:	55 1f       	adc	r21, r21
 df6:	f2 cf       	rjmp	.-28     	; 0xddc <__fp_split3+0xe>
 df8:	46 95       	lsr	r20
 dfa:	f1 df       	rcall	.-30     	; 0xdde <__fp_splitA>
 dfc:	08 c0       	rjmp	.+16     	; 0xe0e <__fp_splitA+0x30>
 dfe:	16 16       	cp	r1, r22
 e00:	17 06       	cpc	r1, r23
 e02:	18 06       	cpc	r1, r24
 e04:	99 1f       	adc	r25, r25
 e06:	f1 cf       	rjmp	.-30     	; 0xdea <__fp_splitA+0xc>
 e08:	86 95       	lsr	r24
 e0a:	71 05       	cpc	r23, r1
 e0c:	61 05       	cpc	r22, r1
 e0e:	08 94       	sec
 e10:	08 95       	ret

00000e12 <__fp_zero>:
 e12:	e8 94       	clt

00000e14 <__fp_szero>:
 e14:	bb 27       	eor	r27, r27
 e16:	66 27       	eor	r22, r22
 e18:	77 27       	eor	r23, r23
 e1a:	cb 01       	movw	r24, r22
 e1c:	97 f9       	bld	r25, 7
 e1e:	08 95       	ret

00000e20 <__gesf2>:
 e20:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fp_cmp>
 e24:	08 f4       	brcc	.+2      	; 0xe28 <__gesf2+0x8>
 e26:	8f ef       	ldi	r24, 0xFF	; 255
 e28:	08 95       	ret

00000e2a <__mulsf3>:
 e2a:	0e 94 28 07 	call	0xe50	; 0xe50 <__mulsf3x>
 e2e:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__fp_round>
 e32:	0e 94 c8 06 	call	0xd90	; 0xd90 <__fp_pscA>
 e36:	38 f0       	brcs	.+14     	; 0xe46 <__mulsf3+0x1c>
 e38:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__fp_pscB>
 e3c:	20 f0       	brcs	.+8      	; 0xe46 <__mulsf3+0x1c>
 e3e:	95 23       	and	r25, r21
 e40:	11 f0       	breq	.+4      	; 0xe46 <__mulsf3+0x1c>
 e42:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__fp_inf>
 e46:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <__fp_nan>
 e4a:	11 24       	eor	r1, r1
 e4c:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__fp_szero>

00000e50 <__mulsf3x>:
 e50:	0e 94 e7 06 	call	0xdce	; 0xdce <__fp_split3>
 e54:	70 f3       	brcs	.-36     	; 0xe32 <__mulsf3+0x8>

00000e56 <__mulsf3_pse>:
 e56:	95 9f       	mul	r25, r21
 e58:	c1 f3       	breq	.-16     	; 0xe4a <__mulsf3+0x20>
 e5a:	95 0f       	add	r25, r21
 e5c:	50 e0       	ldi	r21, 0x00	; 0
 e5e:	55 1f       	adc	r21, r21
 e60:	62 9f       	mul	r22, r18
 e62:	f0 01       	movw	r30, r0
 e64:	72 9f       	mul	r23, r18
 e66:	bb 27       	eor	r27, r27
 e68:	f0 0d       	add	r31, r0
 e6a:	b1 1d       	adc	r27, r1
 e6c:	63 9f       	mul	r22, r19
 e6e:	aa 27       	eor	r26, r26
 e70:	f0 0d       	add	r31, r0
 e72:	b1 1d       	adc	r27, r1
 e74:	aa 1f       	adc	r26, r26
 e76:	64 9f       	mul	r22, r20
 e78:	66 27       	eor	r22, r22
 e7a:	b0 0d       	add	r27, r0
 e7c:	a1 1d       	adc	r26, r1
 e7e:	66 1f       	adc	r22, r22
 e80:	82 9f       	mul	r24, r18
 e82:	22 27       	eor	r18, r18
 e84:	b0 0d       	add	r27, r0
 e86:	a1 1d       	adc	r26, r1
 e88:	62 1f       	adc	r22, r18
 e8a:	73 9f       	mul	r23, r19
 e8c:	b0 0d       	add	r27, r0
 e8e:	a1 1d       	adc	r26, r1
 e90:	62 1f       	adc	r22, r18
 e92:	83 9f       	mul	r24, r19
 e94:	a0 0d       	add	r26, r0
 e96:	61 1d       	adc	r22, r1
 e98:	22 1f       	adc	r18, r18
 e9a:	74 9f       	mul	r23, r20
 e9c:	33 27       	eor	r19, r19
 e9e:	a0 0d       	add	r26, r0
 ea0:	61 1d       	adc	r22, r1
 ea2:	23 1f       	adc	r18, r19
 ea4:	84 9f       	mul	r24, r20
 ea6:	60 0d       	add	r22, r0
 ea8:	21 1d       	adc	r18, r1
 eaa:	82 2f       	mov	r24, r18
 eac:	76 2f       	mov	r23, r22
 eae:	6a 2f       	mov	r22, r26
 eb0:	11 24       	eor	r1, r1
 eb2:	9f 57       	subi	r25, 0x7F	; 127
 eb4:	50 40       	sbci	r21, 0x00	; 0
 eb6:	9a f0       	brmi	.+38     	; 0xede <__mulsf3_pse+0x88>
 eb8:	f1 f0       	breq	.+60     	; 0xef6 <__mulsf3_pse+0xa0>
 eba:	88 23       	and	r24, r24
 ebc:	4a f0       	brmi	.+18     	; 0xed0 <__mulsf3_pse+0x7a>
 ebe:	ee 0f       	add	r30, r30
 ec0:	ff 1f       	adc	r31, r31
 ec2:	bb 1f       	adc	r27, r27
 ec4:	66 1f       	adc	r22, r22
 ec6:	77 1f       	adc	r23, r23
 ec8:	88 1f       	adc	r24, r24
 eca:	91 50       	subi	r25, 0x01	; 1
 ecc:	50 40       	sbci	r21, 0x00	; 0
 ece:	a9 f7       	brne	.-22     	; 0xeba <__mulsf3_pse+0x64>
 ed0:	9e 3f       	cpi	r25, 0xFE	; 254
 ed2:	51 05       	cpc	r21, r1
 ed4:	80 f0       	brcs	.+32     	; 0xef6 <__mulsf3_pse+0xa0>
 ed6:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__fp_inf>
 eda:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__fp_szero>
 ede:	5f 3f       	cpi	r21, 0xFF	; 255
 ee0:	e4 f3       	brlt	.-8      	; 0xeda <__mulsf3_pse+0x84>
 ee2:	98 3e       	cpi	r25, 0xE8	; 232
 ee4:	d4 f3       	brlt	.-12     	; 0xeda <__mulsf3_pse+0x84>
 ee6:	86 95       	lsr	r24
 ee8:	77 95       	ror	r23
 eea:	67 95       	ror	r22
 eec:	b7 95       	ror	r27
 eee:	f7 95       	ror	r31
 ef0:	e7 95       	ror	r30
 ef2:	9f 5f       	subi	r25, 0xFF	; 255
 ef4:	c1 f7       	brne	.-16     	; 0xee6 <__mulsf3_pse+0x90>
 ef6:	fe 2b       	or	r31, r30
 ef8:	88 0f       	add	r24, r24
 efa:	91 1d       	adc	r25, r1
 efc:	96 95       	lsr	r25
 efe:	87 95       	ror	r24
 f00:	97 f9       	bld	r25, 7
 f02:	08 95       	ret

00000f04 <__divmodhi4>:
 f04:	97 fb       	bst	r25, 7
 f06:	07 2e       	mov	r0, r23
 f08:	16 f4       	brtc	.+4      	; 0xf0e <__divmodhi4+0xa>
 f0a:	00 94       	com	r0
 f0c:	07 d0       	rcall	.+14     	; 0xf1c <__divmodhi4_neg1>
 f0e:	77 fd       	sbrc	r23, 7
 f10:	09 d0       	rcall	.+18     	; 0xf24 <__divmodhi4_neg2>
 f12:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__udivmodhi4>
 f16:	07 fc       	sbrc	r0, 7
 f18:	05 d0       	rcall	.+10     	; 0xf24 <__divmodhi4_neg2>
 f1a:	3e f4       	brtc	.+14     	; 0xf2a <__divmodhi4_exit>

00000f1c <__divmodhi4_neg1>:
 f1c:	90 95       	com	r25
 f1e:	81 95       	neg	r24
 f20:	9f 4f       	sbci	r25, 0xFF	; 255
 f22:	08 95       	ret

00000f24 <__divmodhi4_neg2>:
 f24:	70 95       	com	r23
 f26:	61 95       	neg	r22
 f28:	7f 4f       	sbci	r23, 0xFF	; 255

00000f2a <__divmodhi4_exit>:
 f2a:	08 95       	ret

00000f2c <__umulhisi3>:
 f2c:	a2 9f       	mul	r26, r18
 f2e:	b0 01       	movw	r22, r0
 f30:	b3 9f       	mul	r27, r19
 f32:	c0 01       	movw	r24, r0
 f34:	a3 9f       	mul	r26, r19
 f36:	70 0d       	add	r23, r0
 f38:	81 1d       	adc	r24, r1
 f3a:	11 24       	eor	r1, r1
 f3c:	91 1d       	adc	r25, r1
 f3e:	b2 9f       	mul	r27, r18
 f40:	70 0d       	add	r23, r0
 f42:	81 1d       	adc	r24, r1
 f44:	11 24       	eor	r1, r1
 f46:	91 1d       	adc	r25, r1
 f48:	08 95       	ret

00000f4a <__udivmodhi4>:
 f4a:	aa 1b       	sub	r26, r26
 f4c:	bb 1b       	sub	r27, r27
 f4e:	51 e1       	ldi	r21, 0x11	; 17
 f50:	07 c0       	rjmp	.+14     	; 0xf60 <__udivmodhi4_ep>

00000f52 <__udivmodhi4_loop>:
 f52:	aa 1f       	adc	r26, r26
 f54:	bb 1f       	adc	r27, r27
 f56:	a6 17       	cp	r26, r22
 f58:	b7 07       	cpc	r27, r23
 f5a:	10 f0       	brcs	.+4      	; 0xf60 <__udivmodhi4_ep>
 f5c:	a6 1b       	sub	r26, r22
 f5e:	b7 0b       	sbc	r27, r23

00000f60 <__udivmodhi4_ep>:
 f60:	88 1f       	adc	r24, r24
 f62:	99 1f       	adc	r25, r25
 f64:	5a 95       	dec	r21
 f66:	a9 f7       	brne	.-22     	; 0xf52 <__udivmodhi4_loop>
 f68:	80 95       	com	r24
 f6a:	90 95       	com	r25
 f6c:	bc 01       	movw	r22, r24
 f6e:	cd 01       	movw	r24, r26
 f70:	08 95       	ret

00000f72 <_exit>:
 f72:	f8 94       	cli

00000f74 <__stop_program>:
 f74:	ff cf       	rjmp	.-2      	; 0xf74 <__stop_program>
