
inverted_pendulum_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000058a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  000005fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b93  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089f  00000000  00000000  000012b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000508  00000000  00000000  00001b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  0000205c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000510  00000000  00000000  000021b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000194  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000285c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_24>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 31       	cpi	r26, 0x12	; 18
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  9c:	0c 94 c3 02 	jmp	0x586	; 0x586 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <setup_adc>:
void adc_interrupt_enabled(){
	ADCSRA |= (1<<ADIE);
}

void adc_interrupt_disbled(){
	ADCSRA &= ~(1<<ADIE);
  a4:	ec e7       	ldi	r30, 0x7C	; 124
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	90 81       	ld	r25, Z
  aa:	9f 73       	andi	r25, 0x3F	; 63
  ac:	90 83       	st	Z, r25
  ae:	90 81       	ld	r25, Z
  b0:	89 2b       	or	r24, r25
  b2:	80 83       	st	Z, r24
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <adc_prescaler>:
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	98 7f       	andi	r25, 0xF8	; 248
  ce:	90 83       	st	Z, r25
  d0:	90 81       	ld	r25, Z
  d2:	89 2b       	or	r24, r25
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <set_channel>:
  d8:	ec e7       	ldi	r30, 0x7C	; 124
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	98 7f       	andi	r25, 0xF8	; 248
  e0:	90 83       	st	Z, r25
  e2:	90 81       	ld	r25, Z
  e4:	89 2b       	or	r24, r25
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <adc_interrupt_enabled>:
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <adc_freerun>:
}
void adc_freerun(){
	ADCSRA |= (1<<ADATE);
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 62       	ori	r24, 0x20	; 32
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <adc_start>:
}
void adc_start(){
	ADCSRA |= (1<<ADSC);		///< Starting Analog-to-digital conversion
 102:	ea e7       	ldi	r30, 0x7A	; 122
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <main>:
double getDegree();

int main(void)
{
	//	ADC
	setup_adc(0);
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 52 00 	call	0xa4	; 0xa4 <setup_adc>
	adc_interrupt_enabled();
 114:	0e 94 75 00 	call	0xea	; 0xea <adc_interrupt_enabled>
	adc_freerun();
 118:	0e 94 7b 00 	call	0xf6	; 0xf6 <adc_freerun>
	adc_start();
 11c:	0e 94 81 00 	call	0x102	; 0x102 <adc_start>
	adc_prescaler(PRESCALER128);
 120:	87 e0       	ldi	r24, 0x07	; 7
 122:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_prescaler>
	//	USART
	usart_init();
 126:	0e 94 86 01 	call	0x30c	; 0x30c <usart_init>
	sei();
 12a:	78 94       	sei
	//	Remove later, for testing delta Time
	DDRD |= (1<<7);
 12c:	8a b1       	in	r24, 0x0a	; 10
 12e:	80 68       	ori	r24, 0x80	; 128
 130:	8a b9       	out	0x0a, r24	; 10
 132:	ff cf       	rjmp	.-2      	; 0x132 <main+0x24>

00000134 <getDegree>:
/*
*	\brief Determines degree depending on which sensor has the most correct reading
*	at the current place in time.
*/
double getDegree(){
	if(H1>H2){										//	Leaning towards H2, need to drive forward, e1 should be used
 134:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <H1>
 138:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <H1+0x1>
 13c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <H2>
 140:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <H2+0x1>
 144:	82 17       	cp	r24, r18
 146:	93 07       	cpc	r25, r19
 148:	7c f5       	brge	.+94     	; 0x1a8 <getDegree+0x74>
		speed = -(P*e1+Ki*(H1-H1_prev)*DELTA_TIME+Kd*(H1-H1_prev)*DELTA_TIME);			//	Negative multiplication due to the nature of TARGET-adc_val
 14a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <H1>
 14e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <H1+0x1>
 152:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <H1_prev>
 156:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <H1_prev+0x1>
 15a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <H1>
 15e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <H1+0x1>
 162:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <H1_prev>
 166:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <H1_prev+0x1>
 16a:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <e1>
 16e:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <e1+0x1>
 172:	07 2e       	mov	r0, r23
 174:	00 0c       	add	r0, r0
 176:	88 0b       	sbc	r24, r24
 178:	99 0b       	sbc	r25, r25
 17a:	0e 94 37 02 	call	0x46e	; 0x46e <__floatsisf>
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	a9 01       	movw	r20, r18
 184:	0e 94 93 01 	call	0x326	; 0x326 <__addsf3>
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	a9 01       	movw	r20, r18
 18e:	0e 94 93 01 	call	0x326	; 0x326 <__addsf3>
 192:	90 58       	subi	r25, 0x80	; 128
 194:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__fixsfsi>
 198:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <speed+0x1>
 19c:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <speed>
		PORTD ^= (1<<7);
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	80 58       	subi	r24, 0x80	; 128
 1a4:	8b b9       	out	0x0b, r24	; 11
 1a6:	2e c0       	rjmp	.+92     	; 0x204 <getDegree+0xd0>
	}else{											//	Leaning towards H1, need to drive backwards, e2 should be used
		speed = -(P*e2+Ki*(H2-H2_prev)*DELTA_TIME+Kd*(H2-H2_prev)*DELTA_TIME);			//	Negative multiplication due to the nature of TARGET-adc_val
 1a8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <H2>
 1ac:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <H2+0x1>
 1b0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <H2_prev>
 1b4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <H2_prev+0x1>
 1b8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <H2>
 1bc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <H2+0x1>
 1c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <H2_prev>
 1c4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <H2_prev+0x1>
 1c8:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <e2>
 1cc:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <e2+0x1>
 1d0:	07 2e       	mov	r0, r23
 1d2:	00 0c       	add	r0, r0
 1d4:	88 0b       	sbc	r24, r24
 1d6:	99 0b       	sbc	r25, r25
 1d8:	0e 94 37 02 	call	0x46e	; 0x46e <__floatsisf>
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	a9 01       	movw	r20, r18
 1e2:	0e 94 93 01 	call	0x326	; 0x326 <__addsf3>
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	a9 01       	movw	r20, r18
 1ec:	0e 94 93 01 	call	0x326	; 0x326 <__addsf3>
 1f0:	90 58       	subi	r25, 0x80	; 128
 1f2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__fixsfsi>
 1f6:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <speed+0x1>
 1fa:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <speed>
		PORTD ^= (1<<7);
 1fe:	8b b1       	in	r24, 0x0b	; 11
 200:	80 58       	subi	r24, 0x80	; 128
 202:	8b b9       	out	0x0b, r24	; 11
	}
	
	return 0;
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	cb 01       	movw	r24, r22
 20a:	08 95       	ret

0000020c <__vector_24>:
    {
		
	}
}

ISR(ADC_vect){
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	4f 93       	push	r20
 21c:	5f 93       	push	r21
 21e:	6f 93       	push	r22
 220:	7f 93       	push	r23
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
	adc_val = ADC;
 22e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 232:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 236:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <adc_val+0x1>
 23a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <adc_val>
	adc_switch_counter++;
 23e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 242:	8f 5f       	subi	r24, 0xFF	; 255
 244:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	//	PORTD ^= (1<<7);							//	For testing deltaTime
	if(adc_switch_counter==ADC_SWITCH){
 248:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	09 f0       	breq	.+2      	; 0x252 <__vector_24+0x46>
 250:	4c c0       	rjmp	.+152    	; 0x2ea <__vector_24+0xde>
		
													//	Switch reading to other sensor
		if(sensor==H1_SENS){
 252:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <sensor>
 256:	81 11       	cpse	r24, r1
 258:	23 c0       	rjmp	.+70     	; 0x2a0 <__vector_24+0x94>
			H1_prev = H1;
 25a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <H1>
 25e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <H1+0x1>
 262:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <H1_prev+0x1>
 266:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <H1_prev>
			H1 = adc_val;
 26a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <adc_val>
 26e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <adc_val+0x1>
 272:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <H1+0x1>
 276:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <H1>
			e1=TARGET-adc_val;						//	e_1(t)
 27a:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <adc_val>
 27e:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <adc_val+0x1>
 282:	8c eb       	ldi	r24, 0xBC	; 188
 284:	92 e0       	ldi	r25, 0x02	; 2
 286:	82 1b       	sub	r24, r18
 288:	93 0b       	sbc	r25, r19
 28a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <e1+0x1>
 28e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <e1>
			// Switch to read H2
			set_channel(ADC1);						//	Set ADC channel to PA1					
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
			sensor=H2_SENS;
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <sensor>
 29e:	21 c0       	rjmp	.+66     	; 0x2e2 <__vector_24+0xd6>
			}else{
			H2_prev = H2;
 2a0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <H2>
 2a4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <H2+0x1>
 2a8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <H2_prev+0x1>
 2ac:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <H2_prev>
			H2 = adc_val;
 2b0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <adc_val>
 2b4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <adc_val+0x1>
 2b8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <H2+0x1>
 2bc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <H2>
			e2=TARGET-adc_val;						// e_2(t)
 2c0:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <adc_val>
 2c4:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <adc_val+0x1>
 2c8:	8c eb       	ldi	r24, 0xBC	; 188
 2ca:	92 e0       	ldi	r25, 0x02	; 2
 2cc:	82 1b       	sub	r24, r18
 2ce:	93 0b       	sbc	r25, r19
 2d0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <e2+0x1>
 2d4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <e2>
			// Switch to read H1
			set_channel(ADC0);						//	Set ADC channel to PA0
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
			sensor=H1_SENS;							
 2de:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <sensor>
		}
		adc_switch_counter=0;
 2e2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		getDegree();
 2e6:	0e 94 9a 00 	call	0x134	; 0x134 <getDegree>
	}
	
}
 2ea:	ff 91       	pop	r31
 2ec:	ef 91       	pop	r30
 2ee:	bf 91       	pop	r27
 2f0:	af 91       	pop	r26
 2f2:	9f 91       	pop	r25
 2f4:	8f 91       	pop	r24
 2f6:	7f 91       	pop	r23
 2f8:	6f 91       	pop	r22
 2fa:	5f 91       	pop	r21
 2fc:	4f 91       	pop	r20
 2fe:	3f 91       	pop	r19
 300:	2f 91       	pop	r18
 302:	0f 90       	pop	r0
 304:	0f be       	out	0x3f, r0	; 63
 306:	0f 90       	pop	r0
 308:	1f 90       	pop	r1
 30a:	18 95       	reti

0000030c <usart_init>:

#include "usart.h"

void usart_init()
{
	UBRR0 = 103; // 9600=103 baud @ 16 MHz, 51=9600 @ 8 MHz
 30c:	87 e6       	ldi	r24, 0x67	; 103
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
 314:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
	//UBRR0L = 51;
	UCSR0B |= (1<<TXEN0) | (1<<RXEN0);// | (1 << RXCIE0);		//	Enable RX, TX
 318:	e1 ec       	ldi	r30, 0xC1	; 193
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	88 61       	ori	r24, 0x18	; 24
 320:	80 83       	st	Z, r24
 322:	08 95       	ret

00000324 <__subsf3>:
 324:	50 58       	subi	r21, 0x80	; 128

00000326 <__addsf3>:
 326:	bb 27       	eor	r27, r27
 328:	aa 27       	eor	r26, r26
 32a:	0e 94 aa 01 	call	0x354	; 0x354 <__addsf3x>
 32e:	0c 94 89 02 	jmp	0x512	; 0x512 <__fp_round>
 332:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__fp_pscA>
 336:	38 f0       	brcs	.+14     	; 0x346 <__addsf3+0x20>
 338:	0e 94 82 02 	call	0x504	; 0x504 <__fp_pscB>
 33c:	20 f0       	brcs	.+8      	; 0x346 <__addsf3+0x20>
 33e:	39 f4       	brne	.+14     	; 0x34e <__addsf3+0x28>
 340:	9f 3f       	cpi	r25, 0xFF	; 255
 342:	19 f4       	brne	.+6      	; 0x34a <__addsf3+0x24>
 344:	26 f4       	brtc	.+8      	; 0x34e <__addsf3+0x28>
 346:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__fp_nan>
 34a:	0e f4       	brtc	.+2      	; 0x34e <__addsf3+0x28>
 34c:	e0 95       	com	r30
 34e:	e7 fb       	bst	r30, 7
 350:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__fp_inf>

00000354 <__addsf3x>:
 354:	e9 2f       	mov	r30, r25
 356:	0e 94 9a 02 	call	0x534	; 0x534 <__fp_split3>
 35a:	58 f3       	brcs	.-42     	; 0x332 <__addsf3+0xc>
 35c:	ba 17       	cp	r27, r26
 35e:	62 07       	cpc	r22, r18
 360:	73 07       	cpc	r23, r19
 362:	84 07       	cpc	r24, r20
 364:	95 07       	cpc	r25, r21
 366:	20 f0       	brcs	.+8      	; 0x370 <__addsf3x+0x1c>
 368:	79 f4       	brne	.+30     	; 0x388 <__addsf3x+0x34>
 36a:	a6 f5       	brtc	.+104    	; 0x3d4 <__addsf3x+0x80>
 36c:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_zero>
 370:	0e f4       	brtc	.+2      	; 0x374 <__addsf3x+0x20>
 372:	e0 95       	com	r30
 374:	0b 2e       	mov	r0, r27
 376:	ba 2f       	mov	r27, r26
 378:	a0 2d       	mov	r26, r0
 37a:	0b 01       	movw	r0, r22
 37c:	b9 01       	movw	r22, r18
 37e:	90 01       	movw	r18, r0
 380:	0c 01       	movw	r0, r24
 382:	ca 01       	movw	r24, r20
 384:	a0 01       	movw	r20, r0
 386:	11 24       	eor	r1, r1
 388:	ff 27       	eor	r31, r31
 38a:	59 1b       	sub	r21, r25
 38c:	99 f0       	breq	.+38     	; 0x3b4 <__addsf3x+0x60>
 38e:	59 3f       	cpi	r21, 0xF9	; 249
 390:	50 f4       	brcc	.+20     	; 0x3a6 <__addsf3x+0x52>
 392:	50 3e       	cpi	r21, 0xE0	; 224
 394:	68 f1       	brcs	.+90     	; 0x3f0 <__addsf3x+0x9c>
 396:	1a 16       	cp	r1, r26
 398:	f0 40       	sbci	r31, 0x00	; 0
 39a:	a2 2f       	mov	r26, r18
 39c:	23 2f       	mov	r18, r19
 39e:	34 2f       	mov	r19, r20
 3a0:	44 27       	eor	r20, r20
 3a2:	58 5f       	subi	r21, 0xF8	; 248
 3a4:	f3 cf       	rjmp	.-26     	; 0x38c <__addsf3x+0x38>
 3a6:	46 95       	lsr	r20
 3a8:	37 95       	ror	r19
 3aa:	27 95       	ror	r18
 3ac:	a7 95       	ror	r26
 3ae:	f0 40       	sbci	r31, 0x00	; 0
 3b0:	53 95       	inc	r21
 3b2:	c9 f7       	brne	.-14     	; 0x3a6 <__addsf3x+0x52>
 3b4:	7e f4       	brtc	.+30     	; 0x3d4 <__addsf3x+0x80>
 3b6:	1f 16       	cp	r1, r31
 3b8:	ba 0b       	sbc	r27, r26
 3ba:	62 0b       	sbc	r22, r18
 3bc:	73 0b       	sbc	r23, r19
 3be:	84 0b       	sbc	r24, r20
 3c0:	ba f0       	brmi	.+46     	; 0x3f0 <__addsf3x+0x9c>
 3c2:	91 50       	subi	r25, 0x01	; 1
 3c4:	a1 f0       	breq	.+40     	; 0x3ee <__addsf3x+0x9a>
 3c6:	ff 0f       	add	r31, r31
 3c8:	bb 1f       	adc	r27, r27
 3ca:	66 1f       	adc	r22, r22
 3cc:	77 1f       	adc	r23, r23
 3ce:	88 1f       	adc	r24, r24
 3d0:	c2 f7       	brpl	.-16     	; 0x3c2 <__addsf3x+0x6e>
 3d2:	0e c0       	rjmp	.+28     	; 0x3f0 <__addsf3x+0x9c>
 3d4:	ba 0f       	add	r27, r26
 3d6:	62 1f       	adc	r22, r18
 3d8:	73 1f       	adc	r23, r19
 3da:	84 1f       	adc	r24, r20
 3dc:	48 f4       	brcc	.+18     	; 0x3f0 <__addsf3x+0x9c>
 3de:	87 95       	ror	r24
 3e0:	77 95       	ror	r23
 3e2:	67 95       	ror	r22
 3e4:	b7 95       	ror	r27
 3e6:	f7 95       	ror	r31
 3e8:	9e 3f       	cpi	r25, 0xFE	; 254
 3ea:	08 f0       	brcs	.+2      	; 0x3ee <__addsf3x+0x9a>
 3ec:	b0 cf       	rjmp	.-160    	; 0x34e <__addsf3+0x28>
 3ee:	93 95       	inc	r25
 3f0:	88 0f       	add	r24, r24
 3f2:	08 f0       	brcs	.+2      	; 0x3f6 <__addsf3x+0xa2>
 3f4:	99 27       	eor	r25, r25
 3f6:	ee 0f       	add	r30, r30
 3f8:	97 95       	ror	r25
 3fa:	87 95       	ror	r24
 3fc:	08 95       	ret

000003fe <__fixsfsi>:
 3fe:	0e 94 06 02 	call	0x40c	; 0x40c <__fixunssfsi>
 402:	68 94       	set
 404:	b1 11       	cpse	r27, r1
 406:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__fp_szero>
 40a:	08 95       	ret

0000040c <__fixunssfsi>:
 40c:	0e 94 a2 02 	call	0x544	; 0x544 <__fp_splitA>
 410:	88 f0       	brcs	.+34     	; 0x434 <__fixunssfsi+0x28>
 412:	9f 57       	subi	r25, 0x7F	; 127
 414:	98 f0       	brcs	.+38     	; 0x43c <__fixunssfsi+0x30>
 416:	b9 2f       	mov	r27, r25
 418:	99 27       	eor	r25, r25
 41a:	b7 51       	subi	r27, 0x17	; 23
 41c:	b0 f0       	brcs	.+44     	; 0x44a <__fixunssfsi+0x3e>
 41e:	e1 f0       	breq	.+56     	; 0x458 <__fixunssfsi+0x4c>
 420:	66 0f       	add	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	88 1f       	adc	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	1a f0       	brmi	.+6      	; 0x430 <__fixunssfsi+0x24>
 42a:	ba 95       	dec	r27
 42c:	c9 f7       	brne	.-14     	; 0x420 <__fixunssfsi+0x14>
 42e:	14 c0       	rjmp	.+40     	; 0x458 <__fixunssfsi+0x4c>
 430:	b1 30       	cpi	r27, 0x01	; 1
 432:	91 f0       	breq	.+36     	; 0x458 <__fixunssfsi+0x4c>
 434:	0e 94 bc 02 	call	0x578	; 0x578 <__fp_zero>
 438:	b1 e0       	ldi	r27, 0x01	; 1
 43a:	08 95       	ret
 43c:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_zero>
 440:	67 2f       	mov	r22, r23
 442:	78 2f       	mov	r23, r24
 444:	88 27       	eor	r24, r24
 446:	b8 5f       	subi	r27, 0xF8	; 248
 448:	39 f0       	breq	.+14     	; 0x458 <__fixunssfsi+0x4c>
 44a:	b9 3f       	cpi	r27, 0xF9	; 249
 44c:	cc f3       	brlt	.-14     	; 0x440 <__fixunssfsi+0x34>
 44e:	86 95       	lsr	r24
 450:	77 95       	ror	r23
 452:	67 95       	ror	r22
 454:	b3 95       	inc	r27
 456:	d9 f7       	brne	.-10     	; 0x44e <__fixunssfsi+0x42>
 458:	3e f4       	brtc	.+14     	; 0x468 <__fixunssfsi+0x5c>
 45a:	90 95       	com	r25
 45c:	80 95       	com	r24
 45e:	70 95       	com	r23
 460:	61 95       	neg	r22
 462:	7f 4f       	sbci	r23, 0xFF	; 255
 464:	8f 4f       	sbci	r24, 0xFF	; 255
 466:	9f 4f       	sbci	r25, 0xFF	; 255
 468:	08 95       	ret

0000046a <__floatunsisf>:
 46a:	e8 94       	clt
 46c:	09 c0       	rjmp	.+18     	; 0x480 <__floatsisf+0x12>

0000046e <__floatsisf>:
 46e:	97 fb       	bst	r25, 7
 470:	3e f4       	brtc	.+14     	; 0x480 <__floatsisf+0x12>
 472:	90 95       	com	r25
 474:	80 95       	com	r24
 476:	70 95       	com	r23
 478:	61 95       	neg	r22
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	8f 4f       	sbci	r24, 0xFF	; 255
 47e:	9f 4f       	sbci	r25, 0xFF	; 255
 480:	99 23       	and	r25, r25
 482:	a9 f0       	breq	.+42     	; 0x4ae <__floatsisf+0x40>
 484:	f9 2f       	mov	r31, r25
 486:	96 e9       	ldi	r25, 0x96	; 150
 488:	bb 27       	eor	r27, r27
 48a:	93 95       	inc	r25
 48c:	f6 95       	lsr	r31
 48e:	87 95       	ror	r24
 490:	77 95       	ror	r23
 492:	67 95       	ror	r22
 494:	b7 95       	ror	r27
 496:	f1 11       	cpse	r31, r1
 498:	f8 cf       	rjmp	.-16     	; 0x48a <__floatsisf+0x1c>
 49a:	fa f4       	brpl	.+62     	; 0x4da <__floatsisf+0x6c>
 49c:	bb 0f       	add	r27, r27
 49e:	11 f4       	brne	.+4      	; 0x4a4 <__floatsisf+0x36>
 4a0:	60 ff       	sbrs	r22, 0
 4a2:	1b c0       	rjmp	.+54     	; 0x4da <__floatsisf+0x6c>
 4a4:	6f 5f       	subi	r22, 0xFF	; 255
 4a6:	7f 4f       	sbci	r23, 0xFF	; 255
 4a8:	8f 4f       	sbci	r24, 0xFF	; 255
 4aa:	9f 4f       	sbci	r25, 0xFF	; 255
 4ac:	16 c0       	rjmp	.+44     	; 0x4da <__floatsisf+0x6c>
 4ae:	88 23       	and	r24, r24
 4b0:	11 f0       	breq	.+4      	; 0x4b6 <__floatsisf+0x48>
 4b2:	96 e9       	ldi	r25, 0x96	; 150
 4b4:	11 c0       	rjmp	.+34     	; 0x4d8 <__floatsisf+0x6a>
 4b6:	77 23       	and	r23, r23
 4b8:	21 f0       	breq	.+8      	; 0x4c2 <__floatsisf+0x54>
 4ba:	9e e8       	ldi	r25, 0x8E	; 142
 4bc:	87 2f       	mov	r24, r23
 4be:	76 2f       	mov	r23, r22
 4c0:	05 c0       	rjmp	.+10     	; 0x4cc <__floatsisf+0x5e>
 4c2:	66 23       	and	r22, r22
 4c4:	71 f0       	breq	.+28     	; 0x4e2 <__floatsisf+0x74>
 4c6:	96 e8       	ldi	r25, 0x86	; 134
 4c8:	86 2f       	mov	r24, r22
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	2a f0       	brmi	.+10     	; 0x4da <__floatsisf+0x6c>
 4d0:	9a 95       	dec	r25
 4d2:	66 0f       	add	r22, r22
 4d4:	77 1f       	adc	r23, r23
 4d6:	88 1f       	adc	r24, r24
 4d8:	da f7       	brpl	.-10     	; 0x4d0 <__floatsisf+0x62>
 4da:	88 0f       	add	r24, r24
 4dc:	96 95       	lsr	r25
 4de:	87 95       	ror	r24
 4e0:	97 f9       	bld	r25, 7
 4e2:	08 95       	ret

000004e4 <__fp_inf>:
 4e4:	97 f9       	bld	r25, 7
 4e6:	9f 67       	ori	r25, 0x7F	; 127
 4e8:	80 e8       	ldi	r24, 0x80	; 128
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	60 e0       	ldi	r22, 0x00	; 0
 4ee:	08 95       	ret

000004f0 <__fp_nan>:
 4f0:	9f ef       	ldi	r25, 0xFF	; 255
 4f2:	80 ec       	ldi	r24, 0xC0	; 192
 4f4:	08 95       	ret

000004f6 <__fp_pscA>:
 4f6:	00 24       	eor	r0, r0
 4f8:	0a 94       	dec	r0
 4fa:	16 16       	cp	r1, r22
 4fc:	17 06       	cpc	r1, r23
 4fe:	18 06       	cpc	r1, r24
 500:	09 06       	cpc	r0, r25
 502:	08 95       	ret

00000504 <__fp_pscB>:
 504:	00 24       	eor	r0, r0
 506:	0a 94       	dec	r0
 508:	12 16       	cp	r1, r18
 50a:	13 06       	cpc	r1, r19
 50c:	14 06       	cpc	r1, r20
 50e:	05 06       	cpc	r0, r21
 510:	08 95       	ret

00000512 <__fp_round>:
 512:	09 2e       	mov	r0, r25
 514:	03 94       	inc	r0
 516:	00 0c       	add	r0, r0
 518:	11 f4       	brne	.+4      	; 0x51e <__fp_round+0xc>
 51a:	88 23       	and	r24, r24
 51c:	52 f0       	brmi	.+20     	; 0x532 <__fp_round+0x20>
 51e:	bb 0f       	add	r27, r27
 520:	40 f4       	brcc	.+16     	; 0x532 <__fp_round+0x20>
 522:	bf 2b       	or	r27, r31
 524:	11 f4       	brne	.+4      	; 0x52a <__fp_round+0x18>
 526:	60 ff       	sbrs	r22, 0
 528:	04 c0       	rjmp	.+8      	; 0x532 <__fp_round+0x20>
 52a:	6f 5f       	subi	r22, 0xFF	; 255
 52c:	7f 4f       	sbci	r23, 0xFF	; 255
 52e:	8f 4f       	sbci	r24, 0xFF	; 255
 530:	9f 4f       	sbci	r25, 0xFF	; 255
 532:	08 95       	ret

00000534 <__fp_split3>:
 534:	57 fd       	sbrc	r21, 7
 536:	90 58       	subi	r25, 0x80	; 128
 538:	44 0f       	add	r20, r20
 53a:	55 1f       	adc	r21, r21
 53c:	59 f0       	breq	.+22     	; 0x554 <__fp_splitA+0x10>
 53e:	5f 3f       	cpi	r21, 0xFF	; 255
 540:	71 f0       	breq	.+28     	; 0x55e <__fp_splitA+0x1a>
 542:	47 95       	ror	r20

00000544 <__fp_splitA>:
 544:	88 0f       	add	r24, r24
 546:	97 fb       	bst	r25, 7
 548:	99 1f       	adc	r25, r25
 54a:	61 f0       	breq	.+24     	; 0x564 <__fp_splitA+0x20>
 54c:	9f 3f       	cpi	r25, 0xFF	; 255
 54e:	79 f0       	breq	.+30     	; 0x56e <__fp_splitA+0x2a>
 550:	87 95       	ror	r24
 552:	08 95       	ret
 554:	12 16       	cp	r1, r18
 556:	13 06       	cpc	r1, r19
 558:	14 06       	cpc	r1, r20
 55a:	55 1f       	adc	r21, r21
 55c:	f2 cf       	rjmp	.-28     	; 0x542 <__fp_split3+0xe>
 55e:	46 95       	lsr	r20
 560:	f1 df       	rcall	.-30     	; 0x544 <__fp_splitA>
 562:	08 c0       	rjmp	.+16     	; 0x574 <__fp_splitA+0x30>
 564:	16 16       	cp	r1, r22
 566:	17 06       	cpc	r1, r23
 568:	18 06       	cpc	r1, r24
 56a:	99 1f       	adc	r25, r25
 56c:	f1 cf       	rjmp	.-30     	; 0x550 <__fp_splitA+0xc>
 56e:	86 95       	lsr	r24
 570:	71 05       	cpc	r23, r1
 572:	61 05       	cpc	r22, r1
 574:	08 94       	sec
 576:	08 95       	ret

00000578 <__fp_zero>:
 578:	e8 94       	clt

0000057a <__fp_szero>:
 57a:	bb 27       	eor	r27, r27
 57c:	66 27       	eor	r22, r22
 57e:	77 27       	eor	r23, r23
 580:	cb 01       	movw	r24, r22
 582:	97 f9       	bld	r25, 7
 584:	08 95       	ret

00000586 <_exit>:
 586:	f8 94       	cli

00000588 <__stop_program>:
 588:	ff cf       	rjmp	.-2      	; 0x588 <__stop_program>
