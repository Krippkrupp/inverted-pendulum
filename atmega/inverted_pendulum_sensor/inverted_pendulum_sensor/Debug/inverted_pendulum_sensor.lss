
inverted_pendulum_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000822  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800100  00800100  00000822  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000822  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000854  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000109d  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b1  00000000  00000000  000019f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000745  00000000  00000000  000023a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00002ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fa  00000000  00000000  00002c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004db  00000000  00000000  0000327a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003755  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__vector_24>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	aa 32       	cpi	r26, 0x2A	; 42
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 dd 02 	call	0x5ba	; 0x5ba <main>
  9c:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <setup_adc>:
void adc_interrupt_enabled(){
	ADCSRA |= (1<<ADIE);
}

void adc_interrupt_disbled(){
	ADCSRA &= ~(1<<ADIE);
  a4:	ec e7       	ldi	r30, 0x7C	; 124
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	90 81       	ld	r25, Z
  aa:	9f 73       	andi	r25, 0x3F	; 63
  ac:	90 83       	st	Z, r25
  ae:	90 81       	ld	r25, Z
  b0:	89 2b       	or	r24, r25
  b2:	80 83       	st	Z, r24
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <adc_prescaler>:
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	98 7f       	andi	r25, 0xF8	; 248
  ce:	90 83       	st	Z, r25
  d0:	90 81       	ld	r25, Z
  d2:	89 2b       	or	r24, r25
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <set_channel>:
  d8:	ec e7       	ldi	r30, 0x7C	; 124
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	98 7f       	andi	r25, 0xF8	; 248
  e0:	90 83       	st	Z, r25
  e2:	90 81       	ld	r25, Z
  e4:	89 2b       	or	r24, r25
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <adc_interrupt_enabled>:
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <adc_freerun>:
}
void adc_freerun(){
	ADCSRA |= (1<<ADATE);
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 62       	ori	r24, 0x20	; 32
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <adc_start>:
}
void adc_start(){
	ADCSRA |= (1<<ADSC);		///< Starting Analog-to-digital conversion
 102:	ea e7       	ldi	r30, 0x7A	; 122
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <send_motorspeed>:

	
}

void send_motorspeed()
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	1f 92       	push	r1
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t data;
	if(speed>=127){speed=126;}
 118:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <speed>
 11c:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <speed+0x1>
 120:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <speed+0x2>
 124:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <speed+0x3>
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	4e ef       	ldi	r20, 0xFE	; 254
 12e:	52 e4       	ldi	r21, 0x42	; 66
 130:	0e 94 9d 03 	call	0x73a	; 0x73a <__gesf2>
 134:	88 23       	and	r24, r24
 136:	64 f0       	brlt	.+24     	; 0x150 <send_motorspeed+0x42>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	ac ef       	ldi	r26, 0xFC	; 252
 13e:	b2 e4       	ldi	r27, 0x42	; 66
 140:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <speed>
 144:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <speed+0x1>
 148:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <speed+0x2>
 14c:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <speed+0x3>
	data = speed;
 150:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <speed>
 154:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <speed+0x1>
 158:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <speed+0x2>
 15c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <speed+0x3>
 160:	0e 94 08 03 	call	0x610	; 0x610 <__fixunssfsi>
 164:	69 83       	std	Y+1, r22	; 0x01
	
	data|=motor_direction;
 166:	99 81       	ldd	r25, Y+1	; 0x01
 168:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <motor_direction>
 16c:	89 2b       	or	r24, r25
 16e:	89 83       	std	Y+1, r24	; 0x01
	usart_transmit(data);
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	0e 94 01 03 	call	0x602	; 0x602 <usart_transmit>
	
	adc_switch_counter = 0;							//	Already done at least two readings, keep going.
 176:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <adc_switch_counter>
	transmit_counter=0;		// Fix: flytta dessa två till en egen "reset_counters" ska ske efter transmits
 17a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <getDegree>:
/*
*	\brief Determines degree depending on which sensor has the most correct reading
*	at the current place in time.
*/
void getDegree(){	// Dåligt namn. Byt det ditt äckel
	if(H1>H2){										//	Leaning towards H2, need to drive forward, e1 should be used
 18a:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <H1>
 18e:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <H1+0x1>
 192:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <H2>
 196:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <H2+0x1>
 19a:	82 17       	cp	r24, r18
 19c:	93 07       	cpc	r25, r19
 19e:	f4 f4       	brge	.+60     	; 0x1dc <getDegree+0x52>
		//speed = -(P*e1);
		speed = abs(P*e1);//+Ki*(H1-H1_prev)*DELTA_TIME+Kd*(H1-H1_prev)*DELTA_TIME);			//	Negative multiplication due to the nature of TARGET-adc_val
 1a0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <e1>
 1a4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <e1+0x1>
 1a8:	bc 01       	movw	r22, r24
 1aa:	66 0f       	add	r22, r22
 1ac:	77 1f       	adc	r23, r23
 1ae:	96 ff       	sbrs	r25, 6
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <getDegree+0x2e>
 1b2:	71 95       	neg	r23
 1b4:	61 95       	neg	r22
 1b6:	71 09       	sbc	r23, r1
 1b8:	07 2e       	mov	r0, r23
 1ba:	00 0c       	add	r0, r0
 1bc:	88 0b       	sbc	r24, r24
 1be:	99 0b       	sbc	r25, r25
 1c0:	0e 94 39 03 	call	0x672	; 0x672 <__floatsisf>
 1c4:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <speed>
 1c8:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <speed+0x1>
 1cc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <speed+0x2>
 1d0:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <speed+0x3>
		/*double tmp = speed;
		tmp/=max_speed_e1;
		tmp*=125;
		speed = tmp;*/
		motor_direction = FORWARD;
 1d4:	80 e8       	ldi	r24, 0x80	; 128
 1d6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <motor_direction>
 1da:	1c c0       	rjmp	.+56     	; 0x214 <getDegree+0x8a>
	}else{											//	Leaning towards H1, need to drive backwards, e2 should be used
		speed = abs(P*e2);//+Ki*(H2-H2_prev)*DELTA_TIME+Kd*(H2-H2_prev)*DELTA_TIME);			//	Negative multiplication due to the nature of TARGET-adc_val
 1dc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <e2>
 1e0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <e2+0x1>
 1e4:	bc 01       	movw	r22, r24
 1e6:	66 0f       	add	r22, r22
 1e8:	77 1f       	adc	r23, r23
 1ea:	96 ff       	sbrs	r25, 6
 1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <getDegree+0x6a>
 1ee:	71 95       	neg	r23
 1f0:	61 95       	neg	r22
 1f2:	71 09       	sbc	r23, r1
 1f4:	07 2e       	mov	r0, r23
 1f6:	00 0c       	add	r0, r0
 1f8:	88 0b       	sbc	r24, r24
 1fa:	99 0b       	sbc	r25, r25
 1fc:	0e 94 39 03 	call	0x672	; 0x672 <__floatsisf>
 200:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <speed>
 204:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <speed+0x1>
 208:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <speed+0x2>
 20c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <speed+0x3>
		/*double tmp = speed;
		tmp/=max_speed_e1;
		tmp*=125;
		speed = tmp;*/
		
		motor_direction = BACKWARDS;
 210:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <motor_direction>
	}

	send_motorspeed();
 214:	0e 94 87 00 	call	0x10e	; 0x10e <send_motorspeed>
 218:	08 95       	ret

0000021a <__vector_24>:
		PORTD ^= (1<<PORTD7);
		//usart_transmit(50);
	}
}

ISR(ADC_vect){
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	2f 93       	push	r18
 226:	3f 93       	push	r19
 228:	4f 93       	push	r20
 22a:	5f 93       	push	r21
 22c:	6f 93       	push	r22
 22e:	7f 93       	push	r23
 230:	8f 93       	push	r24
 232:	9f 93       	push	r25
 234:	af 93       	push	r26
 236:	bf 93       	push	r27
 238:	ef 93       	push	r30
 23a:	ff 93       	push	r31
	
	adc_val = ADC;
 23c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 240:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 244:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <adc_val+0x1>
 248:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <adc_val>
	adc_switch_counter++;
 24c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_switch_counter>
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc_switch_counter>
	//	PORTD ^= (1<<7);							//	For testing deltaTime
	if(adc_switch_counter<ADC_SWITCH){				//	Read twice after change
 256:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_switch_counter>
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	08 f4       	brcc	.+2      	; 0x260 <__vector_24+0x46>
 25e:	b1 c0       	rjmp	.+354    	; 0x3c2 <__vector_24+0x1a8>
		return;
		}
	
	
	if(transmit_counter<=RASPBERRY_PI_DELAY){ // 250 tidigare
 260:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 264:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 268:	8d 3b       	cpi	r24, 0xBD	; 189
 26a:	92 40       	sbci	r25, 0x02	; 2
 26c:	50 f4       	brcc	.+20     	; 0x282 <__vector_24+0x68>
		transmit_counter++;
 26e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 272:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 276:	01 96       	adiw	r24, 0x01	; 1
 278:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 27c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		return;}
 280:	a0 c0       	rjmp	.+320    	; 0x3c2 <__vector_24+0x1a8>
	/*
	uint8_t tmp = adc_val-TARGET_1;	// REMOVE LATER; 
	usart_transmit(tmp);
	return;
	*/
	moving_avarage_counter++;											
 282:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <moving_avarage_counter>
 286:	8f 5f       	subi	r24, 0xFF	; 255
 288:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <moving_avarage_counter>
	if(sensor==H1_SENS){
 28c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sensor>
 290:	81 11       	cpse	r24, r1
 292:	4a c0       	rjmp	.+148    	; 0x328 <__vector_24+0x10e>
		buffer+=adc_val;						//	Max value 65535 for uint16_t, FIX quit if buffer+adc_val>65535?
 294:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <adc_val>
 298:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <adc_val+0x1>
 29c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <buffer>
 2a0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <buffer+0x1>
 2a4:	82 0f       	add	r24, r18
 2a6:	93 1f       	adc	r25, r19
 2a8:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <buffer+0x1>
 2ac:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <buffer>
		if(moving_avarage_counter<MOVING_AVARAGE){
 2b0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <moving_avarage_counter>
 2b4:	8a 30       	cpi	r24, 0x0A	; 10
 2b6:	08 f4       	brcc	.+2      	; 0x2ba <__vector_24+0xa0>
 2b8:	84 c0       	rjmp	.+264    	; 0x3c2 <__vector_24+0x1a8>
			return;
		}else{
			H1_prev = H1;
 2ba:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <H1>
 2be:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <H1+0x1>
 2c2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <H1_prev+0x1>
 2c6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <H1_prev>
			H1 = buffer/MOVING_AVARAGE;
 2ca:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <buffer>
 2ce:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <buffer+0x1>
 2d2:	ad ec       	ldi	r26, 0xCD	; 205
 2d4:	bc ec       	ldi	r27, 0xCC	; 204
 2d6:	0e 94 c6 03 	call	0x78c	; 0x78c <__umulhisi3>
 2da:	96 95       	lsr	r25
 2dc:	87 95       	ror	r24
 2de:	96 95       	lsr	r25
 2e0:	87 95       	ror	r24
 2e2:	96 95       	lsr	r25
 2e4:	87 95       	ror	r24
 2e6:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <H1+0x1>
 2ea:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <H1>
			e1=H1-TARGET_1;						//	e_1(t)
 2ee:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <H1>
 2f2:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <H1+0x1>
 2f6:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <TARGET_1>
 2fa:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <TARGET_1+0x1>
 2fe:	82 1b       	sub	r24, r18
 300:	93 0b       	sbc	r25, r19
 302:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <e1+0x1>
 306:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <e1>
			//	Switch reading to other sensor, H2
			set_channel(ADC1);						//	Set ADC channel to PA1
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
			sensor=H2_SENS;	
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <sensor>
			moving_avarage_counter=0;
 316:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <moving_avarage_counter>
			buffer=0;
 31a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <buffer+0x1>
 31e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <buffer>
			

			
			getDegree();
 322:	0e 94 c5 00 	call	0x18a	; 0x18a <getDegree>
 326:	4d c0       	rjmp	.+154    	; 0x3c2 <__vector_24+0x1a8>
			}
		}
		else{
			buffer+=adc_val;
 328:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <adc_val>
 32c:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <adc_val+0x1>
 330:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <buffer>
 334:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <buffer+0x1>
 338:	82 0f       	add	r24, r18
 33a:	93 1f       	adc	r25, r19
 33c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <buffer+0x1>
 340:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <buffer>
			if(moving_avarage_counter<MOVING_AVARAGE){
 344:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <moving_avarage_counter>
 348:	8a 30       	cpi	r24, 0x0A	; 10
 34a:	d8 f1       	brcs	.+118    	; 0x3c2 <__vector_24+0x1a8>
				return;
			}else{
				H2_prev = H2;
 34c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <H2>
 350:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <H2+0x1>
 354:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <H2_prev+0x1>
 358:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <H2_prev>
				H2 = buffer/MOVING_AVARAGE;
 35c:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <buffer>
 360:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <buffer+0x1>
 364:	ad ec       	ldi	r26, 0xCD	; 205
 366:	bc ec       	ldi	r27, 0xCC	; 204
 368:	0e 94 c6 03 	call	0x78c	; 0x78c <__umulhisi3>
 36c:	96 95       	lsr	r25
 36e:	87 95       	ror	r24
 370:	96 95       	lsr	r25
 372:	87 95       	ror	r24
 374:	96 95       	lsr	r25
 376:	87 95       	ror	r24
 378:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <H2+0x1>
 37c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <H2>
				e2=abs(TARGET_2-H2);						// e_2(t)
 380:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <H2>
 384:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <H2+0x1>
 388:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <TARGET_2>
 38c:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <TARGET_2+0x1>
 390:	82 1b       	sub	r24, r18
 392:	93 0b       	sbc	r25, r19
 394:	9c 01       	movw	r18, r24
 396:	22 f4       	brpl	.+8      	; 0x3a0 <__vector_24+0x186>
 398:	22 27       	eor	r18, r18
 39a:	33 27       	eor	r19, r19
 39c:	28 1b       	sub	r18, r24
 39e:	39 0b       	sbc	r19, r25
 3a0:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <e2+0x1>
 3a4:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <e2>
				//	Switch reading to other sensor, H1
				set_channel(ADC0);						//	Set ADC channel to PA0
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
				sensor=H1_SENS;
 3ae:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <sensor>
				moving_avarage_counter=0;
 3b2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <moving_avarage_counter>
				buffer=0;
 3b6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <buffer+0x1>
 3ba:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <buffer>
				

				getDegree();
 3be:	0e 94 c5 00 	call	0x18a	; 0x18a <getDegree>
		}*/


		
	//}	
}
 3c2:	ff 91       	pop	r31
 3c4:	ef 91       	pop	r30
 3c6:	bf 91       	pop	r27
 3c8:	af 91       	pop	r26
 3ca:	9f 91       	pop	r25
 3cc:	8f 91       	pop	r24
 3ce:	7f 91       	pop	r23
 3d0:	6f 91       	pop	r22
 3d2:	5f 91       	pop	r21
 3d4:	4f 91       	pop	r20
 3d6:	3f 91       	pop	r19
 3d8:	2f 91       	pop	r18
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <startSeq>:
	adc_switch_counter = 0;							//	Already done at least two readings, keep going.
	transmit_counter=0;		// Fix: flytta dessa två till en egen "reset_counters" ska ske efter transmits
}


void startSeq(){
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
	while(!(PINA&(1<<PINA7)));
 3e8:	07 9b       	sbis	0x00, 7	; 0
 3ea:	fe cf       	rjmp	.-4      	; 0x3e8 <startSeq+0x4>
	H1_MIN = ADC;
 3ec:	c8 e7       	ldi	r28, 0x78	; 120
 3ee:	d0 e0       	ldi	r29, 0x00	; 0
 3f0:	88 81       	ld	r24, Y
 3f2:	99 81       	ldd	r25, Y+1	; 0x01
 3f4:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <H1_MIN+0x1>
 3f8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <H1_MIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fc:	2f e7       	ldi	r18, 0x7F	; 127
 3fe:	88 e3       	ldi	r24, 0x38	; 56
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	21 50       	subi	r18, 0x01	; 1
 404:	80 40       	sbci	r24, 0x00	; 0
 406:	90 40       	sbci	r25, 0x00	; 0
 408:	e1 f7       	brne	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
	_delay_ms(50);
	H1_MIN = ADC;
 40e:	88 81       	ld	r24, Y
 410:	99 81       	ldd	r25, Y+1	; 0x01
 412:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <H1_MIN+0x1>
 416:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <H1_MIN>
	set_channel(ADC1);
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
 420:	2f e7       	ldi	r18, 0x7F	; 127
 422:	88 e3       	ldi	r24, 0x38	; 56
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	21 50       	subi	r18, 0x01	; 1
 428:	80 40       	sbci	r24, 0x00	; 0
 42a:	90 40       	sbci	r25, 0x00	; 0
 42c:	e1 f7       	brne	.-8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 430:	00 00       	nop
	_delay_ms(50);
	H2_MAX = ADC;
 432:	88 81       	ld	r24, Y
 434:	99 81       	ldd	r25, Y+1	; 0x01
 436:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <H2_MAX+0x1>
 43a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <H2_MAX>
 43e:	2f e7       	ldi	r18, 0x7F	; 127
 440:	88 e3       	ldi	r24, 0x38	; 56
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	21 50       	subi	r18, 0x01	; 1
 446:	80 40       	sbci	r24, 0x00	; 0
 448:	90 40       	sbci	r25, 0x00	; 0
 44a:	e1 f7       	brne	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44e:	00 00       	nop
	_delay_ms(50);
	H2_MAX = ADC;
 450:	88 81       	ld	r24, Y
 452:	99 81       	ldd	r25, Y+1	; 0x01
 454:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <H2_MAX+0x1>
 458:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <H2_MAX>
 45c:	2f ef       	ldi	r18, 0xFF	; 255
 45e:	84 e3       	ldi	r24, 0x34	; 52
 460:	9c e0       	ldi	r25, 0x0C	; 12
 462:	21 50       	subi	r18, 0x01	; 1
 464:	80 40       	sbci	r24, 0x00	; 0
 466:	90 40       	sbci	r25, 0x00	; 0
 468:	e1 f7       	brne	.-8      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 46c:	00 00       	nop
	_delay_ms(500);
	while(!(PINA&(1<<PINA7)));
 46e:	07 9b       	sbis	0x00, 7	; 0
 470:	fe cf       	rjmp	.-4      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
	H2_MIN = ADC;
 472:	c8 e7       	ldi	r28, 0x78	; 120
 474:	d0 e0       	ldi	r29, 0x00	; 0
 476:	88 81       	ld	r24, Y
 478:	99 81       	ldd	r25, Y+1	; 0x01
 47a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <H2_MIN+0x1>
 47e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <H2_MIN>
 482:	2f e7       	ldi	r18, 0x7F	; 127
 484:	88 e3       	ldi	r24, 0x38	; 56
 486:	91 e0       	ldi	r25, 0x01	; 1
 488:	21 50       	subi	r18, 0x01	; 1
 48a:	80 40       	sbci	r24, 0x00	; 0
 48c:	90 40       	sbci	r25, 0x00	; 0
 48e:	e1 f7       	brne	.-8      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 490:	00 c0       	rjmp	.+0      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 492:	00 00       	nop
	_delay_ms(50);
	H2_MIN = ADC;
 494:	88 81       	ld	r24, Y
 496:	99 81       	ldd	r25, Y+1	; 0x01
 498:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <H2_MIN+0x1>
 49c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <H2_MIN>
	set_channel(ADC0);
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
 4a6:	2f e7       	ldi	r18, 0x7F	; 127
 4a8:	88 e3       	ldi	r24, 0x38	; 56
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	21 50       	subi	r18, 0x01	; 1
 4ae:	80 40       	sbci	r24, 0x00	; 0
 4b0:	90 40       	sbci	r25, 0x00	; 0
 4b2:	e1 f7       	brne	.-8      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4b6:	00 00       	nop
	_delay_ms(50);
	H1_MAX = ADC;
 4b8:	88 81       	ld	r24, Y
 4ba:	99 81       	ldd	r25, Y+1	; 0x01
 4bc:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <H1_MAX+0x1>
 4c0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <H1_MAX>
 4c4:	2f e7       	ldi	r18, 0x7F	; 127
 4c6:	88 e3       	ldi	r24, 0x38	; 56
 4c8:	91 e0       	ldi	r25, 0x01	; 1
 4ca:	21 50       	subi	r18, 0x01	; 1
 4cc:	80 40       	sbci	r24, 0x00	; 0
 4ce:	90 40       	sbci	r25, 0x00	; 0
 4d0:	e1 f7       	brne	.-8      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4d4:	00 00       	nop
	_delay_ms(50);
	H1_MAX = ADC;
 4d6:	88 81       	ld	r24, Y
 4d8:	99 81       	ldd	r25, Y+1	; 0x01
 4da:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <H1_MAX+0x1>
 4de:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <H1_MAX>
 4e2:	2f ef       	ldi	r18, 0xFF	; 255
 4e4:	84 e3       	ldi	r24, 0x34	; 52
 4e6:	9c e0       	ldi	r25, 0x0C	; 12
 4e8:	21 50       	subi	r18, 0x01	; 1
 4ea:	80 40       	sbci	r24, 0x00	; 0
 4ec:	90 40       	sbci	r25, 0x00	; 0
 4ee:	e1 f7       	brne	.-8      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4f2:	00 00       	nop
	_delay_ms(500);
	while(!(PINA&(1<<PINA7)));
 4f4:	07 9b       	sbis	0x00, 7	; 0
 4f6:	fe cf       	rjmp	.-4      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
	TARGET_1 = ADC;
 4f8:	c8 e7       	ldi	r28, 0x78	; 120
 4fa:	d0 e0       	ldi	r29, 0x00	; 0
 4fc:	88 81       	ld	r24, Y
 4fe:	99 81       	ldd	r25, Y+1	; 0x01
 500:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <TARGET_1+0x1>
 504:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <TARGET_1>
 508:	2f e7       	ldi	r18, 0x7F	; 127
 50a:	88 e3       	ldi	r24, 0x38	; 56
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	21 50       	subi	r18, 0x01	; 1
 510:	80 40       	sbci	r24, 0x00	; 0
 512:	90 40       	sbci	r25, 0x00	; 0
 514:	e1 f7       	brne	.-8      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 516:	00 c0       	rjmp	.+0      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 518:	00 00       	nop
	_delay_ms(50);
	TARGET_1 = ADC;
 51a:	88 81       	ld	r24, Y
 51c:	99 81       	ldd	r25, Y+1	; 0x01
 51e:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <TARGET_1+0x1>
 522:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <TARGET_1>
	set_channel(ADC1);
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
 52c:	2f e7       	ldi	r18, 0x7F	; 127
 52e:	88 e3       	ldi	r24, 0x38	; 56
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	21 50       	subi	r18, 0x01	; 1
 534:	80 40       	sbci	r24, 0x00	; 0
 536:	90 40       	sbci	r25, 0x00	; 0
 538:	e1 f7       	brne	.-8      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 53c:	00 00       	nop
	_delay_ms(50);
	TARGET_2 = ADC;
 53e:	88 81       	ld	r24, Y
 540:	99 81       	ldd	r25, Y+1	; 0x01
 542:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <TARGET_2+0x1>
 546:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <TARGET_2>
 54a:	2f e7       	ldi	r18, 0x7F	; 127
 54c:	88 e3       	ldi	r24, 0x38	; 56
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	21 50       	subi	r18, 0x01	; 1
 552:	80 40       	sbci	r24, 0x00	; 0
 554:	90 40       	sbci	r25, 0x00	; 0
 556:	e1 f7       	brne	.-8      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 558:	00 c0       	rjmp	.+0      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 55a:	00 00       	nop
	_delay_ms(50);
	TARGET_2 = ADC;
 55c:	88 81       	ld	r24, Y
 55e:	99 81       	ldd	r25, Y+1	; 0x01
 560:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <TARGET_2+0x1>
 564:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <TARGET_2>
 568:	2f e7       	ldi	r18, 0x7F	; 127
 56a:	88 e3       	ldi	r24, 0x38	; 56
 56c:	91 e0       	ldi	r25, 0x01	; 1
 56e:	21 50       	subi	r18, 0x01	; 1
 570:	80 40       	sbci	r24, 0x00	; 0
 572:	90 40       	sbci	r25, 0x00	; 0
 574:	e1 f7       	brne	.-8      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 576:	00 c0       	rjmp	.+0      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 578:	00 00       	nop
	_delay_ms(50);
	set_channel(ADC0);
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
	max_speed_e1 = abs(1*(TARGET_1-H1_MAX));		// FIX! FIND CORRECT VALUE FOR (H1-H1_prev)*DELTA_TIME+Kd*(H1-H1_prev)*DELTA_TIME). Measure what H1-H1_PREV could be at a maximum
 580:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <TARGET_1>
 584:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <TARGET_1+0x1>
 588:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <H1_MAX>
 58c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <H1_MAX+0x1>
 590:	28 1b       	sub	r18, r24
 592:	39 0b       	sbc	r19, r25
 594:	c9 01       	movw	r24, r18
 596:	99 23       	and	r25, r25
 598:	24 f4       	brge	.+8      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 59a:	88 27       	eor	r24, r24
 59c:	99 27       	eor	r25, r25
 59e:	82 1b       	sub	r24, r18
 5a0:	93 0b       	sbc	r25, r19
 5a2:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <max_speed_e1+0x1>
 5a6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <max_speed_e1>
	max_speed_e2 = abs(1*(TARGET_1-H1_MAX));		// FIX! FIND CORRECT VALUE FOR (H2-H2_prev)*DELTA_TIME+Kd*(H2-H2_prev)*DELTA_TIME). Measure what H1-H1_PREV could be at a maximum
 5aa:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <max_speed_e2+0x1>
 5ae:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <max_speed_e2>
	sei();
 5b2:	78 94       	sei
}
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	08 95       	ret

000005ba <main>:
void startSeq();				//	Starting sequence... skönt att vi inte valde rotationsenkoder

int main(void)
{
	//	ADC
	setup_adc(0);
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	0e 94 52 00 	call	0xa4	; 0xa4 <setup_adc>
	adc_interrupt_enabled();
 5c0:	0e 94 75 00 	call	0xea	; 0xea <adc_interrupt_enabled>
	adc_freerun();
 5c4:	0e 94 7b 00 	call	0xf6	; 0xf6 <adc_freerun>
	adc_start();
 5c8:	0e 94 81 00 	call	0x102	; 0x102 <adc_start>
	adc_prescaler(PRESCALER128);
 5cc:	87 e0       	ldi	r24, 0x07	; 7
 5ce:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_prescaler>
	//	USART
	usart_init();
 5d2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <usart_init>
	cli();
 5d6:	f8 94       	cli
	
	DDRD |= (1<<7);	//	Remove later, for testing delta Time
 5d8:	8a b1       	in	r24, 0x0a	; 10
 5da:	80 68       	ori	r24, 0x80	; 128
 5dc:	8a b9       	out	0x0a, r24	; 10
	
	startSeq();
 5de:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <startSeq>
	
	//	REMOVE LATER
	
    while (1) 
    {
		PORTD ^= (1<<PORTD7);
 5e2:	8b b1       	in	r24, 0x0b	; 11
 5e4:	80 58       	subi	r24, 0x80	; 128
 5e6:	8b b9       	out	0x0b, r24	; 11
 5e8:	fc cf       	rjmp	.-8      	; 0x5e2 <main+0x28>

000005ea <usart_init>:

#include "usart.h"

void usart_init()
{
	UBRR0 = 103; // 9600=103 baud @ 16 MHz, 51=9600 @ 8 MHz
 5ea:	87 e6       	ldi	r24, 0x67	; 103
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
 5f2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
	//UBRR0L = 51;
	UCSR0B |= (1<<TXEN0) | (1<<RXEN0);// | (1 << RXCIE0);		//	Enable RX, TX
 5f6:	e1 ec       	ldi	r30, 0xC1	; 193
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	80 81       	ld	r24, Z
 5fc:	88 61       	ori	r24, 0x18	; 24
 5fe:	80 83       	st	Z, r24
 600:	08 95       	ret

00000602 <usart_transmit>:
	usart_transmit(tmp);
}

void usart_transmit(uint8_t tx_data)
{
	while(!(UCSR0A & (1<<UDRE0))); //Buffer upptagen
 602:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
 606:	95 ff       	sbrs	r25, 5
 608:	fc cf       	rjmp	.-8      	; 0x602 <usart_transmit>
	UDR0 = tx_data;
 60a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 60e:	08 95       	ret

00000610 <__fixunssfsi>:
 610:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__fp_splitA>
 614:	88 f0       	brcs	.+34     	; 0x638 <__fixunssfsi+0x28>
 616:	9f 57       	subi	r25, 0x7F	; 127
 618:	98 f0       	brcs	.+38     	; 0x640 <__fixunssfsi+0x30>
 61a:	b9 2f       	mov	r27, r25
 61c:	99 27       	eor	r25, r25
 61e:	b7 51       	subi	r27, 0x17	; 23
 620:	b0 f0       	brcs	.+44     	; 0x64e <__fixunssfsi+0x3e>
 622:	e1 f0       	breq	.+56     	; 0x65c <__fixunssfsi+0x4c>
 624:	66 0f       	add	r22, r22
 626:	77 1f       	adc	r23, r23
 628:	88 1f       	adc	r24, r24
 62a:	99 1f       	adc	r25, r25
 62c:	1a f0       	brmi	.+6      	; 0x634 <__fixunssfsi+0x24>
 62e:	ba 95       	dec	r27
 630:	c9 f7       	brne	.-14     	; 0x624 <__fixunssfsi+0x14>
 632:	14 c0       	rjmp	.+40     	; 0x65c <__fixunssfsi+0x4c>
 634:	b1 30       	cpi	r27, 0x01	; 1
 636:	91 f0       	breq	.+36     	; 0x65c <__fixunssfsi+0x4c>
 638:	0e 94 96 03 	call	0x72c	; 0x72c <__fp_zero>
 63c:	b1 e0       	ldi	r27, 0x01	; 1
 63e:	08 95       	ret
 640:	0c 94 96 03 	jmp	0x72c	; 0x72c <__fp_zero>
 644:	67 2f       	mov	r22, r23
 646:	78 2f       	mov	r23, r24
 648:	88 27       	eor	r24, r24
 64a:	b8 5f       	subi	r27, 0xF8	; 248
 64c:	39 f0       	breq	.+14     	; 0x65c <__fixunssfsi+0x4c>
 64e:	b9 3f       	cpi	r27, 0xF9	; 249
 650:	cc f3       	brlt	.-14     	; 0x644 <__fixunssfsi+0x34>
 652:	86 95       	lsr	r24
 654:	77 95       	ror	r23
 656:	67 95       	ror	r22
 658:	b3 95       	inc	r27
 65a:	d9 f7       	brne	.-10     	; 0x652 <__fixunssfsi+0x42>
 65c:	3e f4       	brtc	.+14     	; 0x66c <__fixunssfsi+0x5c>
 65e:	90 95       	com	r25
 660:	80 95       	com	r24
 662:	70 95       	com	r23
 664:	61 95       	neg	r22
 666:	7f 4f       	sbci	r23, 0xFF	; 255
 668:	8f 4f       	sbci	r24, 0xFF	; 255
 66a:	9f 4f       	sbci	r25, 0xFF	; 255
 66c:	08 95       	ret

0000066e <__floatunsisf>:
 66e:	e8 94       	clt
 670:	09 c0       	rjmp	.+18     	; 0x684 <__floatsisf+0x12>

00000672 <__floatsisf>:
 672:	97 fb       	bst	r25, 7
 674:	3e f4       	brtc	.+14     	; 0x684 <__floatsisf+0x12>
 676:	90 95       	com	r25
 678:	80 95       	com	r24
 67a:	70 95       	com	r23
 67c:	61 95       	neg	r22
 67e:	7f 4f       	sbci	r23, 0xFF	; 255
 680:	8f 4f       	sbci	r24, 0xFF	; 255
 682:	9f 4f       	sbci	r25, 0xFF	; 255
 684:	99 23       	and	r25, r25
 686:	a9 f0       	breq	.+42     	; 0x6b2 <__floatsisf+0x40>
 688:	f9 2f       	mov	r31, r25
 68a:	96 e9       	ldi	r25, 0x96	; 150
 68c:	bb 27       	eor	r27, r27
 68e:	93 95       	inc	r25
 690:	f6 95       	lsr	r31
 692:	87 95       	ror	r24
 694:	77 95       	ror	r23
 696:	67 95       	ror	r22
 698:	b7 95       	ror	r27
 69a:	f1 11       	cpse	r31, r1
 69c:	f8 cf       	rjmp	.-16     	; 0x68e <__floatsisf+0x1c>
 69e:	fa f4       	brpl	.+62     	; 0x6de <__floatsisf+0x6c>
 6a0:	bb 0f       	add	r27, r27
 6a2:	11 f4       	brne	.+4      	; 0x6a8 <__floatsisf+0x36>
 6a4:	60 ff       	sbrs	r22, 0
 6a6:	1b c0       	rjmp	.+54     	; 0x6de <__floatsisf+0x6c>
 6a8:	6f 5f       	subi	r22, 0xFF	; 255
 6aa:	7f 4f       	sbci	r23, 0xFF	; 255
 6ac:	8f 4f       	sbci	r24, 0xFF	; 255
 6ae:	9f 4f       	sbci	r25, 0xFF	; 255
 6b0:	16 c0       	rjmp	.+44     	; 0x6de <__floatsisf+0x6c>
 6b2:	88 23       	and	r24, r24
 6b4:	11 f0       	breq	.+4      	; 0x6ba <__floatsisf+0x48>
 6b6:	96 e9       	ldi	r25, 0x96	; 150
 6b8:	11 c0       	rjmp	.+34     	; 0x6dc <__floatsisf+0x6a>
 6ba:	77 23       	and	r23, r23
 6bc:	21 f0       	breq	.+8      	; 0x6c6 <__floatsisf+0x54>
 6be:	9e e8       	ldi	r25, 0x8E	; 142
 6c0:	87 2f       	mov	r24, r23
 6c2:	76 2f       	mov	r23, r22
 6c4:	05 c0       	rjmp	.+10     	; 0x6d0 <__floatsisf+0x5e>
 6c6:	66 23       	and	r22, r22
 6c8:	71 f0       	breq	.+28     	; 0x6e6 <__floatsisf+0x74>
 6ca:	96 e8       	ldi	r25, 0x86	; 134
 6cc:	86 2f       	mov	r24, r22
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	60 e0       	ldi	r22, 0x00	; 0
 6d2:	2a f0       	brmi	.+10     	; 0x6de <__floatsisf+0x6c>
 6d4:	9a 95       	dec	r25
 6d6:	66 0f       	add	r22, r22
 6d8:	77 1f       	adc	r23, r23
 6da:	88 1f       	adc	r24, r24
 6dc:	da f7       	brpl	.-10     	; 0x6d4 <__floatsisf+0x62>
 6de:	88 0f       	add	r24, r24
 6e0:	96 95       	lsr	r25
 6e2:	87 95       	ror	r24
 6e4:	97 f9       	bld	r25, 7
 6e6:	08 95       	ret

000006e8 <__fp_split3>:
 6e8:	57 fd       	sbrc	r21, 7
 6ea:	90 58       	subi	r25, 0x80	; 128
 6ec:	44 0f       	add	r20, r20
 6ee:	55 1f       	adc	r21, r21
 6f0:	59 f0       	breq	.+22     	; 0x708 <__fp_splitA+0x10>
 6f2:	5f 3f       	cpi	r21, 0xFF	; 255
 6f4:	71 f0       	breq	.+28     	; 0x712 <__fp_splitA+0x1a>
 6f6:	47 95       	ror	r20

000006f8 <__fp_splitA>:
 6f8:	88 0f       	add	r24, r24
 6fa:	97 fb       	bst	r25, 7
 6fc:	99 1f       	adc	r25, r25
 6fe:	61 f0       	breq	.+24     	; 0x718 <__fp_splitA+0x20>
 700:	9f 3f       	cpi	r25, 0xFF	; 255
 702:	79 f0       	breq	.+30     	; 0x722 <__fp_splitA+0x2a>
 704:	87 95       	ror	r24
 706:	08 95       	ret
 708:	12 16       	cp	r1, r18
 70a:	13 06       	cpc	r1, r19
 70c:	14 06       	cpc	r1, r20
 70e:	55 1f       	adc	r21, r21
 710:	f2 cf       	rjmp	.-28     	; 0x6f6 <__fp_split3+0xe>
 712:	46 95       	lsr	r20
 714:	f1 df       	rcall	.-30     	; 0x6f8 <__fp_splitA>
 716:	08 c0       	rjmp	.+16     	; 0x728 <__fp_splitA+0x30>
 718:	16 16       	cp	r1, r22
 71a:	17 06       	cpc	r1, r23
 71c:	18 06       	cpc	r1, r24
 71e:	99 1f       	adc	r25, r25
 720:	f1 cf       	rjmp	.-30     	; 0x704 <__fp_splitA+0xc>
 722:	86 95       	lsr	r24
 724:	71 05       	cpc	r23, r1
 726:	61 05       	cpc	r22, r1
 728:	08 94       	sec
 72a:	08 95       	ret

0000072c <__fp_zero>:
 72c:	e8 94       	clt

0000072e <__fp_szero>:
 72e:	bb 27       	eor	r27, r27
 730:	66 27       	eor	r22, r22
 732:	77 27       	eor	r23, r23
 734:	cb 01       	movw	r24, r22
 736:	97 f9       	bld	r25, 7
 738:	08 95       	ret

0000073a <__gesf2>:
 73a:	0e 94 a2 03 	call	0x744	; 0x744 <__fp_cmp>
 73e:	08 f4       	brcc	.+2      	; 0x742 <__gesf2+0x8>
 740:	8f ef       	ldi	r24, 0xFF	; 255
 742:	08 95       	ret

00000744 <__fp_cmp>:
 744:	99 0f       	add	r25, r25
 746:	00 08       	sbc	r0, r0
 748:	55 0f       	add	r21, r21
 74a:	aa 0b       	sbc	r26, r26
 74c:	e0 e8       	ldi	r30, 0x80	; 128
 74e:	fe ef       	ldi	r31, 0xFE	; 254
 750:	16 16       	cp	r1, r22
 752:	17 06       	cpc	r1, r23
 754:	e8 07       	cpc	r30, r24
 756:	f9 07       	cpc	r31, r25
 758:	c0 f0       	brcs	.+48     	; 0x78a <__fp_cmp+0x46>
 75a:	12 16       	cp	r1, r18
 75c:	13 06       	cpc	r1, r19
 75e:	e4 07       	cpc	r30, r20
 760:	f5 07       	cpc	r31, r21
 762:	98 f0       	brcs	.+38     	; 0x78a <__fp_cmp+0x46>
 764:	62 1b       	sub	r22, r18
 766:	73 0b       	sbc	r23, r19
 768:	84 0b       	sbc	r24, r20
 76a:	95 0b       	sbc	r25, r21
 76c:	39 f4       	brne	.+14     	; 0x77c <__fp_cmp+0x38>
 76e:	0a 26       	eor	r0, r26
 770:	61 f0       	breq	.+24     	; 0x78a <__fp_cmp+0x46>
 772:	23 2b       	or	r18, r19
 774:	24 2b       	or	r18, r20
 776:	25 2b       	or	r18, r21
 778:	21 f4       	brne	.+8      	; 0x782 <__fp_cmp+0x3e>
 77a:	08 95       	ret
 77c:	0a 26       	eor	r0, r26
 77e:	09 f4       	brne	.+2      	; 0x782 <__fp_cmp+0x3e>
 780:	a1 40       	sbci	r26, 0x01	; 1
 782:	a6 95       	lsr	r26
 784:	8f ef       	ldi	r24, 0xFF	; 255
 786:	81 1d       	adc	r24, r1
 788:	81 1d       	adc	r24, r1
 78a:	08 95       	ret

0000078c <__umulhisi3>:
 78c:	a2 9f       	mul	r26, r18
 78e:	b0 01       	movw	r22, r0
 790:	b3 9f       	mul	r27, r19
 792:	c0 01       	movw	r24, r0
 794:	a3 9f       	mul	r26, r19
 796:	70 0d       	add	r23, r0
 798:	81 1d       	adc	r24, r1
 79a:	11 24       	eor	r1, r1
 79c:	91 1d       	adc	r25, r1
 79e:	b2 9f       	mul	r27, r18
 7a0:	70 0d       	add	r23, r0
 7a2:	81 1d       	adc	r24, r1
 7a4:	11 24       	eor	r1, r1
 7a6:	91 1d       	adc	r25, r1
 7a8:	08 95       	ret

000007aa <_exit>:
 7aa:	f8 94       	cli

000007ac <__stop_program>:
 7ac:	ff cf       	rjmp	.-2      	; 0x7ac <__stop_program>
