
inverted_pendulum_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000250  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000af3  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000885  00000000  00000000  00000e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ae  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00001b90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ff  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012c  00000000  00000000  000021b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000022df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_24>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a8 30       	cpi	r26, 0x08	; 8
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  9c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <setup_adc>:
void adc_interrupt_enabled(){
	ADCSRA |= (1<<ADIE);
}

void adc_interrupt_disbled(){
	ADCSRA &= ~(1<<ADIE);
  a4:	ec e7       	ldi	r30, 0x7C	; 124
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	90 81       	ld	r25, Z
  aa:	9f 73       	andi	r25, 0x3F	; 63
  ac:	90 83       	st	Z, r25
  ae:	90 81       	ld	r25, Z
  b0:	89 2b       	or	r24, r25
  b2:	80 83       	st	Z, r24
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <adc_prescaler>:
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	98 7f       	andi	r25, 0xF8	; 248
  ce:	90 83       	st	Z, r25
  d0:	90 81       	ld	r25, Z
  d2:	89 2b       	or	r24, r25
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <adc_interrupt_enabled>:
  d8:	ea e7       	ldi	r30, 0x7A	; 122
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	88 60       	ori	r24, 0x08	; 8
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <adc_freerun>:
}
void adc_freerun(){
	ADCSRA |= (1<<ADATE);
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	80 83       	st	Z, r24
  ee:	08 95       	ret

000000f0 <adc_start>:
}
void adc_start(){
	ADCSRA |= (1<<ADSC);		///< Starting Analog-to-digital conversion
  f0:	ea e7       	ldi	r30, 0x7A	; 122
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	80 83       	st	Z, r24
  fa:	08 95       	ret

000000fc <main>:
volatile uint8_t adc_switch_counter = 0;

int main(void)
{
	//	ADC
	setup_adc(0);
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 52 00 	call	0xa4	; 0xa4 <setup_adc>
	adc_interrupt_enabled();
 102:	0e 94 6c 00 	call	0xd8	; 0xd8 <adc_interrupt_enabled>
	adc_freerun();
 106:	0e 94 72 00 	call	0xe4	; 0xe4 <adc_freerun>
	adc_start();
 10a:	0e 94 78 00 	call	0xf0	; 0xf0 <adc_start>
	adc_prescaler(PRESCALER32);
 10e:	85 e0       	ldi	r24, 0x05	; 5
 110:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_prescaler>
	//	USART
	usart_init();
 114:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <usart_init>
	
	//	Remove later, for testing delta Time
	DDRD |= (1<<7);
 118:	8a b1       	in	r24, 0x0a	; 10
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	8a b9       	out	0x0a, r24	; 10
	
	sei();
 11e:	78 94       	sei
 120:	ff cf       	rjmp	.-2      	; 0x120 <main+0x24>

00000122 <__vector_24>:
		

    }
}

ISR(ADC_vect){
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	2f 93       	push	r18
 12e:	3f 93       	push	r19
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
	adc_val = (ADCH<<8)| ADCL;
 134:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	98 2f       	mov	r25, r24
 13c:	88 27       	eor	r24, r24
 13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 142:	82 2b       	or	r24, r18
 144:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adc_val+0x1>
 148:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adc_val>
	adc_switch_counter++;
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTD ^= (1<<7);
 156:	8b b1       	in	r24, 0x0b	; 11
 158:	80 58       	subi	r24, 0x80	; 128
 15a:	8b b9       	out	0x0b, r24	; 11
	if(adc_switch_counter==ADC_SWITCH){
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 160:	82 30       	cpi	r24, 0x02	; 2
 162:	29 f5       	brne	.+74     	; 0x1ae <__vector_24+0x8c>
		
		//	Switch reading to other sensor
		if(sensor==H1_SENS){
 164:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <sensor>
 168:	81 11       	cpse	r24, r1
 16a:	10 c0       	rjmp	.+32     	; 0x18c <__vector_24+0x6a>
			sensor=H2_SENS;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <sensor>
			H1=TARGET-adc_val;
 172:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <adc_val>
 176:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <adc_val+0x1>
 17a:	8c eb       	ldi	r24, 0xBC	; 188
 17c:	92 e0       	ldi	r25, 0x02	; 2
 17e:	82 1b       	sub	r24, r18
 180:	93 0b       	sbc	r25, r19
 182:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <H1+0x1>
 186:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <H1>
 18a:	0f c0       	rjmp	.+30     	; 0x1aa <__vector_24+0x88>
			}else{
			sensor=H2_SENS;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <sensor>
			H2=TARGET-adc_val;
 192:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <adc_val>
 196:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <adc_val+0x1>
 19a:	8c eb       	ldi	r24, 0xBC	; 188
 19c:	92 e0       	ldi	r25, 0x02	; 2
 19e:	82 1b       	sub	r24, r18
 1a0:	93 0b       	sbc	r25, r19
 1a2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <H2+0x1>
 1a6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <H2>
		}
		adc_switch_counter=0;
 1aa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	3f 91       	pop	r19
 1b4:	2f 91       	pop	r18
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <usart_init>:

#include "usart.h"

void usart_init()
{
	UBRR0 = 51; // 9600=103 baud @ 16 MHz, 51=9600 @ 8 MHz
 1c0:	83 e3       	ldi	r24, 0x33	; 51
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
 1c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
	//UBRR0L = 51;
	UCSR0B |= (1<<TXEN0) | (1<<RXEN0);// | (1 << RXCIE0);		//	Enable RX, TX
 1cc:	e1 ec       	ldi	r30, 0xC1	; 193
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	88 61       	ori	r24, 0x18	; 24
 1d4:	80 83       	st	Z, r24
 1d6:	08 95       	ret

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
