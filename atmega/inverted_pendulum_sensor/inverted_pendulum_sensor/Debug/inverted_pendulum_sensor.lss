
inverted_pendulum_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  00800100  00800100  00000a4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000132b  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fb  00000000  00000000  00001eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f0  00000000  00000000  000028aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  0000319c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062a  00000000  00000000  00003338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000880  00000000  00000000  00003962  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000041e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_24>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	ab 32       	cpi	r26, 0x2B	; 43
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 ca 03 	call	0x794	; 0x794 <main>
  9c:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <setup_adc>:
void adc_interrupt_enabled(){
	ADCSRA |= (1<<ADIE);
}

void adc_interrupt_disbled(){
	ADCSRA &= ~(1<<ADIE);
  a4:	ec e7       	ldi	r30, 0x7C	; 124
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	90 81       	ld	r25, Z
  aa:	9f 73       	andi	r25, 0x3F	; 63
  ac:	90 83       	st	Z, r25
  ae:	90 81       	ld	r25, Z
  b0:	89 2b       	or	r24, r25
  b2:	80 83       	st	Z, r24
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <adc_prescaler>:
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	98 7f       	andi	r25, 0xF8	; 248
  ce:	90 83       	st	Z, r25
  d0:	90 81       	ld	r25, Z
  d2:	89 2b       	or	r24, r25
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <set_channel>:
  d8:	ec e7       	ldi	r30, 0x7C	; 124
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	98 7f       	andi	r25, 0xF8	; 248
  e0:	90 83       	st	Z, r25
  e2:	90 81       	ld	r25, Z
  e4:	89 2b       	or	r24, r25
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <adc_interrupt_enabled>:
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <adc_freerun>:
}
void adc_freerun(){
	ADCSRA |= (1<<ADATE);
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 62       	ori	r24, 0x20	; 32
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <adc_start>:
}
void adc_start(){
	ADCSRA |= (1<<ADSC);		///< Starting Analog-to-digital conversion
 102:	ea e7       	ldi	r30, 0x7A	; 122
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <reset_counters>:
	usart_transmit(data);
	reset_counters();
}

void reset_counters(){
		adc_switch_counter = 0;							//	Already done at least two readings, keep going.
 10e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <adc_switch_counter>
		transmit_counter=0;		// Fix: flytta dessa två till en egen "reset_counters" ska ske efter transmits
 112:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 116:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 11a:	08 95       	ret

0000011c <send_motorspeed>:

	
}

void send_motorspeed()
{
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	1f 92       	push	r1
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t data;
	if(speed>=127){speed=126;}
 126:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <speed>
 12a:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <speed+0x1>
 12e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <speed+0x2>
 132:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <speed+0x3>
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	4e ef       	ldi	r20, 0xFE	; 254
 13c:	52 e4       	ldi	r21, 0x42	; 66
 13e:	0e 94 8a 04 	call	0x914	; 0x914 <__gesf2>
 142:	88 23       	and	r24, r24
 144:	64 f0       	brlt	.+24     	; 0x15e <send_motorspeed+0x42>
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac ef       	ldi	r26, 0xFC	; 252
 14c:	b2 e4       	ldi	r27, 0x42	; 66
 14e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <speed>
 152:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <speed+0x1>
 156:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <speed+0x2>
 15a:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <speed+0x3>
	data = speed;
 15e:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <speed>
 162:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <speed+0x1>
 166:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <speed+0x2>
 16a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <speed+0x3>
 16e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixunssfsi>
 172:	69 83       	std	Y+1, r22	; 0x01
	
	data|=motor_direction;
 174:	99 81       	ldd	r25, Y+1	; 0x01
 176:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <motor_direction>
 17a:	89 2b       	or	r24, r25
 17c:	89 83       	std	Y+1, r24	; 0x01
	/*if(data!=prev_transmit){
	usart_transmit(data);
	}
	prev_transmit=data;*/
	
	usart_transmit(data);
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	0e 94 ee 03 	call	0x7dc	; 0x7dc <usart_transmit>
	reset_counters();
 184:	0e 94 87 00 	call	0x10e	; 0x10e <reset_counters>
}
 188:	0f 90       	pop	r0
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <getDegree>:
	}
	*/
	
	/// TA bort ovan
	
	if(e1>e2){
 190:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <e1>
 194:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <e1+0x1>
 198:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <e2>
 19c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <e2+0x1>
 1a0:	82 17       	cp	r24, r18
 1a2:	93 07       	cpc	r25, r19
 1a4:	dc f5       	brge	.+118    	; 0x21c <getDegree+0x8c>
		//speed = -(P*e1);
		speed = abs(P*e1+Ki*(TARGET_1-(H1+H1_prev)/2)+Kd*(H1-H1_prev));//+Ki*(H1-H1_prev)*DELTA_TIME+Kd*(H1-H1_prev)*DELTA_TIME);			//	Negative multiplication due to the nature of TARGET-adc_val
 1a6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <H1>
 1aa:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <H1+0x1>
 1ae:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <H1_prev>
 1b2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <H1_prev+0x1>
 1b6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <e1>
 1ba:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <e1+0x1>
 1be:	23 e1       	ldi	r18, 0x13	; 19
 1c0:	28 9f       	mul	r18, r24
 1c2:	b0 01       	movw	r22, r0
 1c4:	29 9f       	mul	r18, r25
 1c6:	70 0d       	add	r23, r0
 1c8:	11 24       	eor	r1, r1
 1ca:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <H1>
 1ce:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <H1+0x1>
 1d2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <H1_prev>
 1d6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <H1_prev+0x1>
 1da:	28 1b       	sub	r18, r24
 1dc:	39 0b       	sbc	r19, r25
 1de:	4b e1       	ldi	r20, 0x1B	; 27
 1e0:	42 9f       	mul	r20, r18
 1e2:	c0 01       	movw	r24, r0
 1e4:	43 9f       	mul	r20, r19
 1e6:	90 0d       	add	r25, r0
 1e8:	11 24       	eor	r1, r1
 1ea:	68 0f       	add	r22, r24
 1ec:	79 1f       	adc	r23, r25
 1ee:	77 23       	and	r23, r23
 1f0:	1c f4       	brge	.+6      	; 0x1f8 <getDegree+0x68>
 1f2:	71 95       	neg	r23
 1f4:	61 95       	neg	r22
 1f6:	71 09       	sbc	r23, r1
 1f8:	07 2e       	mov	r0, r23
 1fa:	00 0c       	add	r0, r0
 1fc:	88 0b       	sbc	r24, r24
 1fe:	99 0b       	sbc	r25, r25
 200:	0e 94 26 04 	call	0x84c	; 0x84c <__floatsisf>
 204:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <speed>
 208:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <speed+0x1>
 20c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <speed+0x2>
 210:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <speed+0x3>
		/*double tmp = speed;
		tmp/=max_speed_e1;
		tmp*=125;
		speed = tmp;*/
		motor_direction = FORWARD;
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <motor_direction>
 21a:	39 c0       	rjmp	.+114    	; 0x28e <getDegree+0xfe>
	}else{											//	Leaning towards H1, need to drive backwards, e2 should be used
		speed = abs(P*e2+Ki*(TARGET_2-(H2+H2_prev)/2)+Kd*(H2-H2_prev));//+Ki*(H2-H2_prev)*DELTA_TIME+Kd*(H2-H2_prev)*DELTA_TIME);			//	Negative multiplication due to the nature of TARGET-adc_val
 21c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <H2>
 220:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <H2+0x1>
 224:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <H2_prev>
 228:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <H2_prev+0x1>
 22c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <e2>
 230:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <e2+0x1>
 234:	23 e1       	ldi	r18, 0x13	; 19
 236:	28 9f       	mul	r18, r24
 238:	b0 01       	movw	r22, r0
 23a:	29 9f       	mul	r18, r25
 23c:	70 0d       	add	r23, r0
 23e:	11 24       	eor	r1, r1
 240:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <H2>
 244:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <H2+0x1>
 248:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <H2_prev>
 24c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <H2_prev+0x1>
 250:	28 1b       	sub	r18, r24
 252:	39 0b       	sbc	r19, r25
 254:	4b e1       	ldi	r20, 0x1B	; 27
 256:	42 9f       	mul	r20, r18
 258:	c0 01       	movw	r24, r0
 25a:	43 9f       	mul	r20, r19
 25c:	90 0d       	add	r25, r0
 25e:	11 24       	eor	r1, r1
 260:	68 0f       	add	r22, r24
 262:	79 1f       	adc	r23, r25
 264:	77 23       	and	r23, r23
 266:	1c f4       	brge	.+6      	; 0x26e <getDegree+0xde>
 268:	71 95       	neg	r23
 26a:	61 95       	neg	r22
 26c:	71 09       	sbc	r23, r1
 26e:	07 2e       	mov	r0, r23
 270:	00 0c       	add	r0, r0
 272:	88 0b       	sbc	r24, r24
 274:	99 0b       	sbc	r25, r25
 276:	0e 94 26 04 	call	0x84c	; 0x84c <__floatsisf>
 27a:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <speed>
 27e:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <speed+0x1>
 282:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <speed+0x2>
 286:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <speed+0x3>
		/*double tmp = speed;
		tmp/=max_speed_e1;
		tmp*=125;
		speed = tmp;*/
		
		motor_direction = BACKWARDS;
 28a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <motor_direction>
	}
	
	send_motorspeed();
 28e:	0e 94 8e 00 	call	0x11c	; 0x11c <send_motorspeed>
 292:	08 95       	ret

00000294 <__vector_24>:
		PORTD ^= (1<<PORTD7);
		//usart_transmit(50);
	}
}

ISR(ADC_vect){
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	6f 93       	push	r22
 2a8:	7f 93       	push	r23
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
	
	adc_val = ADC;
 2b6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 2ba:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 2be:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <adc_val+0x1>
 2c2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <adc_val>
	adc_switch_counter++;
 2c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_switch_counter>
 2ca:	8f 5f       	subi	r24, 0xFF	; 255
 2cc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc_switch_counter>
	//	PORTD ^= (1<<7);							//	For testing deltaTime
	if(adc_switch_counter<ADC_SWITCH){				//	Read twice after change
 2d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_switch_counter>
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	08 f4       	brcc	.+2      	; 0x2da <__vector_24+0x46>
 2d8:	ae c0       	rjmp	.+348    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		return;
		}
	
	
	if(transmit_counter<=RASPBERRY_PI_DELAY){ // 250 tidigare
 2da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2e2:	03 97       	sbiw	r24, 0x03	; 3
 2e4:	50 f4       	brcc	.+20     	; 0x2fa <__vector_24+0x66>
		transmit_counter++;
 2e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		return;}
 2f8:	9e c0       	rjmp	.+316    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
	/*
	uint8_t tmp = adc_val-TARGET_1;	// REMOVE LATER; 
	usart_transmit(tmp);
	return;
	*/
	moving_avarage_counter++;											
 2fa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <moving_avarage_counter>
 2fe:	8f 5f       	subi	r24, 0xFF	; 255
 300:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <moving_avarage_counter>
	if(sensor==H1_SENS){
 304:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sensor>
 308:	81 11       	cpse	r24, r1
 30a:	4c c0       	rjmp	.+152    	; 0x3a4 <__vector_24+0x110>
		buffer+=adc_val;						//	Max value 65535 for uint16_t, FIX quit if buffer+adc_val>65535?
 30c:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <adc_val>
 310:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <adc_val+0x1>
 314:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <buffer>
 318:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <buffer+0x1>
 31c:	82 0f       	add	r24, r18
 31e:	93 1f       	adc	r25, r19
 320:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <buffer+0x1>
 324:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <buffer>
		if(moving_avarage_counter<MOVING_AVARAGE){
 328:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <moving_avarage_counter>
 32c:	8c 33       	cpi	r24, 0x3C	; 60
 32e:	08 f4       	brcc	.+2      	; 0x332 <__vector_24+0x9e>
 330:	82 c0       	rjmp	.+260    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			return;
		}else{
			H1_prev = H1;
 332:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <H1>
 336:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <H1+0x1>
 33a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <H1_prev+0x1>
 33e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <H1_prev>
			H1 = buffer/MOVING_AVARAGE;
 342:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <buffer>
 346:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <buffer+0x1>
 34a:	a9 e8       	ldi	r26, 0x89	; 137
 34c:	b8 e8       	ldi	r27, 0x88	; 136
 34e:	0e 94 c7 04 	call	0x98e	; 0x98e <__umulhisi3>
 352:	96 95       	lsr	r25
 354:	87 95       	ror	r24
 356:	92 95       	swap	r25
 358:	82 95       	swap	r24
 35a:	8f 70       	andi	r24, 0x0F	; 15
 35c:	89 27       	eor	r24, r25
 35e:	9f 70       	andi	r25, 0x0F	; 15
 360:	89 27       	eor	r24, r25
 362:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <H1+0x1>
 366:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <H1>
			e1=H1-TARGET_1;						//	e_1(t)
 36a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <H1>
 36e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <H1+0x1>
 372:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <TARGET_1>
 376:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <TARGET_1+0x1>
 37a:	82 1b       	sub	r24, r18
 37c:	93 0b       	sbc	r25, r19
 37e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <e1+0x1>
 382:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <e1>
			//	Switch reading to other sensor, H2
			set_channel(ADC1);						//	Set ADC channel to PA1
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
			sensor=H2_SENS;	
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <sensor>
			moving_avarage_counter=0;
 392:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <moving_avarage_counter>
			buffer=0;
 396:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <buffer+0x1>
 39a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <buffer>
			

			
			getDegree();
 39e:	0e 94 c8 00 	call	0x190	; 0x190 <getDegree>
 3a2:	49 c0       	rjmp	.+146    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			}
		}
		else{
			buffer+=adc_val;
 3a4:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <adc_val>
 3a8:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <adc_val+0x1>
 3ac:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <buffer>
 3b0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <buffer+0x1>
 3b4:	82 0f       	add	r24, r18
 3b6:	93 1f       	adc	r25, r19
 3b8:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <buffer+0x1>
 3bc:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <buffer>
			if(moving_avarage_counter<MOVING_AVARAGE){
 3c0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <moving_avarage_counter>
 3c4:	8c 33       	cpi	r24, 0x3C	; 60
 3c6:	b8 f1       	brcs	.+110    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
				return;
			}else{
				H2_prev = H2;
 3c8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <H2>
 3cc:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <H2+0x1>
 3d0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <H2_prev+0x1>
 3d4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <H2_prev>
				H2 = buffer/MOVING_AVARAGE;
 3d8:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <buffer>
 3dc:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <buffer+0x1>
 3e0:	a9 e8       	ldi	r26, 0x89	; 137
 3e2:	b8 e8       	ldi	r27, 0x88	; 136
 3e4:	0e 94 c7 04 	call	0x98e	; 0x98e <__umulhisi3>
 3e8:	96 95       	lsr	r25
 3ea:	87 95       	ror	r24
 3ec:	92 95       	swap	r25
 3ee:	82 95       	swap	r24
 3f0:	8f 70       	andi	r24, 0x0F	; 15
 3f2:	89 27       	eor	r24, r25
 3f4:	9f 70       	andi	r25, 0x0F	; 15
 3f6:	89 27       	eor	r24, r25
 3f8:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <H2+0x1>
 3fc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <H2>
				//e2=abs(TARGET_2-H2);						// e_2(t)
				e2= H2-TARGET_2;
 400:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <H2>
 404:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <H2+0x1>
 408:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <TARGET_2>
 40c:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <TARGET_2+0x1>
 410:	82 1b       	sub	r24, r18
 412:	93 0b       	sbc	r25, r19
 414:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <e2+0x1>
 418:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <e2>
				//	Switch reading to other sensor, H1
				set_channel(ADC0);						//	Set ADC channel to PA0
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
				sensor=H1_SENS;
 422:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <sensor>
				moving_avarage_counter=0;
 426:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <moving_avarage_counter>
				buffer=0;
 42a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <buffer+0x1>
 42e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <buffer>
				

				getDegree();
 432:	0e 94 c8 00 	call	0x190	; 0x190 <getDegree>
		}*/


		
	//}	
}
 436:	ff 91       	pop	r31
 438:	ef 91       	pop	r30
 43a:	bf 91       	pop	r27
 43c:	af 91       	pop	r26
 43e:	9f 91       	pop	r25
 440:	8f 91       	pop	r24
 442:	7f 91       	pop	r23
 444:	6f 91       	pop	r22
 446:	5f 91       	pop	r21
 448:	4f 91       	pop	r20
 44a:	3f 91       	pop	r19
 44c:	2f 91       	pop	r18
 44e:	0f 90       	pop	r0
 450:	0f be       	out	0x3f, r0	; 63
 452:	0f 90       	pop	r0
 454:	1f 90       	pop	r1
 456:	18 95       	reti

00000458 <startSeq>:
		adc_switch_counter = 0;							//	Already done at least two readings, keep going.
		transmit_counter=0;		// Fix: flytta dessa två till en egen "reset_counters" ska ske efter transmits
}

void startSeq(){
	while(!(PINA&(1<<PINA7)));
 458:	07 9b       	sbis	0x00, 7	; 0
 45a:	fe cf       	rjmp	.-4      	; 0x458 <startSeq>
	//Ta en miljard värden
	int buffer = 0;
	uint8_t nbr_avg = 10;
	uint8_t delay_time = 5;
	
	H1_MIN = ADC;
 45c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 460:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 464:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <H1_MIN+0x1>
 468:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <H1_MIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 46c:	2f ef       	ldi	r18, 0xFF	; 255
 46e:	89 ef       	ldi	r24, 0xF9	; 249
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	21 50       	subi	r18, 0x01	; 1
 474:	80 40       	sbci	r24, 0x00	; 0
 476:	90 40       	sbci	r25, 0x00	; 0
 478:	e1 f7       	brne	.-8      	; 0x472 <startSeq+0x1a>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <startSeq+0x24>
 47c:	00 00       	nop
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 47e:	20 e0       	ldi	r18, 0x00	; 0
 480:	30 e0       	ldi	r19, 0x00	; 0
}

void startSeq(){
	while(!(PINA&(1<<PINA7)));
	//Ta en miljard värden
	int buffer = 0;
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t nbr_avg = 10;
	uint8_t delay_time = 5;
	
	H1_MIN = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 486:	0e c0       	rjmp	.+28     	; 0x4a4 <startSeq+0x4c>
		buffer+=ADC;
 488:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 48c:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 490:	84 0f       	add	r24, r20
 492:	95 1f       	adc	r25, r21
 494:	ef e1       	ldi	r30, 0x1F	; 31
 496:	fe e4       	ldi	r31, 0x4E	; 78
 498:	31 97       	sbiw	r30, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <startSeq+0x40>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <startSeq+0x46>
 49e:	00 00       	nop
	uint8_t nbr_avg = 10;
	uint8_t delay_time = 5;
	
	H1_MIN = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 4a0:	2f 5f       	subi	r18, 0xFF	; 255
 4a2:	3f 4f       	sbci	r19, 0xFF	; 255
 4a4:	2a 30       	cpi	r18, 0x0A	; 10
 4a6:	31 05       	cpc	r19, r1
 4a8:	7c f3       	brlt	.-34     	; 0x488 <startSeq+0x30>
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H1_MIN = buffer/nbr_avg;
 4aa:	6a e0       	ldi	r22, 0x0A	; 10
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	0e 94 b3 04 	call	0x966	; 0x966 <__divmodhi4>
 4b2:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <H1_MIN+0x1>
 4b6:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <H1_MIN>
	buffer=0;
	set_channel(ADC1);
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
 4c0:	ff ef       	ldi	r31, 0xFF	; 255
 4c2:	29 ef       	ldi	r18, 0xF9	; 249
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	f1 50       	subi	r31, 0x01	; 1
 4c8:	20 40       	sbci	r18, 0x00	; 0
 4ca:	80 40       	sbci	r24, 0x00	; 0
 4cc:	e1 f7       	brne	.-8      	; 0x4c6 <startSeq+0x6e>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <startSeq+0x78>
 4d0:	00 00       	nop
	_delay_ms(20);
	
	H2_MAX = ADC;
 4d2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 4d6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 4da:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <H2_MAX+0x1>
 4de:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <H2_MAX>
 4e2:	9f ef       	ldi	r25, 0xFF	; 255
 4e4:	e9 ef       	ldi	r30, 0xF9	; 249
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	91 50       	subi	r25, 0x01	; 1
 4ea:	e0 40       	sbci	r30, 0x00	; 0
 4ec:	f0 40       	sbci	r31, 0x00	; 0
 4ee:	e1 f7       	brne	.-8      	; 0x4e8 <startSeq+0x90>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <startSeq+0x9a>
 4f2:	00 00       	nop
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 4f4:	20 e0       	ldi	r18, 0x00	; 0
 4f6:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i<nbr_avg; i++){
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H1_MIN = buffer/nbr_avg;
	buffer=0;
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	90 e0       	ldi	r25, 0x00	; 0
	set_channel(ADC1);
	_delay_ms(20);
	
	H2_MAX = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 4fc:	0e c0       	rjmp	.+28     	; 0x51a <startSeq+0xc2>
		buffer+=ADC;
 4fe:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 502:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 506:	84 0f       	add	r24, r20
 508:	95 1f       	adc	r25, r21
 50a:	ef e1       	ldi	r30, 0x1F	; 31
 50c:	fe e4       	ldi	r31, 0x4E	; 78
 50e:	31 97       	sbiw	r30, 0x01	; 1
 510:	f1 f7       	brne	.-4      	; 0x50e <startSeq+0xb6>
 512:	00 c0       	rjmp	.+0      	; 0x514 <startSeq+0xbc>
 514:	00 00       	nop
	set_channel(ADC1);
	_delay_ms(20);
	
	H2_MAX = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 516:	2f 5f       	subi	r18, 0xFF	; 255
 518:	3f 4f       	sbci	r19, 0xFF	; 255
 51a:	2a 30       	cpi	r18, 0x0A	; 10
 51c:	31 05       	cpc	r19, r1
 51e:	7c f3       	brlt	.-34     	; 0x4fe <startSeq+0xa6>
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H2_MAX = buffer/nbr_avg;
 520:	6a e0       	ldi	r22, 0x0A	; 10
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	0e 94 b3 04 	call	0x966	; 0x966 <__divmodhi4>
 528:	70 93 28 01 	sts	0x0128, r23	; 0x800128 <H2_MAX+0x1>
 52c:	60 93 27 01 	sts	0x0127, r22	; 0x800127 <H2_MAX>
 530:	ff ef       	ldi	r31, 0xFF	; 255
 532:	29 ef       	ldi	r18, 0xF9	; 249
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	f1 50       	subi	r31, 0x01	; 1
 538:	20 40       	sbci	r18, 0x00	; 0
 53a:	80 40       	sbci	r24, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <startSeq+0xde>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <startSeq+0xe8>
 540:	00 00       	nop
 542:	9f ef       	ldi	r25, 0xFF	; 255
 544:	e9 e6       	ldi	r30, 0x69	; 105
 546:	f8 e1       	ldi	r31, 0x18	; 24
 548:	91 50       	subi	r25, 0x01	; 1
 54a:	e0 40       	sbci	r30, 0x00	; 0
 54c:	f0 40       	sbci	r31, 0x00	; 0
 54e:	e1 f7       	brne	.-8      	; 0x548 <startSeq+0xf0>
 550:	00 c0       	rjmp	.+0      	; 0x552 <startSeq+0xfa>
 552:	00 00       	nop
	_delay_ms(20);
	
	
	
	_delay_ms(500);
	while(!(PINA&(1<<PINA7)));
 554:	07 9b       	sbis	0x00, 7	; 0
 556:	fe cf       	rjmp	.-4      	; 0x554 <startSeq+0xfc>
	
	
	H2_MIN = ADC;
 558:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 55c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 560:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <H2_MIN+0x1>
 564:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <H2_MIN>
 568:	2f ef       	ldi	r18, 0xFF	; 255
 56a:	89 ef       	ldi	r24, 0xF9	; 249
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	21 50       	subi	r18, 0x01	; 1
 570:	80 40       	sbci	r24, 0x00	; 0
 572:	90 40       	sbci	r25, 0x00	; 0
 574:	e1 f7       	brne	.-8      	; 0x56e <startSeq+0x116>
 576:	00 c0       	rjmp	.+0      	; 0x578 <startSeq+0x120>
 578:	00 00       	nop
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 57a:	20 e0       	ldi	r18, 0x00	; 0
 57c:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i<nbr_avg; i++){
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H2_MAX = buffer/nbr_avg;
	buffer=0;
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	90 e0       	ldi	r25, 0x00	; 0
	while(!(PINA&(1<<PINA7)));
	
	
	H2_MIN = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 582:	0e c0       	rjmp	.+28     	; 0x5a0 <startSeq+0x148>
		buffer+=ADC;
 584:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 588:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 58c:	84 0f       	add	r24, r20
 58e:	95 1f       	adc	r25, r21
 590:	ef e1       	ldi	r30, 0x1F	; 31
 592:	fe e4       	ldi	r31, 0x4E	; 78
 594:	31 97       	sbiw	r30, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <startSeq+0x13c>
 598:	00 c0       	rjmp	.+0      	; 0x59a <startSeq+0x142>
 59a:	00 00       	nop
	while(!(PINA&(1<<PINA7)));
	
	
	H2_MIN = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 59c:	2f 5f       	subi	r18, 0xFF	; 255
 59e:	3f 4f       	sbci	r19, 0xFF	; 255
 5a0:	2a 30       	cpi	r18, 0x0A	; 10
 5a2:	31 05       	cpc	r19, r1
 5a4:	7c f3       	brlt	.-34     	; 0x584 <startSeq+0x12c>
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H2_MIN = buffer/nbr_avg;
 5a6:	6a e0       	ldi	r22, 0x0A	; 10
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	0e 94 b3 04 	call	0x966	; 0x966 <__divmodhi4>
 5ae:	70 93 20 01 	sts	0x0120, r23	; 0x800120 <H2_MIN+0x1>
 5b2:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <H2_MIN>
	buffer=0;
	set_channel(ADC0);
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
 5bc:	ff ef       	ldi	r31, 0xFF	; 255
 5be:	29 ef       	ldi	r18, 0xF9	; 249
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	f1 50       	subi	r31, 0x01	; 1
 5c4:	20 40       	sbci	r18, 0x00	; 0
 5c6:	80 40       	sbci	r24, 0x00	; 0
 5c8:	e1 f7       	brne	.-8      	; 0x5c2 <startSeq+0x16a>
 5ca:	00 c0       	rjmp	.+0      	; 0x5cc <startSeq+0x174>
 5cc:	00 00       	nop
	_delay_ms(20);
	
	
	H1_MAX = ADC;
 5ce:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 5d2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 5d6:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <H1_MAX+0x1>
 5da:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <H1_MAX>
 5de:	9f ef       	ldi	r25, 0xFF	; 255
 5e0:	e9 ef       	ldi	r30, 0xF9	; 249
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	91 50       	subi	r25, 0x01	; 1
 5e6:	e0 40       	sbci	r30, 0x00	; 0
 5e8:	f0 40       	sbci	r31, 0x00	; 0
 5ea:	e1 f7       	brne	.-8      	; 0x5e4 <startSeq+0x18c>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <startSeq+0x196>
 5ee:	00 00       	nop
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 5f0:	20 e0       	ldi	r18, 0x00	; 0
 5f2:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i<nbr_avg; i++){
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H2_MIN = buffer/nbr_avg;
	buffer=0;
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(20);
	
	
	H1_MAX = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 5f8:	0e c0       	rjmp	.+28     	; 0x616 <startSeq+0x1be>
		buffer+=ADC;
 5fa:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 5fe:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 602:	84 0f       	add	r24, r20
 604:	95 1f       	adc	r25, r21
 606:	ef e1       	ldi	r30, 0x1F	; 31
 608:	fe e4       	ldi	r31, 0x4E	; 78
 60a:	31 97       	sbiw	r30, 0x01	; 1
 60c:	f1 f7       	brne	.-4      	; 0x60a <startSeq+0x1b2>
 60e:	00 c0       	rjmp	.+0      	; 0x610 <startSeq+0x1b8>
 610:	00 00       	nop
	_delay_ms(20);
	
	
	H1_MAX = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 612:	2f 5f       	subi	r18, 0xFF	; 255
 614:	3f 4f       	sbci	r19, 0xFF	; 255
 616:	2a 30       	cpi	r18, 0x0A	; 10
 618:	31 05       	cpc	r19, r1
 61a:	7c f3       	brlt	.-34     	; 0x5fa <startSeq+0x1a2>
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H1_MAX = buffer/nbr_avg;
 61c:	6a e0       	ldi	r22, 0x0A	; 10
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	0e 94 b3 04 	call	0x966	; 0x966 <__divmodhi4>
 624:	70 93 2a 01 	sts	0x012A, r23	; 0x80012a <H1_MAX+0x1>
 628:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <H1_MAX>
 62c:	ff ef       	ldi	r31, 0xFF	; 255
 62e:	29 ef       	ldi	r18, 0xF9	; 249
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	f1 50       	subi	r31, 0x01	; 1
 634:	20 40       	sbci	r18, 0x00	; 0
 636:	80 40       	sbci	r24, 0x00	; 0
 638:	e1 f7       	brne	.-8      	; 0x632 <startSeq+0x1da>
 63a:	00 c0       	rjmp	.+0      	; 0x63c <startSeq+0x1e4>
 63c:	00 00       	nop
 63e:	9f ef       	ldi	r25, 0xFF	; 255
 640:	e9 e6       	ldi	r30, 0x69	; 105
 642:	f8 e1       	ldi	r31, 0x18	; 24
 644:	91 50       	subi	r25, 0x01	; 1
 646:	e0 40       	sbci	r30, 0x00	; 0
 648:	f0 40       	sbci	r31, 0x00	; 0
 64a:	e1 f7       	brne	.-8      	; 0x644 <startSeq+0x1ec>
 64c:	00 c0       	rjmp	.+0      	; 0x64e <startSeq+0x1f6>
 64e:	00 00       	nop
	buffer=0;
	_delay_ms(20);
		
	
	_delay_ms(500);
	while(!(PINA&(1<<PINA7)));
 650:	07 9b       	sbis	0x00, 7	; 0
 652:	fe cf       	rjmp	.-4      	; 0x650 <startSeq+0x1f8>
	
	
	TARGET_1 = ADC;
 654:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 658:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 65c:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <TARGET_1+0x1>
 660:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <TARGET_1>
 664:	2f ef       	ldi	r18, 0xFF	; 255
 666:	89 ef       	ldi	r24, 0xF9	; 249
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	21 50       	subi	r18, 0x01	; 1
 66c:	80 40       	sbci	r24, 0x00	; 0
 66e:	90 40       	sbci	r25, 0x00	; 0
 670:	e1 f7       	brne	.-8      	; 0x66a <startSeq+0x212>
 672:	00 c0       	rjmp	.+0      	; 0x674 <startSeq+0x21c>
 674:	00 00       	nop
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 676:	20 e0       	ldi	r18, 0x00	; 0
 678:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i<nbr_avg; i++){
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H1_MAX = buffer/nbr_avg;
	buffer=0;
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	90 e0       	ldi	r25, 0x00	; 0
	while(!(PINA&(1<<PINA7)));
	
	
	TARGET_1 = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 67e:	0e c0       	rjmp	.+28     	; 0x69c <startSeq+0x244>
		buffer+=ADC;
 680:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 684:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 688:	84 0f       	add	r24, r20
 68a:	95 1f       	adc	r25, r21
 68c:	ef e1       	ldi	r30, 0x1F	; 31
 68e:	fe e4       	ldi	r31, 0x4E	; 78
 690:	31 97       	sbiw	r30, 0x01	; 1
 692:	f1 f7       	brne	.-4      	; 0x690 <startSeq+0x238>
 694:	00 c0       	rjmp	.+0      	; 0x696 <startSeq+0x23e>
 696:	00 00       	nop
	while(!(PINA&(1<<PINA7)));
	
	
	TARGET_1 = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 698:	2f 5f       	subi	r18, 0xFF	; 255
 69a:	3f 4f       	sbci	r19, 0xFF	; 255
 69c:	2a 30       	cpi	r18, 0x0A	; 10
 69e:	31 05       	cpc	r19, r1
 6a0:	7c f3       	brlt	.-34     	; 0x680 <startSeq+0x228>
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	TARGET_1 = buffer/nbr_avg;
 6a2:	6a e0       	ldi	r22, 0x0A	; 10
 6a4:	70 e0       	ldi	r23, 0x00	; 0
 6a6:	0e 94 b3 04 	call	0x966	; 0x966 <__divmodhi4>
 6aa:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <TARGET_1+0x1>
 6ae:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <TARGET_1>
	buffer=0;
	set_channel(ADC1);
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
 6b8:	ff ef       	ldi	r31, 0xFF	; 255
 6ba:	29 ef       	ldi	r18, 0xF9	; 249
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	f1 50       	subi	r31, 0x01	; 1
 6c0:	20 40       	sbci	r18, 0x00	; 0
 6c2:	80 40       	sbci	r24, 0x00	; 0
 6c4:	e1 f7       	brne	.-8      	; 0x6be <startSeq+0x266>
 6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <startSeq+0x270>
 6c8:	00 00       	nop
	_delay_ms(20);
	
	TARGET_2 = ADC;
 6ca:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 6ce:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 6d2:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <TARGET_2+0x1>
 6d6:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <TARGET_2>
 6da:	9f ef       	ldi	r25, 0xFF	; 255
 6dc:	e9 ef       	ldi	r30, 0xF9	; 249
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	91 50       	subi	r25, 0x01	; 1
 6e2:	e0 40       	sbci	r30, 0x00	; 0
 6e4:	f0 40       	sbci	r31, 0x00	; 0
 6e6:	e1 f7       	brne	.-8      	; 0x6e0 <startSeq+0x288>
 6e8:	00 c0       	rjmp	.+0      	; 0x6ea <startSeq+0x292>
 6ea:	00 00       	nop
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 6ec:	20 e0       	ldi	r18, 0x00	; 0
 6ee:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i<nbr_avg; i++){
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	TARGET_1 = buffer/nbr_avg;
	buffer=0;
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	90 e0       	ldi	r25, 0x00	; 0
	set_channel(ADC1);
	_delay_ms(20);
	
	TARGET_2 = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 6f4:	0e c0       	rjmp	.+28     	; 0x712 <startSeq+0x2ba>
		buffer+=ADC;
 6f6:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 6fa:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 6fe:	84 0f       	add	r24, r20
 700:	95 1f       	adc	r25, r21
 702:	ef e1       	ldi	r30, 0x1F	; 31
 704:	fe e4       	ldi	r31, 0x4E	; 78
 706:	31 97       	sbiw	r30, 0x01	; 1
 708:	f1 f7       	brne	.-4      	; 0x706 <startSeq+0x2ae>
 70a:	00 c0       	rjmp	.+0      	; 0x70c <startSeq+0x2b4>
 70c:	00 00       	nop
	set_channel(ADC1);
	_delay_ms(20);
	
	TARGET_2 = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 70e:	2f 5f       	subi	r18, 0xFF	; 255
 710:	3f 4f       	sbci	r19, 0xFF	; 255
 712:	2a 30       	cpi	r18, 0x0A	; 10
 714:	31 05       	cpc	r19, r1
 716:	7c f3       	brlt	.-34     	; 0x6f6 <startSeq+0x29e>
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	TARGET_2 = buffer/nbr_avg;
 718:	6a e0       	ldi	r22, 0x0A	; 10
 71a:	70 e0       	ldi	r23, 0x00	; 0
 71c:	0e 94 b3 04 	call	0x966	; 0x966 <__divmodhi4>
 720:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <TARGET_2+0x1>
 724:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <TARGET_2>
	buffer=0;
	set_channel(ADC0);
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
 72e:	ff ef       	ldi	r31, 0xFF	; 255
 730:	29 ef       	ldi	r18, 0xF9	; 249
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	f1 50       	subi	r31, 0x01	; 1
 736:	20 40       	sbci	r18, 0x00	; 0
 738:	80 40       	sbci	r24, 0x00	; 0
 73a:	e1 f7       	brne	.-8      	; 0x734 <startSeq+0x2dc>
 73c:	00 c0       	rjmp	.+0      	; 0x73e <startSeq+0x2e6>
 73e:	00 00       	nop
	_delay_ms(20);
		
	
	max_speed_e1 = abs(1*(TARGET_1-H1_MAX));		// FIX! FIND CORRECT VALUE FOR (H1-H1_prev)*DELTA_TIME+Kd*(H1-H1_prev)*DELTA_TIME). Measure what H1-H1_PREV could be at a maximum
 740:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <TARGET_1>
 744:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <TARGET_1+0x1>
 748:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <H1_MAX>
 74c:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <H1_MAX+0x1>
 750:	82 1b       	sub	r24, r18
 752:	93 0b       	sbc	r25, r19
 754:	9c 01       	movw	r18, r24
 756:	22 f4       	brpl	.+8      	; 0x760 <startSeq+0x308>
 758:	22 27       	eor	r18, r18
 75a:	33 27       	eor	r19, r19
 75c:	28 1b       	sub	r18, r24
 75e:	39 0b       	sbc	r19, r25
 760:	30 93 24 01 	sts	0x0124, r19	; 0x800124 <max_speed_e1+0x1>
 764:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <max_speed_e1>
	max_speed_e2 = abs(1*(TARGET_2-H2_MAX));		// FIX! FIND CORRECT VALUE FOR (H2-H2_prev)*DELTA_TIME+Kd*(H2-H2_prev)*DELTA_TIME). Measure what H1-H1_PREV could be at a maximum
 768:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <TARGET_2>
 76c:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <TARGET_2+0x1>
 770:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <H2_MAX>
 774:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <H2_MAX+0x1>
 778:	82 1b       	sub	r24, r18
 77a:	93 0b       	sbc	r25, r19
 77c:	9c 01       	movw	r18, r24
 77e:	22 f4       	brpl	.+8      	; 0x788 <startSeq+0x330>
 780:	22 27       	eor	r18, r18
 782:	33 27       	eor	r19, r19
 784:	28 1b       	sub	r18, r24
 786:	39 0b       	sbc	r19, r25
 788:	30 93 1c 01 	sts	0x011C, r19	; 0x80011c <max_speed_e2+0x1>
 78c:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <max_speed_e2>
	sei();
 790:	78 94       	sei
 792:	08 95       	ret

00000794 <main>:
void reset_counters();

int main(void)
{
	//	ADC
	setup_adc(0);
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	0e 94 52 00 	call	0xa4	; 0xa4 <setup_adc>
	adc_interrupt_enabled();
 79a:	0e 94 75 00 	call	0xea	; 0xea <adc_interrupt_enabled>
	adc_freerun();
 79e:	0e 94 7b 00 	call	0xf6	; 0xf6 <adc_freerun>
	adc_start();
 7a2:	0e 94 81 00 	call	0x102	; 0x102 <adc_start>
	adc_prescaler(PRESCALER128);
 7a6:	87 e0       	ldi	r24, 0x07	; 7
 7a8:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_prescaler>
	//	USART
	usart_init();
 7ac:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <usart_init>
	cli();
 7b0:	f8 94       	cli
	
	DDRD |= (1<<7);	//	Remove later, for testing delta Time
 7b2:	8a b1       	in	r24, 0x0a	; 10
 7b4:	80 68       	ori	r24, 0x80	; 128
 7b6:	8a b9       	out	0x0a, r24	; 10
	
	startSeq();
 7b8:	0e 94 2c 02 	call	0x458	; 0x458 <startSeq>
	
	//	REMOVE LATER
	
    while (1) 
    {
		PORTD ^= (1<<PORTD7);
 7bc:	8b b1       	in	r24, 0x0b	; 11
 7be:	80 58       	subi	r24, 0x80	; 128
 7c0:	8b b9       	out	0x0b, r24	; 11
 7c2:	fc cf       	rjmp	.-8      	; 0x7bc <main+0x28>

000007c4 <usart_init>:

#include "usart.h"

void usart_init()
{
	UBRR0 = 8; // 9600=103 baud @ 16 MHz, 51=9600 @ 8 MHz
 7c4:	88 e0       	ldi	r24, 0x08	; 8
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
 7cc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
	//UBRR0L = 51;
	UCSR0B |= (1<<TXEN0) | (1<<RXEN0);// | (1 << RXCIE0);		//	Enable RX, TX
 7d0:	e1 ec       	ldi	r30, 0xC1	; 193
 7d2:	f0 e0       	ldi	r31, 0x00	; 0
 7d4:	80 81       	ld	r24, Z
 7d6:	88 61       	ori	r24, 0x18	; 24
 7d8:	80 83       	st	Z, r24
 7da:	08 95       	ret

000007dc <usart_transmit>:
	usart_transmit(tmp);
}

void usart_transmit(uint8_t tx_data)
{
	while(!(UCSR0A & (1<<UDRE0))); //Buffer upptagen
 7dc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
 7e0:	95 ff       	sbrs	r25, 5
 7e2:	fc cf       	rjmp	.-8      	; 0x7dc <usart_transmit>
	UDR0 = tx_data;
 7e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 7e8:	08 95       	ret

000007ea <__fixunssfsi>:
 7ea:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__fp_splitA>
 7ee:	88 f0       	brcs	.+34     	; 0x812 <__EEPROM_REGION_LENGTH__+0x12>
 7f0:	9f 57       	subi	r25, 0x7F	; 127
 7f2:	98 f0       	brcs	.+38     	; 0x81a <__EEPROM_REGION_LENGTH__+0x1a>
 7f4:	b9 2f       	mov	r27, r25
 7f6:	99 27       	eor	r25, r25
 7f8:	b7 51       	subi	r27, 0x17	; 23
 7fa:	b0 f0       	brcs	.+44     	; 0x828 <__EEPROM_REGION_LENGTH__+0x28>
 7fc:	e1 f0       	breq	.+56     	; 0x836 <__EEPROM_REGION_LENGTH__+0x36>
 7fe:	66 0f       	add	r22, r22
 800:	77 1f       	adc	r23, r23
 802:	88 1f       	adc	r24, r24
 804:	99 1f       	adc	r25, r25
 806:	1a f0       	brmi	.+6      	; 0x80e <__EEPROM_REGION_LENGTH__+0xe>
 808:	ba 95       	dec	r27
 80a:	c9 f7       	brne	.-14     	; 0x7fe <__fixunssfsi+0x14>
 80c:	14 c0       	rjmp	.+40     	; 0x836 <__EEPROM_REGION_LENGTH__+0x36>
 80e:	b1 30       	cpi	r27, 0x01	; 1
 810:	91 f0       	breq	.+36     	; 0x836 <__EEPROM_REGION_LENGTH__+0x36>
 812:	0e 94 83 04 	call	0x906	; 0x906 <__fp_zero>
 816:	b1 e0       	ldi	r27, 0x01	; 1
 818:	08 95       	ret
 81a:	0c 94 83 04 	jmp	0x906	; 0x906 <__fp_zero>
 81e:	67 2f       	mov	r22, r23
 820:	78 2f       	mov	r23, r24
 822:	88 27       	eor	r24, r24
 824:	b8 5f       	subi	r27, 0xF8	; 248
 826:	39 f0       	breq	.+14     	; 0x836 <__EEPROM_REGION_LENGTH__+0x36>
 828:	b9 3f       	cpi	r27, 0xF9	; 249
 82a:	cc f3       	brlt	.-14     	; 0x81e <__EEPROM_REGION_LENGTH__+0x1e>
 82c:	86 95       	lsr	r24
 82e:	77 95       	ror	r23
 830:	67 95       	ror	r22
 832:	b3 95       	inc	r27
 834:	d9 f7       	brne	.-10     	; 0x82c <__EEPROM_REGION_LENGTH__+0x2c>
 836:	3e f4       	brtc	.+14     	; 0x846 <__EEPROM_REGION_LENGTH__+0x46>
 838:	90 95       	com	r25
 83a:	80 95       	com	r24
 83c:	70 95       	com	r23
 83e:	61 95       	neg	r22
 840:	7f 4f       	sbci	r23, 0xFF	; 255
 842:	8f 4f       	sbci	r24, 0xFF	; 255
 844:	9f 4f       	sbci	r25, 0xFF	; 255
 846:	08 95       	ret

00000848 <__floatunsisf>:
 848:	e8 94       	clt
 84a:	09 c0       	rjmp	.+18     	; 0x85e <__floatsisf+0x12>

0000084c <__floatsisf>:
 84c:	97 fb       	bst	r25, 7
 84e:	3e f4       	brtc	.+14     	; 0x85e <__floatsisf+0x12>
 850:	90 95       	com	r25
 852:	80 95       	com	r24
 854:	70 95       	com	r23
 856:	61 95       	neg	r22
 858:	7f 4f       	sbci	r23, 0xFF	; 255
 85a:	8f 4f       	sbci	r24, 0xFF	; 255
 85c:	9f 4f       	sbci	r25, 0xFF	; 255
 85e:	99 23       	and	r25, r25
 860:	a9 f0       	breq	.+42     	; 0x88c <__floatsisf+0x40>
 862:	f9 2f       	mov	r31, r25
 864:	96 e9       	ldi	r25, 0x96	; 150
 866:	bb 27       	eor	r27, r27
 868:	93 95       	inc	r25
 86a:	f6 95       	lsr	r31
 86c:	87 95       	ror	r24
 86e:	77 95       	ror	r23
 870:	67 95       	ror	r22
 872:	b7 95       	ror	r27
 874:	f1 11       	cpse	r31, r1
 876:	f8 cf       	rjmp	.-16     	; 0x868 <__floatsisf+0x1c>
 878:	fa f4       	brpl	.+62     	; 0x8b8 <__floatsisf+0x6c>
 87a:	bb 0f       	add	r27, r27
 87c:	11 f4       	brne	.+4      	; 0x882 <__floatsisf+0x36>
 87e:	60 ff       	sbrs	r22, 0
 880:	1b c0       	rjmp	.+54     	; 0x8b8 <__floatsisf+0x6c>
 882:	6f 5f       	subi	r22, 0xFF	; 255
 884:	7f 4f       	sbci	r23, 0xFF	; 255
 886:	8f 4f       	sbci	r24, 0xFF	; 255
 888:	9f 4f       	sbci	r25, 0xFF	; 255
 88a:	16 c0       	rjmp	.+44     	; 0x8b8 <__floatsisf+0x6c>
 88c:	88 23       	and	r24, r24
 88e:	11 f0       	breq	.+4      	; 0x894 <__floatsisf+0x48>
 890:	96 e9       	ldi	r25, 0x96	; 150
 892:	11 c0       	rjmp	.+34     	; 0x8b6 <__floatsisf+0x6a>
 894:	77 23       	and	r23, r23
 896:	21 f0       	breq	.+8      	; 0x8a0 <__floatsisf+0x54>
 898:	9e e8       	ldi	r25, 0x8E	; 142
 89a:	87 2f       	mov	r24, r23
 89c:	76 2f       	mov	r23, r22
 89e:	05 c0       	rjmp	.+10     	; 0x8aa <__floatsisf+0x5e>
 8a0:	66 23       	and	r22, r22
 8a2:	71 f0       	breq	.+28     	; 0x8c0 <__floatsisf+0x74>
 8a4:	96 e8       	ldi	r25, 0x86	; 134
 8a6:	86 2f       	mov	r24, r22
 8a8:	70 e0       	ldi	r23, 0x00	; 0
 8aa:	60 e0       	ldi	r22, 0x00	; 0
 8ac:	2a f0       	brmi	.+10     	; 0x8b8 <__floatsisf+0x6c>
 8ae:	9a 95       	dec	r25
 8b0:	66 0f       	add	r22, r22
 8b2:	77 1f       	adc	r23, r23
 8b4:	88 1f       	adc	r24, r24
 8b6:	da f7       	brpl	.-10     	; 0x8ae <__floatsisf+0x62>
 8b8:	88 0f       	add	r24, r24
 8ba:	96 95       	lsr	r25
 8bc:	87 95       	ror	r24
 8be:	97 f9       	bld	r25, 7
 8c0:	08 95       	ret

000008c2 <__fp_split3>:
 8c2:	57 fd       	sbrc	r21, 7
 8c4:	90 58       	subi	r25, 0x80	; 128
 8c6:	44 0f       	add	r20, r20
 8c8:	55 1f       	adc	r21, r21
 8ca:	59 f0       	breq	.+22     	; 0x8e2 <__fp_splitA+0x10>
 8cc:	5f 3f       	cpi	r21, 0xFF	; 255
 8ce:	71 f0       	breq	.+28     	; 0x8ec <__fp_splitA+0x1a>
 8d0:	47 95       	ror	r20

000008d2 <__fp_splitA>:
 8d2:	88 0f       	add	r24, r24
 8d4:	97 fb       	bst	r25, 7
 8d6:	99 1f       	adc	r25, r25
 8d8:	61 f0       	breq	.+24     	; 0x8f2 <__fp_splitA+0x20>
 8da:	9f 3f       	cpi	r25, 0xFF	; 255
 8dc:	79 f0       	breq	.+30     	; 0x8fc <__fp_splitA+0x2a>
 8de:	87 95       	ror	r24
 8e0:	08 95       	ret
 8e2:	12 16       	cp	r1, r18
 8e4:	13 06       	cpc	r1, r19
 8e6:	14 06       	cpc	r1, r20
 8e8:	55 1f       	adc	r21, r21
 8ea:	f2 cf       	rjmp	.-28     	; 0x8d0 <__fp_split3+0xe>
 8ec:	46 95       	lsr	r20
 8ee:	f1 df       	rcall	.-30     	; 0x8d2 <__fp_splitA>
 8f0:	08 c0       	rjmp	.+16     	; 0x902 <__fp_splitA+0x30>
 8f2:	16 16       	cp	r1, r22
 8f4:	17 06       	cpc	r1, r23
 8f6:	18 06       	cpc	r1, r24
 8f8:	99 1f       	adc	r25, r25
 8fa:	f1 cf       	rjmp	.-30     	; 0x8de <__fp_splitA+0xc>
 8fc:	86 95       	lsr	r24
 8fe:	71 05       	cpc	r23, r1
 900:	61 05       	cpc	r22, r1
 902:	08 94       	sec
 904:	08 95       	ret

00000906 <__fp_zero>:
 906:	e8 94       	clt

00000908 <__fp_szero>:
 908:	bb 27       	eor	r27, r27
 90a:	66 27       	eor	r22, r22
 90c:	77 27       	eor	r23, r23
 90e:	cb 01       	movw	r24, r22
 910:	97 f9       	bld	r25, 7
 912:	08 95       	ret

00000914 <__gesf2>:
 914:	0e 94 8f 04 	call	0x91e	; 0x91e <__fp_cmp>
 918:	08 f4       	brcc	.+2      	; 0x91c <__gesf2+0x8>
 91a:	8f ef       	ldi	r24, 0xFF	; 255
 91c:	08 95       	ret

0000091e <__fp_cmp>:
 91e:	99 0f       	add	r25, r25
 920:	00 08       	sbc	r0, r0
 922:	55 0f       	add	r21, r21
 924:	aa 0b       	sbc	r26, r26
 926:	e0 e8       	ldi	r30, 0x80	; 128
 928:	fe ef       	ldi	r31, 0xFE	; 254
 92a:	16 16       	cp	r1, r22
 92c:	17 06       	cpc	r1, r23
 92e:	e8 07       	cpc	r30, r24
 930:	f9 07       	cpc	r31, r25
 932:	c0 f0       	brcs	.+48     	; 0x964 <__fp_cmp+0x46>
 934:	12 16       	cp	r1, r18
 936:	13 06       	cpc	r1, r19
 938:	e4 07       	cpc	r30, r20
 93a:	f5 07       	cpc	r31, r21
 93c:	98 f0       	brcs	.+38     	; 0x964 <__fp_cmp+0x46>
 93e:	62 1b       	sub	r22, r18
 940:	73 0b       	sbc	r23, r19
 942:	84 0b       	sbc	r24, r20
 944:	95 0b       	sbc	r25, r21
 946:	39 f4       	brne	.+14     	; 0x956 <__fp_cmp+0x38>
 948:	0a 26       	eor	r0, r26
 94a:	61 f0       	breq	.+24     	; 0x964 <__fp_cmp+0x46>
 94c:	23 2b       	or	r18, r19
 94e:	24 2b       	or	r18, r20
 950:	25 2b       	or	r18, r21
 952:	21 f4       	brne	.+8      	; 0x95c <__fp_cmp+0x3e>
 954:	08 95       	ret
 956:	0a 26       	eor	r0, r26
 958:	09 f4       	brne	.+2      	; 0x95c <__fp_cmp+0x3e>
 95a:	a1 40       	sbci	r26, 0x01	; 1
 95c:	a6 95       	lsr	r26
 95e:	8f ef       	ldi	r24, 0xFF	; 255
 960:	81 1d       	adc	r24, r1
 962:	81 1d       	adc	r24, r1
 964:	08 95       	ret

00000966 <__divmodhi4>:
 966:	97 fb       	bst	r25, 7
 968:	07 2e       	mov	r0, r23
 96a:	16 f4       	brtc	.+4      	; 0x970 <__divmodhi4+0xa>
 96c:	00 94       	com	r0
 96e:	07 d0       	rcall	.+14     	; 0x97e <__divmodhi4_neg1>
 970:	77 fd       	sbrc	r23, 7
 972:	09 d0       	rcall	.+18     	; 0x986 <__divmodhi4_neg2>
 974:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__udivmodhi4>
 978:	07 fc       	sbrc	r0, 7
 97a:	05 d0       	rcall	.+10     	; 0x986 <__divmodhi4_neg2>
 97c:	3e f4       	brtc	.+14     	; 0x98c <__divmodhi4_exit>

0000097e <__divmodhi4_neg1>:
 97e:	90 95       	com	r25
 980:	81 95       	neg	r24
 982:	9f 4f       	sbci	r25, 0xFF	; 255
 984:	08 95       	ret

00000986 <__divmodhi4_neg2>:
 986:	70 95       	com	r23
 988:	61 95       	neg	r22
 98a:	7f 4f       	sbci	r23, 0xFF	; 255

0000098c <__divmodhi4_exit>:
 98c:	08 95       	ret

0000098e <__umulhisi3>:
 98e:	a2 9f       	mul	r26, r18
 990:	b0 01       	movw	r22, r0
 992:	b3 9f       	mul	r27, r19
 994:	c0 01       	movw	r24, r0
 996:	a3 9f       	mul	r26, r19
 998:	70 0d       	add	r23, r0
 99a:	81 1d       	adc	r24, r1
 99c:	11 24       	eor	r1, r1
 99e:	91 1d       	adc	r25, r1
 9a0:	b2 9f       	mul	r27, r18
 9a2:	70 0d       	add	r23, r0
 9a4:	81 1d       	adc	r24, r1
 9a6:	11 24       	eor	r1, r1
 9a8:	91 1d       	adc	r25, r1
 9aa:	08 95       	ret

000009ac <__udivmodhi4>:
 9ac:	aa 1b       	sub	r26, r26
 9ae:	bb 1b       	sub	r27, r27
 9b0:	51 e1       	ldi	r21, 0x11	; 17
 9b2:	07 c0       	rjmp	.+14     	; 0x9c2 <__udivmodhi4_ep>

000009b4 <__udivmodhi4_loop>:
 9b4:	aa 1f       	adc	r26, r26
 9b6:	bb 1f       	adc	r27, r27
 9b8:	a6 17       	cp	r26, r22
 9ba:	b7 07       	cpc	r27, r23
 9bc:	10 f0       	brcs	.+4      	; 0x9c2 <__udivmodhi4_ep>
 9be:	a6 1b       	sub	r26, r22
 9c0:	b7 0b       	sbc	r27, r23

000009c2 <__udivmodhi4_ep>:
 9c2:	88 1f       	adc	r24, r24
 9c4:	99 1f       	adc	r25, r25
 9c6:	5a 95       	dec	r21
 9c8:	a9 f7       	brne	.-22     	; 0x9b4 <__udivmodhi4_loop>
 9ca:	80 95       	com	r24
 9cc:	90 95       	com	r25
 9ce:	bc 01       	movw	r22, r24
 9d0:	cd 01       	movw	r24, r26
 9d2:	08 95       	ret

000009d4 <_exit>:
 9d4:	f8 94       	cli

000009d6 <__stop_program>:
 9d6:	ff cf       	rjmp	.-2      	; 0x9d6 <__stop_program>
