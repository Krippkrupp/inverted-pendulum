
inverted_pendulum_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000d2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cb6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  00800100  00800100  00000d2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001352  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fc  00000000  00000000  000021b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f6  00000000  00000000  00002bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  000034a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062a  00000000  00000000  00003664  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e3  00000000  00000000  00003c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00004571  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_24>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	ab 32       	cpi	r26, 0x2B	; 43
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 31 04 	call	0x862	; 0x862 <main>
  9c:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <setup_adc>:
void adc_interrupt_enabled(){
	ADCSRA |= (1<<ADIE);
}

void adc_interrupt_disbled(){
	ADCSRA &= ~(1<<ADIE);
  a4:	ec e7       	ldi	r30, 0x7C	; 124
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	90 81       	ld	r25, Z
  aa:	9f 73       	andi	r25, 0x3F	; 63
  ac:	90 83       	st	Z, r25
  ae:	90 81       	ld	r25, Z
  b0:	89 2b       	or	r24, r25
  b2:	80 83       	st	Z, r24
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <adc_prescaler>:
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	98 7f       	andi	r25, 0xF8	; 248
  ce:	90 83       	st	Z, r25
  d0:	90 81       	ld	r25, Z
  d2:	89 2b       	or	r24, r25
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <set_channel>:
  d8:	ec e7       	ldi	r30, 0x7C	; 124
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	98 7f       	andi	r25, 0xF8	; 248
  e0:	90 83       	st	Z, r25
  e2:	90 81       	ld	r25, Z
  e4:	89 2b       	or	r24, r25
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <adc_interrupt_enabled>:
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <adc_freerun>:
}
void adc_freerun(){
	ADCSRA |= (1<<ADATE);
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 62       	ori	r24, 0x20	; 32
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <adc_start>:
}
void adc_start(){
	ADCSRA |= (1<<ADSC);		///< Starting Analog-to-digital conversion
 102:	ea e7       	ldi	r30, 0x7A	; 122
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <reset_counters>:
	usart_transmit(data);
	reset_counters();
}

void reset_counters(){
		adc_switch_counter = 0;							//	Already done at least two readings, keep going.
 10e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <adc_switch_counter>
		transmit_counter=0;		// Fix: flytta dessa två till en egen "reset_counters" ska ske efter transmits
 112:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 116:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 11a:	08 95       	ret

0000011c <send_motorspeed>:

	
}

void send_motorspeed()
{
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	1f 92       	push	r1
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t data;
	if(speed>=127){speed=126;}
 126:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <speed>
 12a:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <speed+0x1>
 12e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <speed+0x2>
 132:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <speed+0x3>
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	4e ef       	ldi	r20, 0xFE	; 254
 13c:	52 e4       	ldi	r21, 0x42	; 66
 13e:	0e 94 86 05 	call	0xb0c	; 0xb0c <__gesf2>
 142:	88 23       	and	r24, r24
 144:	64 f0       	brlt	.+24     	; 0x15e <send_motorspeed+0x42>
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac ef       	ldi	r26, 0xFC	; 252
 14c:	b2 e4       	ldi	r27, 0x42	; 66
 14e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <speed>
 152:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <speed+0x1>
 156:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <speed+0x2>
 15a:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <speed+0x3>
	data = speed;
 15e:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <speed>
 162:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <speed+0x1>
 166:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <speed+0x2>
 16a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <speed+0x3>
 16e:	0e 94 c9 04 	call	0x992	; 0x992 <__fixunssfsi>
 172:	69 83       	std	Y+1, r22	; 0x01
	
	data|=motor_direction;
 174:	99 81       	ldd	r25, Y+1	; 0x01
 176:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <motor_direction>
 17a:	89 2b       	or	r24, r25
 17c:	89 83       	std	Y+1, r24	; 0x01
	/*if(data!=prev_transmit){
	usart_transmit(data);
	}
	prev_transmit=data;*/
	
	usart_transmit(data);
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	0e 94 55 04 	call	0x8aa	; 0x8aa <usart_transmit>
	reset_counters();
 184:	0e 94 87 00 	call	0x10e	; 0x10e <reset_counters>
}
 188:	0f 90       	pop	r0
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <getDegree>:

/*
*	\brief Determines degree depending on which sensor has the most correct reading
*	at the current place in time.
*/
void getDegree(){	// Dåligt namn. Byt det ditt äckel
 190:	cf 92       	push	r12
 192:	df 92       	push	r13
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
	}
	*/
	
	/// TA bort ovan
	
	if(e1>e2){
 19c:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <e1>
 1a0:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <e1+0x1>
 1a4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <e2>
 1a8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <e2+0x1>
 1ac:	82 17       	cp	r24, r18
 1ae:	93 07       	cpc	r25, r19
 1b0:	0c f0       	brlt	.+2      	; 0x1b4 <getDegree+0x24>
 1b2:	68 c0       	rjmp	.+208    	; 0x284 <getDegree+0xf4>
		//speed = -(P*e1);
		speed = abs(P*e1+Ki*(-TARGET_1+(H1+H1_prev)/2)+Kd*(H1-H1_prev));//+Ki*(H1-H1_prev)*DELTA_TIME+Kd*(H1-H1_prev)*DELTA_TIME);			//	Negative multiplication due to the nature of TARGET-adc_val
 1b4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <e1>
 1b8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <e1+0x1>
 1bc:	2e e1       	ldi	r18, 0x1E	; 30
 1be:	28 9f       	mul	r18, r24
 1c0:	e0 01       	movw	r28, r0
 1c2:	29 9f       	mul	r18, r25
 1c4:	d0 0d       	add	r29, r0
 1c6:	11 24       	eor	r1, r1
 1c8:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <H1>
 1cc:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <H1+0x1>
 1d0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <H1_prev>
 1d4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <H1_prev+0x1>
 1d8:	86 0f       	add	r24, r22
 1da:	97 1f       	adc	r25, r23
 1dc:	99 23       	and	r25, r25
 1de:	0c f4       	brge	.+2      	; 0x1e2 <getDegree+0x52>
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	bc 01       	movw	r22, r24
 1e4:	75 95       	asr	r23
 1e6:	67 95       	ror	r22
 1e8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <TARGET_1>
 1ec:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <TARGET_1+0x1>
 1f0:	68 1b       	sub	r22, r24
 1f2:	79 0b       	sbc	r23, r25
 1f4:	07 2e       	mov	r0, r23
 1f6:	00 0c       	add	r0, r0
 1f8:	88 0b       	sbc	r24, r24
 1fa:	99 0b       	sbc	r25, r25
 1fc:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__floatsisf>
 200:	25 e9       	ldi	r18, 0x95	; 149
 202:	3f eb       	ldi	r19, 0xBF	; 191
 204:	46 ed       	ldi	r20, 0xD6	; 214
 206:	53 e3       	ldi	r21, 0x33	; 51
 208:	0e 94 8b 05 	call	0xb16	; 0xb16 <__mulsf3>
 20c:	6b 01       	movw	r12, r22
 20e:	7c 01       	movw	r14, r24
 210:	be 01       	movw	r22, r28
 212:	dd 0f       	add	r29, r29
 214:	88 0b       	sbc	r24, r24
 216:	99 0b       	sbc	r25, r25
 218:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__floatsisf>
 21c:	a7 01       	movw	r20, r14
 21e:	96 01       	movw	r18, r12
 220:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__addsf3>
 224:	6b 01       	movw	r12, r22
 226:	7c 01       	movw	r14, r24
 228:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <H1>
 22c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <H1+0x1>
 230:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <H1_prev>
 234:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <H1_prev+0x1>
 238:	82 1b       	sub	r24, r18
 23a:	93 0b       	sbc	r25, r19
 23c:	24 e1       	ldi	r18, 0x14	; 20
 23e:	28 9f       	mul	r18, r24
 240:	b0 01       	movw	r22, r0
 242:	29 9f       	mul	r18, r25
 244:	70 0d       	add	r23, r0
 246:	11 24       	eor	r1, r1
 248:	07 2e       	mov	r0, r23
 24a:	00 0c       	add	r0, r0
 24c:	88 0b       	sbc	r24, r24
 24e:	99 0b       	sbc	r25, r25
 250:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__floatsisf>
 254:	a7 01       	movw	r20, r14
 256:	96 01       	movw	r18, r12
 258:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__addsf3>
 25c:	0e 94 53 06 	call	0xca6	; 0xca6 <abs>
 260:	bc 01       	movw	r22, r24
 262:	99 0f       	add	r25, r25
 264:	88 0b       	sbc	r24, r24
 266:	99 0b       	sbc	r25, r25
 268:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__floatsisf>
 26c:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <speed>
 270:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <speed+0x1>
 274:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <speed+0x2>
 278:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <speed+0x3>
		/*double tmp = speed;
		tmp/=max_speed_e1;
		tmp*=125;
		speed = tmp;*/
		motor_direction = FORWARD;
 27c:	80 e8       	ldi	r24, 0x80	; 128
 27e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <motor_direction>
 282:	66 c0       	rjmp	.+204    	; 0x350 <getDegree+0x1c0>
	}else{											//	Leaning towards H1, need to drive backwards, e2 should be used
		speed = abs(P*e2+Ki*(-TARGET_2+(H2+H2_prev)/2)+Kd*(H2-H2_prev));//+Ki*(H2-H2_prev)*DELTA_TIME+Kd*(H2-H2_prev)*DELTA_TIME);			//	Negative multiplication due to the nature of TARGET-adc_val
 284:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <e2>
 288:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <e2+0x1>
 28c:	2e e1       	ldi	r18, 0x1E	; 30
 28e:	28 9f       	mul	r18, r24
 290:	e0 01       	movw	r28, r0
 292:	29 9f       	mul	r18, r25
 294:	d0 0d       	add	r29, r0
 296:	11 24       	eor	r1, r1
 298:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <H2>
 29c:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <H2+0x1>
 2a0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <H2_prev>
 2a4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <H2_prev+0x1>
 2a8:	86 0f       	add	r24, r22
 2aa:	97 1f       	adc	r25, r23
 2ac:	99 23       	and	r25, r25
 2ae:	0c f4       	brge	.+2      	; 0x2b2 <getDegree+0x122>
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	bc 01       	movw	r22, r24
 2b4:	75 95       	asr	r23
 2b6:	67 95       	ror	r22
 2b8:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <TARGET_2>
 2bc:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <TARGET_2+0x1>
 2c0:	68 1b       	sub	r22, r24
 2c2:	79 0b       	sbc	r23, r25
 2c4:	07 2e       	mov	r0, r23
 2c6:	00 0c       	add	r0, r0
 2c8:	88 0b       	sbc	r24, r24
 2ca:	99 0b       	sbc	r25, r25
 2cc:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__floatsisf>
 2d0:	25 e9       	ldi	r18, 0x95	; 149
 2d2:	3f eb       	ldi	r19, 0xBF	; 191
 2d4:	46 ed       	ldi	r20, 0xD6	; 214
 2d6:	53 e3       	ldi	r21, 0x33	; 51
 2d8:	0e 94 8b 05 	call	0xb16	; 0xb16 <__mulsf3>
 2dc:	6b 01       	movw	r12, r22
 2de:	7c 01       	movw	r14, r24
 2e0:	be 01       	movw	r22, r28
 2e2:	dd 0f       	add	r29, r29
 2e4:	88 0b       	sbc	r24, r24
 2e6:	99 0b       	sbc	r25, r25
 2e8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__floatsisf>
 2ec:	a7 01       	movw	r20, r14
 2ee:	96 01       	movw	r18, r12
 2f0:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__addsf3>
 2f4:	6b 01       	movw	r12, r22
 2f6:	7c 01       	movw	r14, r24
 2f8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <H2>
 2fc:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <H2+0x1>
 300:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <H2_prev>
 304:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <H2_prev+0x1>
 308:	82 1b       	sub	r24, r18
 30a:	93 0b       	sbc	r25, r19
 30c:	24 e1       	ldi	r18, 0x14	; 20
 30e:	28 9f       	mul	r18, r24
 310:	b0 01       	movw	r22, r0
 312:	29 9f       	mul	r18, r25
 314:	70 0d       	add	r23, r0
 316:	11 24       	eor	r1, r1
 318:	07 2e       	mov	r0, r23
 31a:	00 0c       	add	r0, r0
 31c:	88 0b       	sbc	r24, r24
 31e:	99 0b       	sbc	r25, r25
 320:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__floatsisf>
 324:	a7 01       	movw	r20, r14
 326:	96 01       	movw	r18, r12
 328:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__addsf3>
 32c:	0e 94 53 06 	call	0xca6	; 0xca6 <abs>
 330:	bc 01       	movw	r22, r24
 332:	99 0f       	add	r25, r25
 334:	88 0b       	sbc	r24, r24
 336:	99 0b       	sbc	r25, r25
 338:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__floatsisf>
 33c:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <speed>
 340:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <speed+0x1>
 344:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <speed+0x2>
 348:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <speed+0x3>
		/*double tmp = speed;
		tmp/=max_speed_e1;
		tmp*=125;
		speed = tmp;*/
		
		motor_direction = BACKWARDS;
 34c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <motor_direction>
	}
	
	send_motorspeed();
 350:	0e 94 8e 00 	call	0x11c	; 0x11c <send_motorspeed>

	
}
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	ff 90       	pop	r15
 35a:	ef 90       	pop	r14
 35c:	df 90       	pop	r13
 35e:	cf 90       	pop	r12
 360:	08 95       	ret

00000362 <__vector_24>:
		PORTD ^= (1<<PORTD7);
		//usart_transmit(50);
	}
}

ISR(ADC_vect){
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	2f 93       	push	r18
 36e:	3f 93       	push	r19
 370:	4f 93       	push	r20
 372:	5f 93       	push	r21
 374:	6f 93       	push	r22
 376:	7f 93       	push	r23
 378:	8f 93       	push	r24
 37a:	9f 93       	push	r25
 37c:	af 93       	push	r26
 37e:	bf 93       	push	r27
 380:	ef 93       	push	r30
 382:	ff 93       	push	r31
	
	adc_val = ADC;
 384:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 388:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 38c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <adc_val+0x1>
 390:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <adc_val>
	adc_switch_counter++;
 394:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_switch_counter>
 398:	8f 5f       	subi	r24, 0xFF	; 255
 39a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc_switch_counter>
	//	PORTD ^= (1<<7);							//	For testing deltaTime
	if(adc_switch_counter<ADC_SWITCH){				//	Read twice after change
 39e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc_switch_counter>
 3a2:	82 30       	cpi	r24, 0x02	; 2
 3a4:	08 f4       	brcc	.+2      	; 0x3a8 <__vector_24+0x46>
 3a6:	ae c0       	rjmp	.+348    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
		return;
		}
	
	
	if(transmit_counter<=RASPBERRY_PI_DELAY){ // 250 tidigare
 3a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3b0:	02 97       	sbiw	r24, 0x02	; 2
 3b2:	50 f4       	brcc	.+20     	; 0x3c8 <__vector_24+0x66>
		transmit_counter++;
 3b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3bc:	01 96       	adiw	r24, 0x01	; 1
 3be:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		return;}
 3c6:	9e c0       	rjmp	.+316    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
	/*
	uint8_t tmp = adc_val-TARGET_1;	// REMOVE LATER; 
	usart_transmit(tmp);
	return;
	*/
	moving_avarage_counter++;											
 3c8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <moving_avarage_counter>
 3cc:	8f 5f       	subi	r24, 0xFF	; 255
 3ce:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <moving_avarage_counter>
	if(sensor==H1_SENS){
 3d2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sensor>
 3d6:	81 11       	cpse	r24, r1
 3d8:	4c c0       	rjmp	.+152    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
		buffer+=adc_val;						//	Max value 65535 for uint16_t, FIX quit if buffer+adc_val>65535?
 3da:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <adc_val>
 3de:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <adc_val+0x1>
 3e2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <buffer>
 3e6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <buffer+0x1>
 3ea:	82 0f       	add	r24, r18
 3ec:	93 1f       	adc	r25, r19
 3ee:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <buffer+0x1>
 3f2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <buffer>
		if(moving_avarage_counter<MOVING_AVARAGE){
 3f6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <moving_avarage_counter>
 3fa:	8c 33       	cpi	r24, 0x3C	; 60
 3fc:	08 f4       	brcc	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fe:	82 c0       	rjmp	.+260    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
			return;
		}else{
			H1_prev = H1;
 400:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <H1>
 404:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <H1+0x1>
 408:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <H1_prev+0x1>
 40c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <H1_prev>
			H1 = buffer/MOVING_AVARAGE;
 410:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <buffer>
 414:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <buffer+0x1>
 418:	a9 e8       	ldi	r26, 0x89	; 137
 41a:	b8 e8       	ldi	r27, 0x88	; 136
 41c:	0e 94 30 06 	call	0xc60	; 0xc60 <__umulhisi3>
 420:	96 95       	lsr	r25
 422:	87 95       	ror	r24
 424:	92 95       	swap	r25
 426:	82 95       	swap	r24
 428:	8f 70       	andi	r24, 0x0F	; 15
 42a:	89 27       	eor	r24, r25
 42c:	9f 70       	andi	r25, 0x0F	; 15
 42e:	89 27       	eor	r24, r25
 430:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <H1+0x1>
 434:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <H1>
			e1=H1-TARGET_1;						//	e_1(t)
 438:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <H1>
 43c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <H1+0x1>
 440:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <TARGET_1>
 444:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <TARGET_1+0x1>
 448:	82 1b       	sub	r24, r18
 44a:	93 0b       	sbc	r25, r19
 44c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <e1+0x1>
 450:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <e1>
			//	Switch reading to other sensor, H2
			set_channel(ADC1);						//	Set ADC channel to PA1
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
			sensor=H2_SENS;	
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <sensor>
			moving_avarage_counter=0;
 460:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <moving_avarage_counter>
			buffer=0;
 464:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <buffer+0x1>
 468:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <buffer>
			

			
			getDegree();
 46c:	0e 94 c8 00 	call	0x190	; 0x190 <getDegree>
 470:	49 c0       	rjmp	.+146    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
			}
		}
		else{
			buffer+=adc_val;
 472:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <adc_val>
 476:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <adc_val+0x1>
 47a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <buffer>
 47e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <buffer+0x1>
 482:	82 0f       	add	r24, r18
 484:	93 1f       	adc	r25, r19
 486:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <buffer+0x1>
 48a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <buffer>
			if(moving_avarage_counter<MOVING_AVARAGE){
 48e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <moving_avarage_counter>
 492:	8c 33       	cpi	r24, 0x3C	; 60
 494:	b8 f1       	brcs	.+110    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
				return;
			}else{
				H2_prev = H2;
 496:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <H2>
 49a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <H2+0x1>
 49e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <H2_prev+0x1>
 4a2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <H2_prev>
				H2 = buffer/MOVING_AVARAGE;
 4a6:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <buffer>
 4aa:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <buffer+0x1>
 4ae:	a9 e8       	ldi	r26, 0x89	; 137
 4b0:	b8 e8       	ldi	r27, 0x88	; 136
 4b2:	0e 94 30 06 	call	0xc60	; 0xc60 <__umulhisi3>
 4b6:	96 95       	lsr	r25
 4b8:	87 95       	ror	r24
 4ba:	92 95       	swap	r25
 4bc:	82 95       	swap	r24
 4be:	8f 70       	andi	r24, 0x0F	; 15
 4c0:	89 27       	eor	r24, r25
 4c2:	9f 70       	andi	r25, 0x0F	; 15
 4c4:	89 27       	eor	r24, r25
 4c6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <H2+0x1>
 4ca:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <H2>
				//e2=abs(TARGET_2-H2);						// e_2(t)
				e2= H2-TARGET_2;
 4ce:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <H2>
 4d2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <H2+0x1>
 4d6:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <TARGET_2>
 4da:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <TARGET_2+0x1>
 4de:	82 1b       	sub	r24, r18
 4e0:	93 0b       	sbc	r25, r19
 4e2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <e2+0x1>
 4e6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <e2>
				//	Switch reading to other sensor, H1
				set_channel(ADC0);						//	Set ADC channel to PA0
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
				sensor=H1_SENS;
 4f0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <sensor>
				moving_avarage_counter=0;
 4f4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <moving_avarage_counter>
				buffer=0;
 4f8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <buffer+0x1>
 4fc:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <buffer>
				

				getDegree();
 500:	0e 94 c8 00 	call	0x190	; 0x190 <getDegree>
		}*/


		
	//}	
}
 504:	ff 91       	pop	r31
 506:	ef 91       	pop	r30
 508:	bf 91       	pop	r27
 50a:	af 91       	pop	r26
 50c:	9f 91       	pop	r25
 50e:	8f 91       	pop	r24
 510:	7f 91       	pop	r23
 512:	6f 91       	pop	r22
 514:	5f 91       	pop	r21
 516:	4f 91       	pop	r20
 518:	3f 91       	pop	r19
 51a:	2f 91       	pop	r18
 51c:	0f 90       	pop	r0
 51e:	0f be       	out	0x3f, r0	; 63
 520:	0f 90       	pop	r0
 522:	1f 90       	pop	r1
 524:	18 95       	reti

00000526 <startSeq>:
		adc_switch_counter = 0;							//	Already done at least two readings, keep going.
		transmit_counter=0;		// Fix: flytta dessa två till en egen "reset_counters" ska ske efter transmits
}

void startSeq(){
	while(!(PINA&(1<<PINA7)));
 526:	07 9b       	sbis	0x00, 7	; 0
 528:	fe cf       	rjmp	.-4      	; 0x526 <startSeq>
	//Ta en miljard värden
	int buffer = 0;
	uint8_t nbr_avg = 10;
	uint8_t delay_time = 5;
	
	H1_MIN = ADC;
 52a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 52e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 532:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <H1_MIN+0x1>
 536:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <H1_MIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 53a:	2f ef       	ldi	r18, 0xFF	; 255
 53c:	89 ef       	ldi	r24, 0xF9	; 249
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	21 50       	subi	r18, 0x01	; 1
 542:	80 40       	sbci	r24, 0x00	; 0
 544:	90 40       	sbci	r25, 0x00	; 0
 546:	e1 f7       	brne	.-8      	; 0x540 <startSeq+0x1a>
 548:	00 c0       	rjmp	.+0      	; 0x54a <startSeq+0x24>
 54a:	00 00       	nop
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 54c:	20 e0       	ldi	r18, 0x00	; 0
 54e:	30 e0       	ldi	r19, 0x00	; 0
}

void startSeq(){
	while(!(PINA&(1<<PINA7)));
	//Ta en miljard värden
	int buffer = 0;
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t nbr_avg = 10;
	uint8_t delay_time = 5;
	
	H1_MIN = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 554:	0e c0       	rjmp	.+28     	; 0x572 <startSeq+0x4c>
		buffer+=ADC;
 556:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 55a:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 55e:	84 0f       	add	r24, r20
 560:	95 1f       	adc	r25, r21
 562:	ef e1       	ldi	r30, 0x1F	; 31
 564:	fe e4       	ldi	r31, 0x4E	; 78
 566:	31 97       	sbiw	r30, 0x01	; 1
 568:	f1 f7       	brne	.-4      	; 0x566 <startSeq+0x40>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <startSeq+0x46>
 56c:	00 00       	nop
	uint8_t nbr_avg = 10;
	uint8_t delay_time = 5;
	
	H1_MIN = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 56e:	2f 5f       	subi	r18, 0xFF	; 255
 570:	3f 4f       	sbci	r19, 0xFF	; 255
 572:	2a 30       	cpi	r18, 0x0A	; 10
 574:	31 05       	cpc	r19, r1
 576:	7c f3       	brlt	.-34     	; 0x556 <startSeq+0x30>
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H1_MIN = buffer/nbr_avg;
 578:	6a e0       	ldi	r22, 0x0A	; 10
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	0e 94 1c 06 	call	0xc38	; 0xc38 <__divmodhi4>
 580:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <H1_MIN+0x1>
 584:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <H1_MIN>
	buffer=0;
	set_channel(ADC1);
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
 58e:	ff ef       	ldi	r31, 0xFF	; 255
 590:	29 ef       	ldi	r18, 0xF9	; 249
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	f1 50       	subi	r31, 0x01	; 1
 596:	20 40       	sbci	r18, 0x00	; 0
 598:	80 40       	sbci	r24, 0x00	; 0
 59a:	e1 f7       	brne	.-8      	; 0x594 <startSeq+0x6e>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <startSeq+0x78>
 59e:	00 00       	nop
	_delay_ms(20);
	
	H2_MAX = ADC;
 5a0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 5a4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 5a8:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <H2_MAX+0x1>
 5ac:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <H2_MAX>
 5b0:	9f ef       	ldi	r25, 0xFF	; 255
 5b2:	e9 ef       	ldi	r30, 0xF9	; 249
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	91 50       	subi	r25, 0x01	; 1
 5b8:	e0 40       	sbci	r30, 0x00	; 0
 5ba:	f0 40       	sbci	r31, 0x00	; 0
 5bc:	e1 f7       	brne	.-8      	; 0x5b6 <startSeq+0x90>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <startSeq+0x9a>
 5c0:	00 00       	nop
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 5c2:	20 e0       	ldi	r18, 0x00	; 0
 5c4:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i<nbr_avg; i++){
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H1_MIN = buffer/nbr_avg;
	buffer=0;
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	90 e0       	ldi	r25, 0x00	; 0
	set_channel(ADC1);
	_delay_ms(20);
	
	H2_MAX = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 5ca:	0e c0       	rjmp	.+28     	; 0x5e8 <startSeq+0xc2>
		buffer+=ADC;
 5cc:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 5d0:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 5d4:	84 0f       	add	r24, r20
 5d6:	95 1f       	adc	r25, r21
 5d8:	ef e1       	ldi	r30, 0x1F	; 31
 5da:	fe e4       	ldi	r31, 0x4E	; 78
 5dc:	31 97       	sbiw	r30, 0x01	; 1
 5de:	f1 f7       	brne	.-4      	; 0x5dc <startSeq+0xb6>
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <startSeq+0xbc>
 5e2:	00 00       	nop
	set_channel(ADC1);
	_delay_ms(20);
	
	H2_MAX = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 5e4:	2f 5f       	subi	r18, 0xFF	; 255
 5e6:	3f 4f       	sbci	r19, 0xFF	; 255
 5e8:	2a 30       	cpi	r18, 0x0A	; 10
 5ea:	31 05       	cpc	r19, r1
 5ec:	7c f3       	brlt	.-34     	; 0x5cc <startSeq+0xa6>
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H2_MAX = buffer/nbr_avg;
 5ee:	6a e0       	ldi	r22, 0x0A	; 10
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	0e 94 1c 06 	call	0xc38	; 0xc38 <__divmodhi4>
 5f6:	70 93 28 01 	sts	0x0128, r23	; 0x800128 <H2_MAX+0x1>
 5fa:	60 93 27 01 	sts	0x0127, r22	; 0x800127 <H2_MAX>
 5fe:	ff ef       	ldi	r31, 0xFF	; 255
 600:	29 ef       	ldi	r18, 0xF9	; 249
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	f1 50       	subi	r31, 0x01	; 1
 606:	20 40       	sbci	r18, 0x00	; 0
 608:	80 40       	sbci	r24, 0x00	; 0
 60a:	e1 f7       	brne	.-8      	; 0x604 <startSeq+0xde>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <startSeq+0xe8>
 60e:	00 00       	nop
 610:	9f ef       	ldi	r25, 0xFF	; 255
 612:	e9 e6       	ldi	r30, 0x69	; 105
 614:	f8 e1       	ldi	r31, 0x18	; 24
 616:	91 50       	subi	r25, 0x01	; 1
 618:	e0 40       	sbci	r30, 0x00	; 0
 61a:	f0 40       	sbci	r31, 0x00	; 0
 61c:	e1 f7       	brne	.-8      	; 0x616 <startSeq+0xf0>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <startSeq+0xfa>
 620:	00 00       	nop
	_delay_ms(20);
	
	
	
	_delay_ms(500);
	while(!(PINA&(1<<PINA7)));
 622:	07 9b       	sbis	0x00, 7	; 0
 624:	fe cf       	rjmp	.-4      	; 0x622 <startSeq+0xfc>
	
	
	H2_MIN = ADC;
 626:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 62a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 62e:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <H2_MIN+0x1>
 632:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <H2_MIN>
 636:	2f ef       	ldi	r18, 0xFF	; 255
 638:	89 ef       	ldi	r24, 0xF9	; 249
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	21 50       	subi	r18, 0x01	; 1
 63e:	80 40       	sbci	r24, 0x00	; 0
 640:	90 40       	sbci	r25, 0x00	; 0
 642:	e1 f7       	brne	.-8      	; 0x63c <startSeq+0x116>
 644:	00 c0       	rjmp	.+0      	; 0x646 <startSeq+0x120>
 646:	00 00       	nop
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 648:	20 e0       	ldi	r18, 0x00	; 0
 64a:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i<nbr_avg; i++){
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H2_MAX = buffer/nbr_avg;
	buffer=0;
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	90 e0       	ldi	r25, 0x00	; 0
	while(!(PINA&(1<<PINA7)));
	
	
	H2_MIN = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 650:	0e c0       	rjmp	.+28     	; 0x66e <startSeq+0x148>
		buffer+=ADC;
 652:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 656:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 65a:	84 0f       	add	r24, r20
 65c:	95 1f       	adc	r25, r21
 65e:	ef e1       	ldi	r30, 0x1F	; 31
 660:	fe e4       	ldi	r31, 0x4E	; 78
 662:	31 97       	sbiw	r30, 0x01	; 1
 664:	f1 f7       	brne	.-4      	; 0x662 <startSeq+0x13c>
 666:	00 c0       	rjmp	.+0      	; 0x668 <startSeq+0x142>
 668:	00 00       	nop
	while(!(PINA&(1<<PINA7)));
	
	
	H2_MIN = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 66a:	2f 5f       	subi	r18, 0xFF	; 255
 66c:	3f 4f       	sbci	r19, 0xFF	; 255
 66e:	2a 30       	cpi	r18, 0x0A	; 10
 670:	31 05       	cpc	r19, r1
 672:	7c f3       	brlt	.-34     	; 0x652 <startSeq+0x12c>
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H2_MIN = buffer/nbr_avg;
 674:	6a e0       	ldi	r22, 0x0A	; 10
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	0e 94 1c 06 	call	0xc38	; 0xc38 <__divmodhi4>
 67c:	70 93 20 01 	sts	0x0120, r23	; 0x800120 <H2_MIN+0x1>
 680:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <H2_MIN>
	buffer=0;
	set_channel(ADC0);
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
 68a:	ff ef       	ldi	r31, 0xFF	; 255
 68c:	29 ef       	ldi	r18, 0xF9	; 249
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	f1 50       	subi	r31, 0x01	; 1
 692:	20 40       	sbci	r18, 0x00	; 0
 694:	80 40       	sbci	r24, 0x00	; 0
 696:	e1 f7       	brne	.-8      	; 0x690 <startSeq+0x16a>
 698:	00 c0       	rjmp	.+0      	; 0x69a <startSeq+0x174>
 69a:	00 00       	nop
	_delay_ms(20);
	
	
	H1_MAX = ADC;
 69c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 6a0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 6a4:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <H1_MAX+0x1>
 6a8:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <H1_MAX>
 6ac:	9f ef       	ldi	r25, 0xFF	; 255
 6ae:	e9 ef       	ldi	r30, 0xF9	; 249
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	91 50       	subi	r25, 0x01	; 1
 6b4:	e0 40       	sbci	r30, 0x00	; 0
 6b6:	f0 40       	sbci	r31, 0x00	; 0
 6b8:	e1 f7       	brne	.-8      	; 0x6b2 <startSeq+0x18c>
 6ba:	00 c0       	rjmp	.+0      	; 0x6bc <startSeq+0x196>
 6bc:	00 00       	nop
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 6be:	20 e0       	ldi	r18, 0x00	; 0
 6c0:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i<nbr_avg; i++){
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H2_MIN = buffer/nbr_avg;
	buffer=0;
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(20);
	
	
	H1_MAX = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 6c6:	0e c0       	rjmp	.+28     	; 0x6e4 <startSeq+0x1be>
		buffer+=ADC;
 6c8:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 6cc:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 6d0:	84 0f       	add	r24, r20
 6d2:	95 1f       	adc	r25, r21
 6d4:	ef e1       	ldi	r30, 0x1F	; 31
 6d6:	fe e4       	ldi	r31, 0x4E	; 78
 6d8:	31 97       	sbiw	r30, 0x01	; 1
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <startSeq+0x1b2>
 6dc:	00 c0       	rjmp	.+0      	; 0x6de <startSeq+0x1b8>
 6de:	00 00       	nop
	_delay_ms(20);
	
	
	H1_MAX = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 6e0:	2f 5f       	subi	r18, 0xFF	; 255
 6e2:	3f 4f       	sbci	r19, 0xFF	; 255
 6e4:	2a 30       	cpi	r18, 0x0A	; 10
 6e6:	31 05       	cpc	r19, r1
 6e8:	7c f3       	brlt	.-34     	; 0x6c8 <startSeq+0x1a2>
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H1_MAX = buffer/nbr_avg;
 6ea:	6a e0       	ldi	r22, 0x0A	; 10
 6ec:	70 e0       	ldi	r23, 0x00	; 0
 6ee:	0e 94 1c 06 	call	0xc38	; 0xc38 <__divmodhi4>
 6f2:	70 93 2a 01 	sts	0x012A, r23	; 0x80012a <H1_MAX+0x1>
 6f6:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <H1_MAX>
 6fa:	ff ef       	ldi	r31, 0xFF	; 255
 6fc:	29 ef       	ldi	r18, 0xF9	; 249
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	f1 50       	subi	r31, 0x01	; 1
 702:	20 40       	sbci	r18, 0x00	; 0
 704:	80 40       	sbci	r24, 0x00	; 0
 706:	e1 f7       	brne	.-8      	; 0x700 <startSeq+0x1da>
 708:	00 c0       	rjmp	.+0      	; 0x70a <startSeq+0x1e4>
 70a:	00 00       	nop
 70c:	9f ef       	ldi	r25, 0xFF	; 255
 70e:	e9 e6       	ldi	r30, 0x69	; 105
 710:	f8 e1       	ldi	r31, 0x18	; 24
 712:	91 50       	subi	r25, 0x01	; 1
 714:	e0 40       	sbci	r30, 0x00	; 0
 716:	f0 40       	sbci	r31, 0x00	; 0
 718:	e1 f7       	brne	.-8      	; 0x712 <startSeq+0x1ec>
 71a:	00 c0       	rjmp	.+0      	; 0x71c <startSeq+0x1f6>
 71c:	00 00       	nop
	buffer=0;
	_delay_ms(20);
		
	
	_delay_ms(500);
	while(!(PINA&(1<<PINA7)));
 71e:	07 9b       	sbis	0x00, 7	; 0
 720:	fe cf       	rjmp	.-4      	; 0x71e <startSeq+0x1f8>
	
	
	TARGET_1 = ADC;
 722:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 726:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 72a:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <TARGET_1+0x1>
 72e:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <TARGET_1>
 732:	2f ef       	ldi	r18, 0xFF	; 255
 734:	89 ef       	ldi	r24, 0xF9	; 249
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	21 50       	subi	r18, 0x01	; 1
 73a:	80 40       	sbci	r24, 0x00	; 0
 73c:	90 40       	sbci	r25, 0x00	; 0
 73e:	e1 f7       	brne	.-8      	; 0x738 <startSeq+0x212>
 740:	00 c0       	rjmp	.+0      	; 0x742 <startSeq+0x21c>
 742:	00 00       	nop
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 744:	20 e0       	ldi	r18, 0x00	; 0
 746:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i<nbr_avg; i++){
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	H1_MAX = buffer/nbr_avg;
	buffer=0;
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	90 e0       	ldi	r25, 0x00	; 0
	while(!(PINA&(1<<PINA7)));
	
	
	TARGET_1 = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 74c:	0e c0       	rjmp	.+28     	; 0x76a <startSeq+0x244>
		buffer+=ADC;
 74e:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 752:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 756:	84 0f       	add	r24, r20
 758:	95 1f       	adc	r25, r21
 75a:	ef e1       	ldi	r30, 0x1F	; 31
 75c:	fe e4       	ldi	r31, 0x4E	; 78
 75e:	31 97       	sbiw	r30, 0x01	; 1
 760:	f1 f7       	brne	.-4      	; 0x75e <startSeq+0x238>
 762:	00 c0       	rjmp	.+0      	; 0x764 <startSeq+0x23e>
 764:	00 00       	nop
	while(!(PINA&(1<<PINA7)));
	
	
	TARGET_1 = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 766:	2f 5f       	subi	r18, 0xFF	; 255
 768:	3f 4f       	sbci	r19, 0xFF	; 255
 76a:	2a 30       	cpi	r18, 0x0A	; 10
 76c:	31 05       	cpc	r19, r1
 76e:	7c f3       	brlt	.-34     	; 0x74e <startSeq+0x228>
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	TARGET_1 = buffer/nbr_avg;
 770:	6a e0       	ldi	r22, 0x0A	; 10
 772:	70 e0       	ldi	r23, 0x00	; 0
 774:	0e 94 1c 06 	call	0xc38	; 0xc38 <__divmodhi4>
 778:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <TARGET_1+0x1>
 77c:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <TARGET_1>
	buffer=0;
	set_channel(ADC1);
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
 786:	ff ef       	ldi	r31, 0xFF	; 255
 788:	29 ef       	ldi	r18, 0xF9	; 249
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	f1 50       	subi	r31, 0x01	; 1
 78e:	20 40       	sbci	r18, 0x00	; 0
 790:	80 40       	sbci	r24, 0x00	; 0
 792:	e1 f7       	brne	.-8      	; 0x78c <startSeq+0x266>
 794:	00 c0       	rjmp	.+0      	; 0x796 <startSeq+0x270>
 796:	00 00       	nop
	_delay_ms(20);
	
	TARGET_2 = ADC;
 798:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 79c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 7a0:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <TARGET_2+0x1>
 7a4:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <TARGET_2>
 7a8:	9f ef       	ldi	r25, 0xFF	; 255
 7aa:	e9 ef       	ldi	r30, 0xF9	; 249
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	91 50       	subi	r25, 0x01	; 1
 7b0:	e0 40       	sbci	r30, 0x00	; 0
 7b2:	f0 40       	sbci	r31, 0x00	; 0
 7b4:	e1 f7       	brne	.-8      	; 0x7ae <startSeq+0x288>
 7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <startSeq+0x292>
 7b8:	00 00       	nop
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 7ba:	20 e0       	ldi	r18, 0x00	; 0
 7bc:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i<nbr_avg; i++){
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	TARGET_1 = buffer/nbr_avg;
	buffer=0;
 7be:	80 e0       	ldi	r24, 0x00	; 0
 7c0:	90 e0       	ldi	r25, 0x00	; 0
	set_channel(ADC1);
	_delay_ms(20);
	
	TARGET_2 = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 7c2:	0e c0       	rjmp	.+28     	; 0x7e0 <startSeq+0x2ba>
		buffer+=ADC;
 7c4:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 7c8:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 7cc:	84 0f       	add	r24, r20
 7ce:	95 1f       	adc	r25, r21
 7d0:	ef e1       	ldi	r30, 0x1F	; 31
 7d2:	fe e4       	ldi	r31, 0x4E	; 78
 7d4:	31 97       	sbiw	r30, 0x01	; 1
 7d6:	f1 f7       	brne	.-4      	; 0x7d4 <startSeq+0x2ae>
 7d8:	00 c0       	rjmp	.+0      	; 0x7da <startSeq+0x2b4>
 7da:	00 00       	nop
	set_channel(ADC1);
	_delay_ms(20);
	
	TARGET_2 = ADC;
	_delay_ms(20);
	for(int i = 0; i<nbr_avg; i++){
 7dc:	2f 5f       	subi	r18, 0xFF	; 255
 7de:	3f 4f       	sbci	r19, 0xFF	; 255
 7e0:	2a 30       	cpi	r18, 0x0A	; 10
 7e2:	31 05       	cpc	r19, r1
 7e4:	7c f3       	brlt	.-34     	; 0x7c4 <startSeq+0x29e>
		buffer+=ADC;
		_delay_ms(delay_time);
	}
	TARGET_2 = buffer/nbr_avg;
 7e6:	6a e0       	ldi	r22, 0x0A	; 10
 7e8:	70 e0       	ldi	r23, 0x00	; 0
 7ea:	0e 94 1c 06 	call	0xc38	; 0xc38 <__divmodhi4>
 7ee:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <TARGET_2+0x1>
 7f2:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <TARGET_2>
	buffer=0;
	set_channel(ADC0);
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
 7fc:	ff ef       	ldi	r31, 0xFF	; 255
 7fe:	29 ef       	ldi	r18, 0xF9	; 249
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	f1 50       	subi	r31, 0x01	; 1
 804:	20 40       	sbci	r18, 0x00	; 0
 806:	80 40       	sbci	r24, 0x00	; 0
 808:	e1 f7       	brne	.-8      	; 0x802 <__EEPROM_REGION_LENGTH__+0x2>
 80a:	00 c0       	rjmp	.+0      	; 0x80c <__EEPROM_REGION_LENGTH__+0xc>
 80c:	00 00       	nop
	_delay_ms(20);
		
	
	max_speed_e1 = abs(1*(TARGET_1-H1_MAX));		// FIX! FIND CORRECT VALUE FOR (H1-H1_prev)*DELTA_TIME+Kd*(H1-H1_prev)*DELTA_TIME). Measure what H1-H1_PREV could be at a maximum
 80e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <TARGET_1>
 812:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <TARGET_1+0x1>
 816:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <H1_MAX>
 81a:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <H1_MAX+0x1>
 81e:	82 1b       	sub	r24, r18
 820:	93 0b       	sbc	r25, r19
 822:	9c 01       	movw	r18, r24
 824:	22 f4       	brpl	.+8      	; 0x82e <__EEPROM_REGION_LENGTH__+0x2e>
 826:	22 27       	eor	r18, r18
 828:	33 27       	eor	r19, r19
 82a:	28 1b       	sub	r18, r24
 82c:	39 0b       	sbc	r19, r25
 82e:	30 93 24 01 	sts	0x0124, r19	; 0x800124 <max_speed_e1+0x1>
 832:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <max_speed_e1>
	max_speed_e2 = abs(1*(TARGET_2-H2_MAX));		// FIX! FIND CORRECT VALUE FOR (H2-H2_prev)*DELTA_TIME+Kd*(H2-H2_prev)*DELTA_TIME). Measure what H1-H1_PREV could be at a maximum
 836:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <TARGET_2>
 83a:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <TARGET_2+0x1>
 83e:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <H2_MAX>
 842:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <H2_MAX+0x1>
 846:	82 1b       	sub	r24, r18
 848:	93 0b       	sbc	r25, r19
 84a:	9c 01       	movw	r18, r24
 84c:	22 f4       	brpl	.+8      	; 0x856 <__EEPROM_REGION_LENGTH__+0x56>
 84e:	22 27       	eor	r18, r18
 850:	33 27       	eor	r19, r19
 852:	28 1b       	sub	r18, r24
 854:	39 0b       	sbc	r19, r25
 856:	30 93 1c 01 	sts	0x011C, r19	; 0x80011c <max_speed_e2+0x1>
 85a:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <max_speed_e2>
	sei();
 85e:	78 94       	sei
 860:	08 95       	ret

00000862 <main>:
void reset_counters();

int main(void)
{
	//	ADC
	setup_adc(0);
 862:	80 e0       	ldi	r24, 0x00	; 0
 864:	0e 94 52 00 	call	0xa4	; 0xa4 <setup_adc>
	adc_interrupt_enabled();
 868:	0e 94 75 00 	call	0xea	; 0xea <adc_interrupt_enabled>
	adc_freerun();
 86c:	0e 94 7b 00 	call	0xf6	; 0xf6 <adc_freerun>
	adc_start();
 870:	0e 94 81 00 	call	0x102	; 0x102 <adc_start>
	adc_prescaler(PRESCALER128);
 874:	87 e0       	ldi	r24, 0x07	; 7
 876:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_prescaler>
	//	USART
	usart_init();
 87a:	0e 94 49 04 	call	0x892	; 0x892 <usart_init>
	cli();
 87e:	f8 94       	cli
	
	DDRD |= (1<<7);	//	Remove later, for testing delta Time
 880:	8a b1       	in	r24, 0x0a	; 10
 882:	80 68       	ori	r24, 0x80	; 128
 884:	8a b9       	out	0x0a, r24	; 10
	
	startSeq();
 886:	0e 94 93 02 	call	0x526	; 0x526 <startSeq>
	
	//	REMOVE LATER
	
    while (1) 
    {
		PORTD ^= (1<<PORTD7);
 88a:	8b b1       	in	r24, 0x0b	; 11
 88c:	80 58       	subi	r24, 0x80	; 128
 88e:	8b b9       	out	0x0b, r24	; 11
 890:	fc cf       	rjmp	.-8      	; 0x88a <main+0x28>

00000892 <usart_init>:

#include "usart.h"

void usart_init()
{
	UBRR0 = 8; // 9600=103 baud @ 16 MHz, 51=9600 @ 8 MHz
 892:	88 e0       	ldi	r24, 0x08	; 8
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
 89a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
	//UBRR0L = 51;
	UCSR0B |= (1<<TXEN0) | (1<<RXEN0);// | (1 << RXCIE0);		//	Enable RX, TX
 89e:	e1 ec       	ldi	r30, 0xC1	; 193
 8a0:	f0 e0       	ldi	r31, 0x00	; 0
 8a2:	80 81       	ld	r24, Z
 8a4:	88 61       	ori	r24, 0x18	; 24
 8a6:	80 83       	st	Z, r24
 8a8:	08 95       	ret

000008aa <usart_transmit>:
	usart_transmit(tmp);
}

void usart_transmit(uint8_t tx_data)
{
	while(!(UCSR0A & (1<<UDRE0))); //Buffer upptagen
 8aa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
 8ae:	95 ff       	sbrs	r25, 5
 8b0:	fc cf       	rjmp	.-8      	; 0x8aa <usart_transmit>
	UDR0 = tx_data;
 8b2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 8b6:	08 95       	ret

000008b8 <__subsf3>:
 8b8:	50 58       	subi	r21, 0x80	; 128

000008ba <__addsf3>:
 8ba:	bb 27       	eor	r27, r27
 8bc:	aa 27       	eor	r26, r26
 8be:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__addsf3x>
 8c2:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__fp_round>
 8c6:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__fp_pscA>
 8ca:	38 f0       	brcs	.+14     	; 0x8da <__addsf3+0x20>
 8cc:	0e 94 45 05 	call	0xa8a	; 0xa8a <__fp_pscB>
 8d0:	20 f0       	brcs	.+8      	; 0x8da <__addsf3+0x20>
 8d2:	39 f4       	brne	.+14     	; 0x8e2 <__addsf3+0x28>
 8d4:	9f 3f       	cpi	r25, 0xFF	; 255
 8d6:	19 f4       	brne	.+6      	; 0x8de <__addsf3+0x24>
 8d8:	26 f4       	brtc	.+8      	; 0x8e2 <__addsf3+0x28>
 8da:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__fp_nan>
 8de:	0e f4       	brtc	.+2      	; 0x8e2 <__addsf3+0x28>
 8e0:	e0 95       	com	r30
 8e2:	e7 fb       	bst	r30, 7
 8e4:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__fp_inf>

000008e8 <__addsf3x>:
 8e8:	e9 2f       	mov	r30, r25
 8ea:	0e 94 5d 05 	call	0xaba	; 0xaba <__fp_split3>
 8ee:	58 f3       	brcs	.-42     	; 0x8c6 <__addsf3+0xc>
 8f0:	ba 17       	cp	r27, r26
 8f2:	62 07       	cpc	r22, r18
 8f4:	73 07       	cpc	r23, r19
 8f6:	84 07       	cpc	r24, r20
 8f8:	95 07       	cpc	r25, r21
 8fa:	20 f0       	brcs	.+8      	; 0x904 <__addsf3x+0x1c>
 8fc:	79 f4       	brne	.+30     	; 0x91c <__addsf3x+0x34>
 8fe:	a6 f5       	brtc	.+104    	; 0x968 <__addsf3x+0x80>
 900:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__fp_zero>
 904:	0e f4       	brtc	.+2      	; 0x908 <__addsf3x+0x20>
 906:	e0 95       	com	r30
 908:	0b 2e       	mov	r0, r27
 90a:	ba 2f       	mov	r27, r26
 90c:	a0 2d       	mov	r26, r0
 90e:	0b 01       	movw	r0, r22
 910:	b9 01       	movw	r22, r18
 912:	90 01       	movw	r18, r0
 914:	0c 01       	movw	r0, r24
 916:	ca 01       	movw	r24, r20
 918:	a0 01       	movw	r20, r0
 91a:	11 24       	eor	r1, r1
 91c:	ff 27       	eor	r31, r31
 91e:	59 1b       	sub	r21, r25
 920:	99 f0       	breq	.+38     	; 0x948 <__addsf3x+0x60>
 922:	59 3f       	cpi	r21, 0xF9	; 249
 924:	50 f4       	brcc	.+20     	; 0x93a <__addsf3x+0x52>
 926:	50 3e       	cpi	r21, 0xE0	; 224
 928:	68 f1       	brcs	.+90     	; 0x984 <__addsf3x+0x9c>
 92a:	1a 16       	cp	r1, r26
 92c:	f0 40       	sbci	r31, 0x00	; 0
 92e:	a2 2f       	mov	r26, r18
 930:	23 2f       	mov	r18, r19
 932:	34 2f       	mov	r19, r20
 934:	44 27       	eor	r20, r20
 936:	58 5f       	subi	r21, 0xF8	; 248
 938:	f3 cf       	rjmp	.-26     	; 0x920 <__addsf3x+0x38>
 93a:	46 95       	lsr	r20
 93c:	37 95       	ror	r19
 93e:	27 95       	ror	r18
 940:	a7 95       	ror	r26
 942:	f0 40       	sbci	r31, 0x00	; 0
 944:	53 95       	inc	r21
 946:	c9 f7       	brne	.-14     	; 0x93a <__addsf3x+0x52>
 948:	7e f4       	brtc	.+30     	; 0x968 <__addsf3x+0x80>
 94a:	1f 16       	cp	r1, r31
 94c:	ba 0b       	sbc	r27, r26
 94e:	62 0b       	sbc	r22, r18
 950:	73 0b       	sbc	r23, r19
 952:	84 0b       	sbc	r24, r20
 954:	ba f0       	brmi	.+46     	; 0x984 <__addsf3x+0x9c>
 956:	91 50       	subi	r25, 0x01	; 1
 958:	a1 f0       	breq	.+40     	; 0x982 <__addsf3x+0x9a>
 95a:	ff 0f       	add	r31, r31
 95c:	bb 1f       	adc	r27, r27
 95e:	66 1f       	adc	r22, r22
 960:	77 1f       	adc	r23, r23
 962:	88 1f       	adc	r24, r24
 964:	c2 f7       	brpl	.-16     	; 0x956 <__addsf3x+0x6e>
 966:	0e c0       	rjmp	.+28     	; 0x984 <__addsf3x+0x9c>
 968:	ba 0f       	add	r27, r26
 96a:	62 1f       	adc	r22, r18
 96c:	73 1f       	adc	r23, r19
 96e:	84 1f       	adc	r24, r20
 970:	48 f4       	brcc	.+18     	; 0x984 <__addsf3x+0x9c>
 972:	87 95       	ror	r24
 974:	77 95       	ror	r23
 976:	67 95       	ror	r22
 978:	b7 95       	ror	r27
 97a:	f7 95       	ror	r31
 97c:	9e 3f       	cpi	r25, 0xFE	; 254
 97e:	08 f0       	brcs	.+2      	; 0x982 <__addsf3x+0x9a>
 980:	b0 cf       	rjmp	.-160    	; 0x8e2 <__addsf3+0x28>
 982:	93 95       	inc	r25
 984:	88 0f       	add	r24, r24
 986:	08 f0       	brcs	.+2      	; 0x98a <__addsf3x+0xa2>
 988:	99 27       	eor	r25, r25
 98a:	ee 0f       	add	r30, r30
 98c:	97 95       	ror	r25
 98e:	87 95       	ror	r24
 990:	08 95       	ret

00000992 <__fixunssfsi>:
 992:	0e 94 65 05 	call	0xaca	; 0xaca <__fp_splitA>
 996:	88 f0       	brcs	.+34     	; 0x9ba <__fixunssfsi+0x28>
 998:	9f 57       	subi	r25, 0x7F	; 127
 99a:	98 f0       	brcs	.+38     	; 0x9c2 <__fixunssfsi+0x30>
 99c:	b9 2f       	mov	r27, r25
 99e:	99 27       	eor	r25, r25
 9a0:	b7 51       	subi	r27, 0x17	; 23
 9a2:	b0 f0       	brcs	.+44     	; 0x9d0 <__fixunssfsi+0x3e>
 9a4:	e1 f0       	breq	.+56     	; 0x9de <__fixunssfsi+0x4c>
 9a6:	66 0f       	add	r22, r22
 9a8:	77 1f       	adc	r23, r23
 9aa:	88 1f       	adc	r24, r24
 9ac:	99 1f       	adc	r25, r25
 9ae:	1a f0       	brmi	.+6      	; 0x9b6 <__fixunssfsi+0x24>
 9b0:	ba 95       	dec	r27
 9b2:	c9 f7       	brne	.-14     	; 0x9a6 <__fixunssfsi+0x14>
 9b4:	14 c0       	rjmp	.+40     	; 0x9de <__fixunssfsi+0x4c>
 9b6:	b1 30       	cpi	r27, 0x01	; 1
 9b8:	91 f0       	breq	.+36     	; 0x9de <__fixunssfsi+0x4c>
 9ba:	0e 94 7f 05 	call	0xafe	; 0xafe <__fp_zero>
 9be:	b1 e0       	ldi	r27, 0x01	; 1
 9c0:	08 95       	ret
 9c2:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__fp_zero>
 9c6:	67 2f       	mov	r22, r23
 9c8:	78 2f       	mov	r23, r24
 9ca:	88 27       	eor	r24, r24
 9cc:	b8 5f       	subi	r27, 0xF8	; 248
 9ce:	39 f0       	breq	.+14     	; 0x9de <__fixunssfsi+0x4c>
 9d0:	b9 3f       	cpi	r27, 0xF9	; 249
 9d2:	cc f3       	brlt	.-14     	; 0x9c6 <__fixunssfsi+0x34>
 9d4:	86 95       	lsr	r24
 9d6:	77 95       	ror	r23
 9d8:	67 95       	ror	r22
 9da:	b3 95       	inc	r27
 9dc:	d9 f7       	brne	.-10     	; 0x9d4 <__fixunssfsi+0x42>
 9de:	3e f4       	brtc	.+14     	; 0x9ee <__fixunssfsi+0x5c>
 9e0:	90 95       	com	r25
 9e2:	80 95       	com	r24
 9e4:	70 95       	com	r23
 9e6:	61 95       	neg	r22
 9e8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ea:	8f 4f       	sbci	r24, 0xFF	; 255
 9ec:	9f 4f       	sbci	r25, 0xFF	; 255
 9ee:	08 95       	ret

000009f0 <__floatunsisf>:
 9f0:	e8 94       	clt
 9f2:	09 c0       	rjmp	.+18     	; 0xa06 <__floatsisf+0x12>

000009f4 <__floatsisf>:
 9f4:	97 fb       	bst	r25, 7
 9f6:	3e f4       	brtc	.+14     	; 0xa06 <__floatsisf+0x12>
 9f8:	90 95       	com	r25
 9fa:	80 95       	com	r24
 9fc:	70 95       	com	r23
 9fe:	61 95       	neg	r22
 a00:	7f 4f       	sbci	r23, 0xFF	; 255
 a02:	8f 4f       	sbci	r24, 0xFF	; 255
 a04:	9f 4f       	sbci	r25, 0xFF	; 255
 a06:	99 23       	and	r25, r25
 a08:	a9 f0       	breq	.+42     	; 0xa34 <__floatsisf+0x40>
 a0a:	f9 2f       	mov	r31, r25
 a0c:	96 e9       	ldi	r25, 0x96	; 150
 a0e:	bb 27       	eor	r27, r27
 a10:	93 95       	inc	r25
 a12:	f6 95       	lsr	r31
 a14:	87 95       	ror	r24
 a16:	77 95       	ror	r23
 a18:	67 95       	ror	r22
 a1a:	b7 95       	ror	r27
 a1c:	f1 11       	cpse	r31, r1
 a1e:	f8 cf       	rjmp	.-16     	; 0xa10 <__floatsisf+0x1c>
 a20:	fa f4       	brpl	.+62     	; 0xa60 <__floatsisf+0x6c>
 a22:	bb 0f       	add	r27, r27
 a24:	11 f4       	brne	.+4      	; 0xa2a <__floatsisf+0x36>
 a26:	60 ff       	sbrs	r22, 0
 a28:	1b c0       	rjmp	.+54     	; 0xa60 <__floatsisf+0x6c>
 a2a:	6f 5f       	subi	r22, 0xFF	; 255
 a2c:	7f 4f       	sbci	r23, 0xFF	; 255
 a2e:	8f 4f       	sbci	r24, 0xFF	; 255
 a30:	9f 4f       	sbci	r25, 0xFF	; 255
 a32:	16 c0       	rjmp	.+44     	; 0xa60 <__floatsisf+0x6c>
 a34:	88 23       	and	r24, r24
 a36:	11 f0       	breq	.+4      	; 0xa3c <__floatsisf+0x48>
 a38:	96 e9       	ldi	r25, 0x96	; 150
 a3a:	11 c0       	rjmp	.+34     	; 0xa5e <__floatsisf+0x6a>
 a3c:	77 23       	and	r23, r23
 a3e:	21 f0       	breq	.+8      	; 0xa48 <__floatsisf+0x54>
 a40:	9e e8       	ldi	r25, 0x8E	; 142
 a42:	87 2f       	mov	r24, r23
 a44:	76 2f       	mov	r23, r22
 a46:	05 c0       	rjmp	.+10     	; 0xa52 <__floatsisf+0x5e>
 a48:	66 23       	and	r22, r22
 a4a:	71 f0       	breq	.+28     	; 0xa68 <__floatsisf+0x74>
 a4c:	96 e8       	ldi	r25, 0x86	; 134
 a4e:	86 2f       	mov	r24, r22
 a50:	70 e0       	ldi	r23, 0x00	; 0
 a52:	60 e0       	ldi	r22, 0x00	; 0
 a54:	2a f0       	brmi	.+10     	; 0xa60 <__floatsisf+0x6c>
 a56:	9a 95       	dec	r25
 a58:	66 0f       	add	r22, r22
 a5a:	77 1f       	adc	r23, r23
 a5c:	88 1f       	adc	r24, r24
 a5e:	da f7       	brpl	.-10     	; 0xa56 <__floatsisf+0x62>
 a60:	88 0f       	add	r24, r24
 a62:	96 95       	lsr	r25
 a64:	87 95       	ror	r24
 a66:	97 f9       	bld	r25, 7
 a68:	08 95       	ret

00000a6a <__fp_inf>:
 a6a:	97 f9       	bld	r25, 7
 a6c:	9f 67       	ori	r25, 0x7F	; 127
 a6e:	80 e8       	ldi	r24, 0x80	; 128
 a70:	70 e0       	ldi	r23, 0x00	; 0
 a72:	60 e0       	ldi	r22, 0x00	; 0
 a74:	08 95       	ret

00000a76 <__fp_nan>:
 a76:	9f ef       	ldi	r25, 0xFF	; 255
 a78:	80 ec       	ldi	r24, 0xC0	; 192
 a7a:	08 95       	ret

00000a7c <__fp_pscA>:
 a7c:	00 24       	eor	r0, r0
 a7e:	0a 94       	dec	r0
 a80:	16 16       	cp	r1, r22
 a82:	17 06       	cpc	r1, r23
 a84:	18 06       	cpc	r1, r24
 a86:	09 06       	cpc	r0, r25
 a88:	08 95       	ret

00000a8a <__fp_pscB>:
 a8a:	00 24       	eor	r0, r0
 a8c:	0a 94       	dec	r0
 a8e:	12 16       	cp	r1, r18
 a90:	13 06       	cpc	r1, r19
 a92:	14 06       	cpc	r1, r20
 a94:	05 06       	cpc	r0, r21
 a96:	08 95       	ret

00000a98 <__fp_round>:
 a98:	09 2e       	mov	r0, r25
 a9a:	03 94       	inc	r0
 a9c:	00 0c       	add	r0, r0
 a9e:	11 f4       	brne	.+4      	; 0xaa4 <__fp_round+0xc>
 aa0:	88 23       	and	r24, r24
 aa2:	52 f0       	brmi	.+20     	; 0xab8 <__fp_round+0x20>
 aa4:	bb 0f       	add	r27, r27
 aa6:	40 f4       	brcc	.+16     	; 0xab8 <__fp_round+0x20>
 aa8:	bf 2b       	or	r27, r31
 aaa:	11 f4       	brne	.+4      	; 0xab0 <__fp_round+0x18>
 aac:	60 ff       	sbrs	r22, 0
 aae:	04 c0       	rjmp	.+8      	; 0xab8 <__fp_round+0x20>
 ab0:	6f 5f       	subi	r22, 0xFF	; 255
 ab2:	7f 4f       	sbci	r23, 0xFF	; 255
 ab4:	8f 4f       	sbci	r24, 0xFF	; 255
 ab6:	9f 4f       	sbci	r25, 0xFF	; 255
 ab8:	08 95       	ret

00000aba <__fp_split3>:
 aba:	57 fd       	sbrc	r21, 7
 abc:	90 58       	subi	r25, 0x80	; 128
 abe:	44 0f       	add	r20, r20
 ac0:	55 1f       	adc	r21, r21
 ac2:	59 f0       	breq	.+22     	; 0xada <__fp_splitA+0x10>
 ac4:	5f 3f       	cpi	r21, 0xFF	; 255
 ac6:	71 f0       	breq	.+28     	; 0xae4 <__fp_splitA+0x1a>
 ac8:	47 95       	ror	r20

00000aca <__fp_splitA>:
 aca:	88 0f       	add	r24, r24
 acc:	97 fb       	bst	r25, 7
 ace:	99 1f       	adc	r25, r25
 ad0:	61 f0       	breq	.+24     	; 0xaea <__fp_splitA+0x20>
 ad2:	9f 3f       	cpi	r25, 0xFF	; 255
 ad4:	79 f0       	breq	.+30     	; 0xaf4 <__fp_splitA+0x2a>
 ad6:	87 95       	ror	r24
 ad8:	08 95       	ret
 ada:	12 16       	cp	r1, r18
 adc:	13 06       	cpc	r1, r19
 ade:	14 06       	cpc	r1, r20
 ae0:	55 1f       	adc	r21, r21
 ae2:	f2 cf       	rjmp	.-28     	; 0xac8 <__fp_split3+0xe>
 ae4:	46 95       	lsr	r20
 ae6:	f1 df       	rcall	.-30     	; 0xaca <__fp_splitA>
 ae8:	08 c0       	rjmp	.+16     	; 0xafa <__fp_splitA+0x30>
 aea:	16 16       	cp	r1, r22
 aec:	17 06       	cpc	r1, r23
 aee:	18 06       	cpc	r1, r24
 af0:	99 1f       	adc	r25, r25
 af2:	f1 cf       	rjmp	.-30     	; 0xad6 <__fp_splitA+0xc>
 af4:	86 95       	lsr	r24
 af6:	71 05       	cpc	r23, r1
 af8:	61 05       	cpc	r22, r1
 afa:	08 94       	sec
 afc:	08 95       	ret

00000afe <__fp_zero>:
 afe:	e8 94       	clt

00000b00 <__fp_szero>:
 b00:	bb 27       	eor	r27, r27
 b02:	66 27       	eor	r22, r22
 b04:	77 27       	eor	r23, r23
 b06:	cb 01       	movw	r24, r22
 b08:	97 f9       	bld	r25, 7
 b0a:	08 95       	ret

00000b0c <__gesf2>:
 b0c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fp_cmp>
 b10:	08 f4       	brcc	.+2      	; 0xb14 <__gesf2+0x8>
 b12:	8f ef       	ldi	r24, 0xFF	; 255
 b14:	08 95       	ret

00000b16 <__mulsf3>:
 b16:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__mulsf3x>
 b1a:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__fp_round>
 b1e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__fp_pscA>
 b22:	38 f0       	brcs	.+14     	; 0xb32 <__mulsf3+0x1c>
 b24:	0e 94 45 05 	call	0xa8a	; 0xa8a <__fp_pscB>
 b28:	20 f0       	brcs	.+8      	; 0xb32 <__mulsf3+0x1c>
 b2a:	95 23       	and	r25, r21
 b2c:	11 f0       	breq	.+4      	; 0xb32 <__mulsf3+0x1c>
 b2e:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__fp_inf>
 b32:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__fp_nan>
 b36:	11 24       	eor	r1, r1
 b38:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__fp_szero>

00000b3c <__mulsf3x>:
 b3c:	0e 94 5d 05 	call	0xaba	; 0xaba <__fp_split3>
 b40:	70 f3       	brcs	.-36     	; 0xb1e <__mulsf3+0x8>

00000b42 <__mulsf3_pse>:
 b42:	95 9f       	mul	r25, r21
 b44:	c1 f3       	breq	.-16     	; 0xb36 <__mulsf3+0x20>
 b46:	95 0f       	add	r25, r21
 b48:	50 e0       	ldi	r21, 0x00	; 0
 b4a:	55 1f       	adc	r21, r21
 b4c:	62 9f       	mul	r22, r18
 b4e:	f0 01       	movw	r30, r0
 b50:	72 9f       	mul	r23, r18
 b52:	bb 27       	eor	r27, r27
 b54:	f0 0d       	add	r31, r0
 b56:	b1 1d       	adc	r27, r1
 b58:	63 9f       	mul	r22, r19
 b5a:	aa 27       	eor	r26, r26
 b5c:	f0 0d       	add	r31, r0
 b5e:	b1 1d       	adc	r27, r1
 b60:	aa 1f       	adc	r26, r26
 b62:	64 9f       	mul	r22, r20
 b64:	66 27       	eor	r22, r22
 b66:	b0 0d       	add	r27, r0
 b68:	a1 1d       	adc	r26, r1
 b6a:	66 1f       	adc	r22, r22
 b6c:	82 9f       	mul	r24, r18
 b6e:	22 27       	eor	r18, r18
 b70:	b0 0d       	add	r27, r0
 b72:	a1 1d       	adc	r26, r1
 b74:	62 1f       	adc	r22, r18
 b76:	73 9f       	mul	r23, r19
 b78:	b0 0d       	add	r27, r0
 b7a:	a1 1d       	adc	r26, r1
 b7c:	62 1f       	adc	r22, r18
 b7e:	83 9f       	mul	r24, r19
 b80:	a0 0d       	add	r26, r0
 b82:	61 1d       	adc	r22, r1
 b84:	22 1f       	adc	r18, r18
 b86:	74 9f       	mul	r23, r20
 b88:	33 27       	eor	r19, r19
 b8a:	a0 0d       	add	r26, r0
 b8c:	61 1d       	adc	r22, r1
 b8e:	23 1f       	adc	r18, r19
 b90:	84 9f       	mul	r24, r20
 b92:	60 0d       	add	r22, r0
 b94:	21 1d       	adc	r18, r1
 b96:	82 2f       	mov	r24, r18
 b98:	76 2f       	mov	r23, r22
 b9a:	6a 2f       	mov	r22, r26
 b9c:	11 24       	eor	r1, r1
 b9e:	9f 57       	subi	r25, 0x7F	; 127
 ba0:	50 40       	sbci	r21, 0x00	; 0
 ba2:	9a f0       	brmi	.+38     	; 0xbca <__mulsf3_pse+0x88>
 ba4:	f1 f0       	breq	.+60     	; 0xbe2 <__mulsf3_pse+0xa0>
 ba6:	88 23       	and	r24, r24
 ba8:	4a f0       	brmi	.+18     	; 0xbbc <__mulsf3_pse+0x7a>
 baa:	ee 0f       	add	r30, r30
 bac:	ff 1f       	adc	r31, r31
 bae:	bb 1f       	adc	r27, r27
 bb0:	66 1f       	adc	r22, r22
 bb2:	77 1f       	adc	r23, r23
 bb4:	88 1f       	adc	r24, r24
 bb6:	91 50       	subi	r25, 0x01	; 1
 bb8:	50 40       	sbci	r21, 0x00	; 0
 bba:	a9 f7       	brne	.-22     	; 0xba6 <__mulsf3_pse+0x64>
 bbc:	9e 3f       	cpi	r25, 0xFE	; 254
 bbe:	51 05       	cpc	r21, r1
 bc0:	80 f0       	brcs	.+32     	; 0xbe2 <__mulsf3_pse+0xa0>
 bc2:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__fp_inf>
 bc6:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__fp_szero>
 bca:	5f 3f       	cpi	r21, 0xFF	; 255
 bcc:	e4 f3       	brlt	.-8      	; 0xbc6 <__mulsf3_pse+0x84>
 bce:	98 3e       	cpi	r25, 0xE8	; 232
 bd0:	d4 f3       	brlt	.-12     	; 0xbc6 <__mulsf3_pse+0x84>
 bd2:	86 95       	lsr	r24
 bd4:	77 95       	ror	r23
 bd6:	67 95       	ror	r22
 bd8:	b7 95       	ror	r27
 bda:	f7 95       	ror	r31
 bdc:	e7 95       	ror	r30
 bde:	9f 5f       	subi	r25, 0xFF	; 255
 be0:	c1 f7       	brne	.-16     	; 0xbd2 <__mulsf3_pse+0x90>
 be2:	fe 2b       	or	r31, r30
 be4:	88 0f       	add	r24, r24
 be6:	91 1d       	adc	r25, r1
 be8:	96 95       	lsr	r25
 bea:	87 95       	ror	r24
 bec:	97 f9       	bld	r25, 7
 bee:	08 95       	ret

00000bf0 <__fp_cmp>:
 bf0:	99 0f       	add	r25, r25
 bf2:	00 08       	sbc	r0, r0
 bf4:	55 0f       	add	r21, r21
 bf6:	aa 0b       	sbc	r26, r26
 bf8:	e0 e8       	ldi	r30, 0x80	; 128
 bfa:	fe ef       	ldi	r31, 0xFE	; 254
 bfc:	16 16       	cp	r1, r22
 bfe:	17 06       	cpc	r1, r23
 c00:	e8 07       	cpc	r30, r24
 c02:	f9 07       	cpc	r31, r25
 c04:	c0 f0       	brcs	.+48     	; 0xc36 <__fp_cmp+0x46>
 c06:	12 16       	cp	r1, r18
 c08:	13 06       	cpc	r1, r19
 c0a:	e4 07       	cpc	r30, r20
 c0c:	f5 07       	cpc	r31, r21
 c0e:	98 f0       	brcs	.+38     	; 0xc36 <__fp_cmp+0x46>
 c10:	62 1b       	sub	r22, r18
 c12:	73 0b       	sbc	r23, r19
 c14:	84 0b       	sbc	r24, r20
 c16:	95 0b       	sbc	r25, r21
 c18:	39 f4       	brne	.+14     	; 0xc28 <__fp_cmp+0x38>
 c1a:	0a 26       	eor	r0, r26
 c1c:	61 f0       	breq	.+24     	; 0xc36 <__fp_cmp+0x46>
 c1e:	23 2b       	or	r18, r19
 c20:	24 2b       	or	r18, r20
 c22:	25 2b       	or	r18, r21
 c24:	21 f4       	brne	.+8      	; 0xc2e <__fp_cmp+0x3e>
 c26:	08 95       	ret
 c28:	0a 26       	eor	r0, r26
 c2a:	09 f4       	brne	.+2      	; 0xc2e <__fp_cmp+0x3e>
 c2c:	a1 40       	sbci	r26, 0x01	; 1
 c2e:	a6 95       	lsr	r26
 c30:	8f ef       	ldi	r24, 0xFF	; 255
 c32:	81 1d       	adc	r24, r1
 c34:	81 1d       	adc	r24, r1
 c36:	08 95       	ret

00000c38 <__divmodhi4>:
 c38:	97 fb       	bst	r25, 7
 c3a:	07 2e       	mov	r0, r23
 c3c:	16 f4       	brtc	.+4      	; 0xc42 <__divmodhi4+0xa>
 c3e:	00 94       	com	r0
 c40:	07 d0       	rcall	.+14     	; 0xc50 <__divmodhi4_neg1>
 c42:	77 fd       	sbrc	r23, 7
 c44:	09 d0       	rcall	.+18     	; 0xc58 <__divmodhi4_neg2>
 c46:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__udivmodhi4>
 c4a:	07 fc       	sbrc	r0, 7
 c4c:	05 d0       	rcall	.+10     	; 0xc58 <__divmodhi4_neg2>
 c4e:	3e f4       	brtc	.+14     	; 0xc5e <__divmodhi4_exit>

00000c50 <__divmodhi4_neg1>:
 c50:	90 95       	com	r25
 c52:	81 95       	neg	r24
 c54:	9f 4f       	sbci	r25, 0xFF	; 255
 c56:	08 95       	ret

00000c58 <__divmodhi4_neg2>:
 c58:	70 95       	com	r23
 c5a:	61 95       	neg	r22
 c5c:	7f 4f       	sbci	r23, 0xFF	; 255

00000c5e <__divmodhi4_exit>:
 c5e:	08 95       	ret

00000c60 <__umulhisi3>:
 c60:	a2 9f       	mul	r26, r18
 c62:	b0 01       	movw	r22, r0
 c64:	b3 9f       	mul	r27, r19
 c66:	c0 01       	movw	r24, r0
 c68:	a3 9f       	mul	r26, r19
 c6a:	70 0d       	add	r23, r0
 c6c:	81 1d       	adc	r24, r1
 c6e:	11 24       	eor	r1, r1
 c70:	91 1d       	adc	r25, r1
 c72:	b2 9f       	mul	r27, r18
 c74:	70 0d       	add	r23, r0
 c76:	81 1d       	adc	r24, r1
 c78:	11 24       	eor	r1, r1
 c7a:	91 1d       	adc	r25, r1
 c7c:	08 95       	ret

00000c7e <__udivmodhi4>:
 c7e:	aa 1b       	sub	r26, r26
 c80:	bb 1b       	sub	r27, r27
 c82:	51 e1       	ldi	r21, 0x11	; 17
 c84:	07 c0       	rjmp	.+14     	; 0xc94 <__udivmodhi4_ep>

00000c86 <__udivmodhi4_loop>:
 c86:	aa 1f       	adc	r26, r26
 c88:	bb 1f       	adc	r27, r27
 c8a:	a6 17       	cp	r26, r22
 c8c:	b7 07       	cpc	r27, r23
 c8e:	10 f0       	brcs	.+4      	; 0xc94 <__udivmodhi4_ep>
 c90:	a6 1b       	sub	r26, r22
 c92:	b7 0b       	sbc	r27, r23

00000c94 <__udivmodhi4_ep>:
 c94:	88 1f       	adc	r24, r24
 c96:	99 1f       	adc	r25, r25
 c98:	5a 95       	dec	r21
 c9a:	a9 f7       	brne	.-22     	; 0xc86 <__udivmodhi4_loop>
 c9c:	80 95       	com	r24
 c9e:	90 95       	com	r25
 ca0:	bc 01       	movw	r22, r24
 ca2:	cd 01       	movw	r24, r26
 ca4:	08 95       	ret

00000ca6 <abs>:
 ca6:	97 ff       	sbrs	r25, 7
 ca8:	03 c0       	rjmp	.+6      	; 0xcb0 <abs+0xa>
 caa:	91 95       	neg	r25
 cac:	81 95       	neg	r24
 cae:	91 09       	sbc	r25, r1
 cb0:	08 95       	ret

00000cb2 <_exit>:
 cb2:	f8 94       	cli

00000cb4 <__stop_program>:
 cb4:	ff cf       	rjmp	.-2      	; 0xcb4 <__stop_program>
