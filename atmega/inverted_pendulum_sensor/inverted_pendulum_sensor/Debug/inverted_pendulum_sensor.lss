
inverted_pendulum_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800100  00800100  00000728  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000758  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c1c  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c6  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000580  00000000  00000000  00001d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  000022b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000558  00000000  00000000  00002430  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001dc  00000000  00000000  00002988  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002b64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_24>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a7 31       	cpi	r26, 0x17	; 23
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  9c:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <setup_adc>:
void adc_interrupt_enabled(){
	ADCSRA |= (1<<ADIE);
}

void adc_interrupt_disbled(){
	ADCSRA &= ~(1<<ADIE);
  a4:	ec e7       	ldi	r30, 0x7C	; 124
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	90 81       	ld	r25, Z
  aa:	9f 73       	andi	r25, 0x3F	; 63
  ac:	90 83       	st	Z, r25
  ae:	90 81       	ld	r25, Z
  b0:	89 2b       	or	r24, r25
  b2:	80 83       	st	Z, r24
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <adc_prescaler>:
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	98 7f       	andi	r25, 0xF8	; 248
  ce:	90 83       	st	Z, r25
  d0:	90 81       	ld	r25, Z
  d2:	89 2b       	or	r24, r25
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <set_channel>:
  d8:	ec e7       	ldi	r30, 0x7C	; 124
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	98 7f       	andi	r25, 0xF8	; 248
  e0:	90 83       	st	Z, r25
  e2:	90 81       	ld	r25, Z
  e4:	89 2b       	or	r24, r25
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <adc_interrupt_enabled>:
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <adc_freerun>:
}
void adc_freerun(){
	ADCSRA |= (1<<ADATE);
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 62       	ori	r24, 0x20	; 32
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <adc_start>:
}
void adc_start(){
	ADCSRA |= (1<<ADSC);		///< Starting Analog-to-digital conversion
 102:	ea e7       	ldi	r30, 0x7A	; 122
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <main>:
void send_motorspeed();

int main(void)
{
	//	ADC
	setup_adc(0);
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 52 00 	call	0xa4	; 0xa4 <setup_adc>
	adc_interrupt_enabled();
 114:	0e 94 75 00 	call	0xea	; 0xea <adc_interrupt_enabled>
	adc_freerun();
 118:	0e 94 7b 00 	call	0xf6	; 0xf6 <adc_freerun>
	adc_start();
 11c:	0e 94 81 00 	call	0x102	; 0x102 <adc_start>
	adc_prescaler(PRESCALER128);
 120:	87 e0       	ldi	r24, 0x07	; 7
 122:	0e 94 63 00 	call	0xc6	; 0xc6 <adc_prescaler>
	//	USART
	usart_init();
 126:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <usart_init>
	sei();
 12a:	78 94       	sei
	//	Remove later, for testing delta Time
	DDRD |= (1<<7);
 12c:	8a b1       	in	r24, 0x0a	; 10
 12e:	80 68       	ori	r24, 0x80	; 128
 130:	8a b9       	out	0x0a, r24	; 10
 132:	ff cf       	rjmp	.-2      	; 0x132 <main+0x24>

00000134 <send_motorspeed>:

	
}

void send_motorspeed()
{
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	1f 92       	push	r1
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t data =  speed/7;
 13e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <speed>
 142:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <speed+0x1>
 146:	67 e0       	ldi	r22, 0x07	; 7
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	0e 94 30 03 	call	0x660	; 0x660 <__divmodhi4>
 14e:	69 83       	std	Y+1, r22	; 0x01
	data*=4;
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	88 0f       	add	r24, r24
 154:	88 0f       	add	r24, r24
 156:	89 83       	std	Y+1, r24	; 0x01
	data|=motor_direction;
 158:	99 81       	ldd	r25, Y+1	; 0x01
 15a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <motor_direction>
 15e:	89 2b       	or	r24, r25
 160:	89 83       	std	Y+1, r24	; 0x01
	usart_transmit(data);
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <usart_transmit>
 168:	0f 90       	pop	r0
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <getDegree>:
/*
*	\brief Determines degree depending on which sensor has the most correct reading
*	at the current place in time.
*/
void getDegree(){	// Dåligt namn. Byt det ditt äckel
	if(H1>H2){										//	Leaning towards H2, need to drive forward, e1 should be used
 170:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <H1>
 174:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <H1+0x1>
 178:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <H2>
 17c:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <H2+0x1>
 180:	82 17       	cp	r24, r18
 182:	93 07       	cpc	r25, r19
 184:	7c f5       	brge	.+94     	; 0x1e4 <getDegree+0x74>
		speed = -(P*e1+Ki*(H1-H1_prev)*DELTA_TIME+Kd*(H1-H1_prev)*DELTA_TIME);			//	Negative multiplication due to the nature of TARGET-adc_val
 186:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <H1>
 18a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <H1+0x1>
 18e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <H1_prev>
 192:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <H1_prev+0x1>
 196:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <H1>
 19a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <H1+0x1>
 19e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <H1_prev>
 1a2:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <H1_prev+0x1>
 1a6:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <e1>
 1aa:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <e1+0x1>
 1ae:	07 2e       	mov	r0, r23
 1b0:	00 0c       	add	r0, r0
 1b2:	88 0b       	sbc	r24, r24
 1b4:	99 0b       	sbc	r25, r25
 1b6:	0e 94 a4 02 	call	0x548	; 0x548 <__floatsisf>
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	a9 01       	movw	r20, r18
 1c0:	0e 94 00 02 	call	0x400	; 0x400 <__addsf3>
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	a9 01       	movw	r20, r18
 1ca:	0e 94 00 02 	call	0x400	; 0x400 <__addsf3>
 1ce:	90 58       	subi	r25, 0x80	; 128
 1d0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__fixsfsi>
 1d4:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <speed+0x1>
 1d8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <speed>
		motor_direction = FORWARD;
 1dc:	80 e8       	ldi	r24, 0x80	; 128
 1de:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <motor_direction>
 1e2:	2d c0       	rjmp	.+90     	; 0x23e <getDegree+0xce>
	}else{											//	Leaning towards H1, need to drive backwards, e2 should be used
		speed = -(P*e2+Ki*(H2-H2_prev)*DELTA_TIME+Kd*(H2-H2_prev)*DELTA_TIME);			//	Negative multiplication due to the nature of TARGET-adc_val
 1e4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <H2>
 1e8:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <H2+0x1>
 1ec:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <H2_prev>
 1f0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <H2_prev+0x1>
 1f4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <H2>
 1f8:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <H2+0x1>
 1fc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <H2_prev>
 200:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <H2_prev+0x1>
 204:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <e2>
 208:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <e2+0x1>
 20c:	07 2e       	mov	r0, r23
 20e:	00 0c       	add	r0, r0
 210:	88 0b       	sbc	r24, r24
 212:	99 0b       	sbc	r25, r25
 214:	0e 94 a4 02 	call	0x548	; 0x548 <__floatsisf>
 218:	20 e0       	ldi	r18, 0x00	; 0
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	a9 01       	movw	r20, r18
 21e:	0e 94 00 02 	call	0x400	; 0x400 <__addsf3>
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	a9 01       	movw	r20, r18
 228:	0e 94 00 02 	call	0x400	; 0x400 <__addsf3>
 22c:	90 58       	subi	r25, 0x80	; 128
 22e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__fixsfsi>
 232:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <speed+0x1>
 236:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <speed>
		motor_direction = BACKWARDS;
 23a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <motor_direction>
	}
	
	send_motorspeed();
 23e:	0e 94 9a 00 	call	0x134	; 0x134 <send_motorspeed>
 242:	08 95       	ret

00000244 <__vector_24>:
    {
		
	}
}

ISR(ADC_vect){
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	2f 93       	push	r18
 250:	3f 93       	push	r19
 252:	4f 93       	push	r20
 254:	5f 93       	push	r21
 256:	6f 93       	push	r22
 258:	7f 93       	push	r23
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	af 93       	push	r26
 260:	bf 93       	push	r27
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
	adc_val = ADC;
 266:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f0078>
 26a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
 26e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <adc_val+0x1>
 272:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <adc_val>
	adc_switch_counter++;
 276:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <adc_switch_counter>
 27a:	8f 5f       	subi	r24, 0xFF	; 255
 27c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adc_switch_counter>
	//	PORTD ^= (1<<7);							//	For testing deltaTime
	if(adc_switch_counter==ADC_SWITCH){
 280:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <adc_switch_counter>
 284:	82 30       	cpi	r24, 0x02	; 2
 286:	09 f0       	breq	.+2      	; 0x28a <__vector_24+0x46>
 288:	96 c0       	rjmp	.+300    	; 0x3b6 <__vector_24+0x172>
		moving_avarage_counter++;
 28a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <moving_avarage_counter>
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <moving_avarage_counter>
													//	Switch reading to other sensor
		if(sensor==H1_SENS){
 294:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <sensor>
 298:	81 11       	cpse	r24, r1
 29a:	40 c0       	rjmp	.+128    	; 0x31c <__vector_24+0xd8>
			if(moving_avarage_counter<=MOVING_AVARAGE){
 29c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <moving_avarage_counter>
 2a0:	85 31       	cpi	r24, 0x15	; 21
 2a2:	78 f4       	brcc	.+30     	; 0x2c2 <__vector_24+0x7e>
				buffer+=adc_val;
 2a4:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <adc_val>
 2a8:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <adc_val+0x1>
 2ac:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <buffer>
 2b0:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <buffer+0x1>
 2b4:	82 0f       	add	r24, r18
 2b6:	93 1f       	adc	r25, r19
 2b8:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <buffer+0x1>
 2bc:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <buffer>
 2c0:	6b c0       	rjmp	.+214    	; 0x398 <__vector_24+0x154>
			}else{
				H1_prev = H1;
 2c2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <H1>
 2c6:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <H1+0x1>
 2ca:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <H1_prev+0x1>
 2ce:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <H1_prev>
				H1 = buffer/MOVING_AVARAGE;
 2d2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <buffer>
 2d6:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <buffer+0x1>
 2da:	64 e1       	ldi	r22, 0x14	; 20
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	0e 94 30 03 	call	0x660	; 0x660 <__divmodhi4>
 2e2:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <H1+0x1>
 2e6:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <H1>
				e1=TARGET_1-H1;						//	e_1(t)
 2ea:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <H1>
 2ee:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <H1+0x1>
 2f2:	8a eb       	ldi	r24, 0xBA	; 186
 2f4:	92 e0       	ldi	r25, 0x02	; 2
 2f6:	82 1b       	sub	r24, r18
 2f8:	93 0b       	sbc	r25, r19
 2fa:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <e1+0x1>
 2fe:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <e1>
				// Switch to read H2
				set_channel(ADC1);						//	Set ADC channel to PA1
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
				sensor=H2_SENS;	
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <sensor>
				moving_avarage_counter=0;
 30e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <moving_avarage_counter>
				buffer=0;
 312:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <buffer+0x1>
 316:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <buffer>
 31a:	3e c0       	rjmp	.+124    	; 0x398 <__vector_24+0x154>
				}
			}else{
			if(moving_avarage_counter<=MOVING_AVARAGE){
 31c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <moving_avarage_counter>
 320:	85 31       	cpi	r24, 0x15	; 21
 322:	78 f4       	brcc	.+30     	; 0x342 <__vector_24+0xfe>
				buffer+=adc_val;
 324:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <adc_val>
 328:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <adc_val+0x1>
 32c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <buffer>
 330:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <buffer+0x1>
 334:	82 0f       	add	r24, r18
 336:	93 1f       	adc	r25, r19
 338:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <buffer+0x1>
 33c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <buffer>
 340:	2b c0       	rjmp	.+86     	; 0x398 <__vector_24+0x154>
			}else{
				H2_prev = H2;
 342:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <H2>
 346:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <H2+0x1>
 34a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <H2_prev+0x1>
 34e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <H2_prev>
				H2 = buffer/MOVING_AVARAGE;
 352:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <buffer>
 356:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <buffer+0x1>
 35a:	64 e1       	ldi	r22, 0x14	; 20
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	0e 94 30 03 	call	0x660	; 0x660 <__divmodhi4>
 362:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <H2+0x1>
 366:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <H2>
				e2=TARGET_2-H2;						// e_2(t)
 36a:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <H2>
 36e:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <H2+0x1>
 372:	88 ec       	ldi	r24, 0xC8	; 200
 374:	92 e0       	ldi	r25, 0x02	; 2
 376:	82 1b       	sub	r24, r18
 378:	93 0b       	sbc	r25, r19
 37a:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <e2+0x1>
 37e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <e2>
				// Switch to read H1
				set_channel(ADC0);						//	Set ADC channel to PA0
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_channel>
				sensor=H1_SENS;
 388:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <sensor>
				moving_avarage_counter=0;
 38c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <moving_avarage_counter>
				buffer=0;
 390:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <buffer+0x1>
 394:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <buffer>
			}
		}
		adc_switch_counter=0;
 398:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <adc_switch_counter>


		//Testar för att fixa så att den kan skicka rätt
		transmit_counter++;
 39c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3a0:	8f 5f       	subi	r24, 0xFF	; 255
 3a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if(transmit_counter==250){
 3a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3aa:	8a 3f       	cpi	r24, 0xFA	; 250
 3ac:	21 f4       	brne	.+8      	; 0x3b6 <__vector_24+0x172>
			transmit_counter=0;
 3ae:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			getDegree();
 3b2:	0e 94 b8 00 	call	0x170	; 0x170 <getDegree>
		}

	}
	
}
 3b6:	ff 91       	pop	r31
 3b8:	ef 91       	pop	r30
 3ba:	bf 91       	pop	r27
 3bc:	af 91       	pop	r26
 3be:	9f 91       	pop	r25
 3c0:	8f 91       	pop	r24
 3c2:	7f 91       	pop	r23
 3c4:	6f 91       	pop	r22
 3c6:	5f 91       	pop	r21
 3c8:	4f 91       	pop	r20
 3ca:	3f 91       	pop	r19
 3cc:	2f 91       	pop	r18
 3ce:	0f 90       	pop	r0
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	0f 90       	pop	r0
 3d4:	1f 90       	pop	r1
 3d6:	18 95       	reti

000003d8 <usart_init>:

#include "usart.h"

void usart_init()
{
	UBRR0 = 103; // 9600=103 baud @ 16 MHz, 51=9600 @ 8 MHz
 3d8:	87 e6       	ldi	r24, 0x67	; 103
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
 3e0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
	//UBRR0L = 51;
	UCSR0B |= (1<<TXEN0) | (1<<RXEN0);// | (1 << RXCIE0);		//	Enable RX, TX
 3e4:	e1 ec       	ldi	r30, 0xC1	; 193
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	88 61       	ori	r24, 0x18	; 24
 3ec:	80 83       	st	Z, r24
 3ee:	08 95       	ret

000003f0 <usart_transmit>:
	usart_transmit(tmp);
}

void usart_transmit(uint8_t tx_data)
{
	while(!(UCSR0A & (1<<UDRE0))); //Buffer upptagen
 3f0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
 3f4:	95 ff       	sbrs	r25, 5
 3f6:	fc cf       	rjmp	.-8      	; 0x3f0 <usart_transmit>
	UDR0 = tx_data;
 3f8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
 3fc:	08 95       	ret

000003fe <__subsf3>:
 3fe:	50 58       	subi	r21, 0x80	; 128

00000400 <__addsf3>:
 400:	bb 27       	eor	r27, r27
 402:	aa 27       	eor	r26, r26
 404:	0e 94 17 02 	call	0x42e	; 0x42e <__addsf3x>
 408:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_round>
 40c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__fp_pscA>
 410:	38 f0       	brcs	.+14     	; 0x420 <__addsf3+0x20>
 412:	0e 94 ef 02 	call	0x5de	; 0x5de <__fp_pscB>
 416:	20 f0       	brcs	.+8      	; 0x420 <__addsf3+0x20>
 418:	39 f4       	brne	.+14     	; 0x428 <__addsf3+0x28>
 41a:	9f 3f       	cpi	r25, 0xFF	; 255
 41c:	19 f4       	brne	.+6      	; 0x424 <__addsf3+0x24>
 41e:	26 f4       	brtc	.+8      	; 0x428 <__addsf3+0x28>
 420:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__fp_nan>
 424:	0e f4       	brtc	.+2      	; 0x428 <__addsf3+0x28>
 426:	e0 95       	com	r30
 428:	e7 fb       	bst	r30, 7
 42a:	0c 94 df 02 	jmp	0x5be	; 0x5be <__fp_inf>

0000042e <__addsf3x>:
 42e:	e9 2f       	mov	r30, r25
 430:	0e 94 07 03 	call	0x60e	; 0x60e <__fp_split3>
 434:	58 f3       	brcs	.-42     	; 0x40c <__addsf3+0xc>
 436:	ba 17       	cp	r27, r26
 438:	62 07       	cpc	r22, r18
 43a:	73 07       	cpc	r23, r19
 43c:	84 07       	cpc	r24, r20
 43e:	95 07       	cpc	r25, r21
 440:	20 f0       	brcs	.+8      	; 0x44a <__addsf3x+0x1c>
 442:	79 f4       	brne	.+30     	; 0x462 <__addsf3x+0x34>
 444:	a6 f5       	brtc	.+104    	; 0x4ae <__addsf3x+0x80>
 446:	0c 94 29 03 	jmp	0x652	; 0x652 <__fp_zero>
 44a:	0e f4       	brtc	.+2      	; 0x44e <__addsf3x+0x20>
 44c:	e0 95       	com	r30
 44e:	0b 2e       	mov	r0, r27
 450:	ba 2f       	mov	r27, r26
 452:	a0 2d       	mov	r26, r0
 454:	0b 01       	movw	r0, r22
 456:	b9 01       	movw	r22, r18
 458:	90 01       	movw	r18, r0
 45a:	0c 01       	movw	r0, r24
 45c:	ca 01       	movw	r24, r20
 45e:	a0 01       	movw	r20, r0
 460:	11 24       	eor	r1, r1
 462:	ff 27       	eor	r31, r31
 464:	59 1b       	sub	r21, r25
 466:	99 f0       	breq	.+38     	; 0x48e <__addsf3x+0x60>
 468:	59 3f       	cpi	r21, 0xF9	; 249
 46a:	50 f4       	brcc	.+20     	; 0x480 <__addsf3x+0x52>
 46c:	50 3e       	cpi	r21, 0xE0	; 224
 46e:	68 f1       	brcs	.+90     	; 0x4ca <__addsf3x+0x9c>
 470:	1a 16       	cp	r1, r26
 472:	f0 40       	sbci	r31, 0x00	; 0
 474:	a2 2f       	mov	r26, r18
 476:	23 2f       	mov	r18, r19
 478:	34 2f       	mov	r19, r20
 47a:	44 27       	eor	r20, r20
 47c:	58 5f       	subi	r21, 0xF8	; 248
 47e:	f3 cf       	rjmp	.-26     	; 0x466 <__addsf3x+0x38>
 480:	46 95       	lsr	r20
 482:	37 95       	ror	r19
 484:	27 95       	ror	r18
 486:	a7 95       	ror	r26
 488:	f0 40       	sbci	r31, 0x00	; 0
 48a:	53 95       	inc	r21
 48c:	c9 f7       	brne	.-14     	; 0x480 <__addsf3x+0x52>
 48e:	7e f4       	brtc	.+30     	; 0x4ae <__addsf3x+0x80>
 490:	1f 16       	cp	r1, r31
 492:	ba 0b       	sbc	r27, r26
 494:	62 0b       	sbc	r22, r18
 496:	73 0b       	sbc	r23, r19
 498:	84 0b       	sbc	r24, r20
 49a:	ba f0       	brmi	.+46     	; 0x4ca <__addsf3x+0x9c>
 49c:	91 50       	subi	r25, 0x01	; 1
 49e:	a1 f0       	breq	.+40     	; 0x4c8 <__addsf3x+0x9a>
 4a0:	ff 0f       	add	r31, r31
 4a2:	bb 1f       	adc	r27, r27
 4a4:	66 1f       	adc	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	88 1f       	adc	r24, r24
 4aa:	c2 f7       	brpl	.-16     	; 0x49c <__addsf3x+0x6e>
 4ac:	0e c0       	rjmp	.+28     	; 0x4ca <__addsf3x+0x9c>
 4ae:	ba 0f       	add	r27, r26
 4b0:	62 1f       	adc	r22, r18
 4b2:	73 1f       	adc	r23, r19
 4b4:	84 1f       	adc	r24, r20
 4b6:	48 f4       	brcc	.+18     	; 0x4ca <__addsf3x+0x9c>
 4b8:	87 95       	ror	r24
 4ba:	77 95       	ror	r23
 4bc:	67 95       	ror	r22
 4be:	b7 95       	ror	r27
 4c0:	f7 95       	ror	r31
 4c2:	9e 3f       	cpi	r25, 0xFE	; 254
 4c4:	08 f0       	brcs	.+2      	; 0x4c8 <__addsf3x+0x9a>
 4c6:	b0 cf       	rjmp	.-160    	; 0x428 <__addsf3+0x28>
 4c8:	93 95       	inc	r25
 4ca:	88 0f       	add	r24, r24
 4cc:	08 f0       	brcs	.+2      	; 0x4d0 <__addsf3x+0xa2>
 4ce:	99 27       	eor	r25, r25
 4d0:	ee 0f       	add	r30, r30
 4d2:	97 95       	ror	r25
 4d4:	87 95       	ror	r24
 4d6:	08 95       	ret

000004d8 <__fixsfsi>:
 4d8:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__fixunssfsi>
 4dc:	68 94       	set
 4de:	b1 11       	cpse	r27, r1
 4e0:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_szero>
 4e4:	08 95       	ret

000004e6 <__fixunssfsi>:
 4e6:	0e 94 0f 03 	call	0x61e	; 0x61e <__fp_splitA>
 4ea:	88 f0       	brcs	.+34     	; 0x50e <__fixunssfsi+0x28>
 4ec:	9f 57       	subi	r25, 0x7F	; 127
 4ee:	98 f0       	brcs	.+38     	; 0x516 <__fixunssfsi+0x30>
 4f0:	b9 2f       	mov	r27, r25
 4f2:	99 27       	eor	r25, r25
 4f4:	b7 51       	subi	r27, 0x17	; 23
 4f6:	b0 f0       	brcs	.+44     	; 0x524 <__fixunssfsi+0x3e>
 4f8:	e1 f0       	breq	.+56     	; 0x532 <__fixunssfsi+0x4c>
 4fa:	66 0f       	add	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	88 1f       	adc	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	1a f0       	brmi	.+6      	; 0x50a <__fixunssfsi+0x24>
 504:	ba 95       	dec	r27
 506:	c9 f7       	brne	.-14     	; 0x4fa <__fixunssfsi+0x14>
 508:	14 c0       	rjmp	.+40     	; 0x532 <__fixunssfsi+0x4c>
 50a:	b1 30       	cpi	r27, 0x01	; 1
 50c:	91 f0       	breq	.+36     	; 0x532 <__fixunssfsi+0x4c>
 50e:	0e 94 29 03 	call	0x652	; 0x652 <__fp_zero>
 512:	b1 e0       	ldi	r27, 0x01	; 1
 514:	08 95       	ret
 516:	0c 94 29 03 	jmp	0x652	; 0x652 <__fp_zero>
 51a:	67 2f       	mov	r22, r23
 51c:	78 2f       	mov	r23, r24
 51e:	88 27       	eor	r24, r24
 520:	b8 5f       	subi	r27, 0xF8	; 248
 522:	39 f0       	breq	.+14     	; 0x532 <__fixunssfsi+0x4c>
 524:	b9 3f       	cpi	r27, 0xF9	; 249
 526:	cc f3       	brlt	.-14     	; 0x51a <__fixunssfsi+0x34>
 528:	86 95       	lsr	r24
 52a:	77 95       	ror	r23
 52c:	67 95       	ror	r22
 52e:	b3 95       	inc	r27
 530:	d9 f7       	brne	.-10     	; 0x528 <__fixunssfsi+0x42>
 532:	3e f4       	brtc	.+14     	; 0x542 <__fixunssfsi+0x5c>
 534:	90 95       	com	r25
 536:	80 95       	com	r24
 538:	70 95       	com	r23
 53a:	61 95       	neg	r22
 53c:	7f 4f       	sbci	r23, 0xFF	; 255
 53e:	8f 4f       	sbci	r24, 0xFF	; 255
 540:	9f 4f       	sbci	r25, 0xFF	; 255
 542:	08 95       	ret

00000544 <__floatunsisf>:
 544:	e8 94       	clt
 546:	09 c0       	rjmp	.+18     	; 0x55a <__floatsisf+0x12>

00000548 <__floatsisf>:
 548:	97 fb       	bst	r25, 7
 54a:	3e f4       	brtc	.+14     	; 0x55a <__floatsisf+0x12>
 54c:	90 95       	com	r25
 54e:	80 95       	com	r24
 550:	70 95       	com	r23
 552:	61 95       	neg	r22
 554:	7f 4f       	sbci	r23, 0xFF	; 255
 556:	8f 4f       	sbci	r24, 0xFF	; 255
 558:	9f 4f       	sbci	r25, 0xFF	; 255
 55a:	99 23       	and	r25, r25
 55c:	a9 f0       	breq	.+42     	; 0x588 <__floatsisf+0x40>
 55e:	f9 2f       	mov	r31, r25
 560:	96 e9       	ldi	r25, 0x96	; 150
 562:	bb 27       	eor	r27, r27
 564:	93 95       	inc	r25
 566:	f6 95       	lsr	r31
 568:	87 95       	ror	r24
 56a:	77 95       	ror	r23
 56c:	67 95       	ror	r22
 56e:	b7 95       	ror	r27
 570:	f1 11       	cpse	r31, r1
 572:	f8 cf       	rjmp	.-16     	; 0x564 <__floatsisf+0x1c>
 574:	fa f4       	brpl	.+62     	; 0x5b4 <__floatsisf+0x6c>
 576:	bb 0f       	add	r27, r27
 578:	11 f4       	brne	.+4      	; 0x57e <__floatsisf+0x36>
 57a:	60 ff       	sbrs	r22, 0
 57c:	1b c0       	rjmp	.+54     	; 0x5b4 <__floatsisf+0x6c>
 57e:	6f 5f       	subi	r22, 0xFF	; 255
 580:	7f 4f       	sbci	r23, 0xFF	; 255
 582:	8f 4f       	sbci	r24, 0xFF	; 255
 584:	9f 4f       	sbci	r25, 0xFF	; 255
 586:	16 c0       	rjmp	.+44     	; 0x5b4 <__floatsisf+0x6c>
 588:	88 23       	and	r24, r24
 58a:	11 f0       	breq	.+4      	; 0x590 <__floatsisf+0x48>
 58c:	96 e9       	ldi	r25, 0x96	; 150
 58e:	11 c0       	rjmp	.+34     	; 0x5b2 <__floatsisf+0x6a>
 590:	77 23       	and	r23, r23
 592:	21 f0       	breq	.+8      	; 0x59c <__floatsisf+0x54>
 594:	9e e8       	ldi	r25, 0x8E	; 142
 596:	87 2f       	mov	r24, r23
 598:	76 2f       	mov	r23, r22
 59a:	05 c0       	rjmp	.+10     	; 0x5a6 <__floatsisf+0x5e>
 59c:	66 23       	and	r22, r22
 59e:	71 f0       	breq	.+28     	; 0x5bc <__floatsisf+0x74>
 5a0:	96 e8       	ldi	r25, 0x86	; 134
 5a2:	86 2f       	mov	r24, r22
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	2a f0       	brmi	.+10     	; 0x5b4 <__floatsisf+0x6c>
 5aa:	9a 95       	dec	r25
 5ac:	66 0f       	add	r22, r22
 5ae:	77 1f       	adc	r23, r23
 5b0:	88 1f       	adc	r24, r24
 5b2:	da f7       	brpl	.-10     	; 0x5aa <__floatsisf+0x62>
 5b4:	88 0f       	add	r24, r24
 5b6:	96 95       	lsr	r25
 5b8:	87 95       	ror	r24
 5ba:	97 f9       	bld	r25, 7
 5bc:	08 95       	ret

000005be <__fp_inf>:
 5be:	97 f9       	bld	r25, 7
 5c0:	9f 67       	ori	r25, 0x7F	; 127
 5c2:	80 e8       	ldi	r24, 0x80	; 128
 5c4:	70 e0       	ldi	r23, 0x00	; 0
 5c6:	60 e0       	ldi	r22, 0x00	; 0
 5c8:	08 95       	ret

000005ca <__fp_nan>:
 5ca:	9f ef       	ldi	r25, 0xFF	; 255
 5cc:	80 ec       	ldi	r24, 0xC0	; 192
 5ce:	08 95       	ret

000005d0 <__fp_pscA>:
 5d0:	00 24       	eor	r0, r0
 5d2:	0a 94       	dec	r0
 5d4:	16 16       	cp	r1, r22
 5d6:	17 06       	cpc	r1, r23
 5d8:	18 06       	cpc	r1, r24
 5da:	09 06       	cpc	r0, r25
 5dc:	08 95       	ret

000005de <__fp_pscB>:
 5de:	00 24       	eor	r0, r0
 5e0:	0a 94       	dec	r0
 5e2:	12 16       	cp	r1, r18
 5e4:	13 06       	cpc	r1, r19
 5e6:	14 06       	cpc	r1, r20
 5e8:	05 06       	cpc	r0, r21
 5ea:	08 95       	ret

000005ec <__fp_round>:
 5ec:	09 2e       	mov	r0, r25
 5ee:	03 94       	inc	r0
 5f0:	00 0c       	add	r0, r0
 5f2:	11 f4       	brne	.+4      	; 0x5f8 <__fp_round+0xc>
 5f4:	88 23       	and	r24, r24
 5f6:	52 f0       	brmi	.+20     	; 0x60c <__fp_round+0x20>
 5f8:	bb 0f       	add	r27, r27
 5fa:	40 f4       	brcc	.+16     	; 0x60c <__fp_round+0x20>
 5fc:	bf 2b       	or	r27, r31
 5fe:	11 f4       	brne	.+4      	; 0x604 <__fp_round+0x18>
 600:	60 ff       	sbrs	r22, 0
 602:	04 c0       	rjmp	.+8      	; 0x60c <__fp_round+0x20>
 604:	6f 5f       	subi	r22, 0xFF	; 255
 606:	7f 4f       	sbci	r23, 0xFF	; 255
 608:	8f 4f       	sbci	r24, 0xFF	; 255
 60a:	9f 4f       	sbci	r25, 0xFF	; 255
 60c:	08 95       	ret

0000060e <__fp_split3>:
 60e:	57 fd       	sbrc	r21, 7
 610:	90 58       	subi	r25, 0x80	; 128
 612:	44 0f       	add	r20, r20
 614:	55 1f       	adc	r21, r21
 616:	59 f0       	breq	.+22     	; 0x62e <__fp_splitA+0x10>
 618:	5f 3f       	cpi	r21, 0xFF	; 255
 61a:	71 f0       	breq	.+28     	; 0x638 <__fp_splitA+0x1a>
 61c:	47 95       	ror	r20

0000061e <__fp_splitA>:
 61e:	88 0f       	add	r24, r24
 620:	97 fb       	bst	r25, 7
 622:	99 1f       	adc	r25, r25
 624:	61 f0       	breq	.+24     	; 0x63e <__fp_splitA+0x20>
 626:	9f 3f       	cpi	r25, 0xFF	; 255
 628:	79 f0       	breq	.+30     	; 0x648 <__fp_splitA+0x2a>
 62a:	87 95       	ror	r24
 62c:	08 95       	ret
 62e:	12 16       	cp	r1, r18
 630:	13 06       	cpc	r1, r19
 632:	14 06       	cpc	r1, r20
 634:	55 1f       	adc	r21, r21
 636:	f2 cf       	rjmp	.-28     	; 0x61c <__fp_split3+0xe>
 638:	46 95       	lsr	r20
 63a:	f1 df       	rcall	.-30     	; 0x61e <__fp_splitA>
 63c:	08 c0       	rjmp	.+16     	; 0x64e <__fp_splitA+0x30>
 63e:	16 16       	cp	r1, r22
 640:	17 06       	cpc	r1, r23
 642:	18 06       	cpc	r1, r24
 644:	99 1f       	adc	r25, r25
 646:	f1 cf       	rjmp	.-30     	; 0x62a <__fp_splitA+0xc>
 648:	86 95       	lsr	r24
 64a:	71 05       	cpc	r23, r1
 64c:	61 05       	cpc	r22, r1
 64e:	08 94       	sec
 650:	08 95       	ret

00000652 <__fp_zero>:
 652:	e8 94       	clt

00000654 <__fp_szero>:
 654:	bb 27       	eor	r27, r27
 656:	66 27       	eor	r22, r22
 658:	77 27       	eor	r23, r23
 65a:	cb 01       	movw	r24, r22
 65c:	97 f9       	bld	r25, 7
 65e:	08 95       	ret

00000660 <__divmodhi4>:
 660:	97 fb       	bst	r25, 7
 662:	07 2e       	mov	r0, r23
 664:	16 f4       	brtc	.+4      	; 0x66a <__divmodhi4+0xa>
 666:	00 94       	com	r0
 668:	07 d0       	rcall	.+14     	; 0x678 <__divmodhi4_neg1>
 66a:	77 fd       	sbrc	r23, 7
 66c:	09 d0       	rcall	.+18     	; 0x680 <__divmodhi4_neg2>
 66e:	0e 94 44 03 	call	0x688	; 0x688 <__udivmodhi4>
 672:	07 fc       	sbrc	r0, 7
 674:	05 d0       	rcall	.+10     	; 0x680 <__divmodhi4_neg2>
 676:	3e f4       	brtc	.+14     	; 0x686 <__divmodhi4_exit>

00000678 <__divmodhi4_neg1>:
 678:	90 95       	com	r25
 67a:	81 95       	neg	r24
 67c:	9f 4f       	sbci	r25, 0xFF	; 255
 67e:	08 95       	ret

00000680 <__divmodhi4_neg2>:
 680:	70 95       	com	r23
 682:	61 95       	neg	r22
 684:	7f 4f       	sbci	r23, 0xFF	; 255

00000686 <__divmodhi4_exit>:
 686:	08 95       	ret

00000688 <__udivmodhi4>:
 688:	aa 1b       	sub	r26, r26
 68a:	bb 1b       	sub	r27, r27
 68c:	51 e1       	ldi	r21, 0x11	; 17
 68e:	07 c0       	rjmp	.+14     	; 0x69e <__udivmodhi4_ep>

00000690 <__udivmodhi4_loop>:
 690:	aa 1f       	adc	r26, r26
 692:	bb 1f       	adc	r27, r27
 694:	a6 17       	cp	r26, r22
 696:	b7 07       	cpc	r27, r23
 698:	10 f0       	brcs	.+4      	; 0x69e <__udivmodhi4_ep>
 69a:	a6 1b       	sub	r26, r22
 69c:	b7 0b       	sbc	r27, r23

0000069e <__udivmodhi4_ep>:
 69e:	88 1f       	adc	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	5a 95       	dec	r21
 6a4:	a9 f7       	brne	.-22     	; 0x690 <__udivmodhi4_loop>
 6a6:	80 95       	com	r24
 6a8:	90 95       	com	r25
 6aa:	bc 01       	movw	r22, r24
 6ac:	cd 01       	movw	r24, r26
 6ae:	08 95       	ret

000006b0 <_exit>:
 6b0:	f8 94       	cli

000006b2 <__stop_program>:
 6b2:	ff cf       	rjmp	.-2      	; 0x6b2 <__stop_program>
